<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAlexFinalBossIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>objPlayerKiller</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init vars

// General
t = 0;                          // General use timer, updates in the "Animations" code block

intro_finished = false;         // Toggles to true when the intro is finished

vulnerable = false;             // If possible to damage the boss
shield_orb_amnt = 0;            // How many orbs are currently present
recovery_time = 100;            // How many frames until recover shield

exp_amnt = 0;                   // Current exp amount
exp_target = 100;               // How much exp is needed to level up
exp_idle_gain = 0.1;            // How much exp per frame
exp_shield_gain = 5;            // How much exp per shield hit
exp_lock_gain = true;           // Restricts exp gaining when true
exp_level = 1;                  // Current boss level

on_ground = true;               // Whether the boss is touching the ground
ground_level = 512;             // The ground level, cannot clip past this point
default_gravity = 0.2;          // This is the gravity used when airborn

dist_from_player = 250;         // How far away to teleport from the player
dist_from_room_edges = 96;      // How close the final boss can be near the edges
                                // Also triggers the cage attack to bring the player
                                // closer to the middle.

side_from_player = choose(1, -1);   // Dictates which side the boss will teleport at
                                    // the start of the next attack
                                

// Animation related
fallback_sprite = noone;        // When the current sprite animation is finished
                                // fall back to this sprite.
fallback_image_speed = 0.3      // The animation speed of the fallback sprite
look_at_player = false;         // Controls the image_xscale
                          
// Draw related
floating = false;               // Makes the boss sprite wiggle up &amp; down
float_y = 0;
float_dist = 8;
float_spd = 2;

aura_spd = 3;
aura_alpha = 1;
aura_base_alpha = 0.5;
aura_add_alpha = 0.2;
aura_scale = 1.5;
aura_base_scale = aura_scale;
aura_add_scale = .3;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init attacks enums and vars

enum atk {
    stars,
    dash,
    stomp,
    jump,
    circles,
    beams,
}

enum ulti_atk {
    orb_walls,
    bubbles,
}

current_attack = noone;
last_attack = noone;
attack_list = ds_list_create();
event_user(0);  // Fill and shuffle the attack list

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get rid of any data structures

ds_list_destroy(attack_list);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Animations

t++;

// Face the player
if(instance_exists(objPlayer) &amp;&amp; look_at_player) {
    if(objPlayer.x &gt; x)
        image_xscale = 1;
    else
        image_xscale = -1;
}

// Check if currently standing on ground
if(place_meeting(x, y+1, objBlock)) {
    on_ground = true;
} else {
    on_ground = false;
}

// Wiggle the sprite if the sprite is floating
if(floating) {
    float_y = dsin(t*float_spd) * float_dist;
} else {
    float_y = lerp(float_y, 0, .1);
}

// Boss aura
aura_alpha = aura_base_alpha + dsin(t*aura_spd) * aura_add_alpha;
aura_scale = (aura_base_scale + dsin(t*aura_spd) * aura_add_scale) * sign(image_xscale);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Introduction

if(!intro_finished) {
    if(t == 1) {
        scrFinalBossTP(x, ground_level, sprAlexFinalBossIntro);
        image_speed = 0.25;
    }
    
    if(instance_exists(objPlayer)) {
        if(objPlayer.x &gt; x)
            image_xscale = 1;
        else
            image_xscale = -1;
    }
    
    if(image_index &gt;= image_number - 1) {
        intro_finished = true;
        look_at_player = true;
        t = 0;
        
        sprite_index = sprAlexFinalBossIdle;
    
        with(objAlexFBCam) {
            lock_in_place = false;
        }
        
        with(objBlock) {
            if(y &lt; other.ground_level &amp;&amp; y &gt;= 0 &amp;&amp; x &gt; 0 &amp;&amp; x &lt; room_width)
                instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Attacking

if(intro_finished &amp;&amp; instance_exists(objPlayer)) {

    // Choose an attack
    if(current_attack == noone) {
        if(!ds_list_empty(attack_list)) {
            current_attack = attack_list[| 0];
            last_attack = current_attack;
            ds_list_delete(attack_list, 0);
            //current_attack = atk.beams;
        } else {
            // If attack list is empty refill it
            event_user(0);
        }
    }
    
    // Execute the attacks
    switch(current_attack) {
        case atk.stars:
            scrFBAtkStar(exp_level);
            break;
        
        case atk.dash:
            scrFBAtkDash(exp_level);
            break;
            
        case atk.stomp:
            scrFBAtkStomp(exp_level);
            break;
            
        case atk.jump:
            scrFBAtkJump(exp_level);
            break;
            
        case atk.circles:
            scrFBAtkCircles(exp_level);
            break;
            
        case atk.beams:
            scrFBAtkBeams(exp_level);
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Other checks

// Snap to ground level
while(bbox_bottom &gt; ground_level) {
    y--;
    speed = 0;
    gravity = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Finish the current attack &amp; reset some vars

t = 0;
current_attack = noone;
fallback_sprite = noone;
fallback_image_speed = 0.3;
side_from_player *= -1;
look_at_player = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fill the attack list &amp; shuffle

t = 0;

do {
    attack_list[| 0] = atk.stars;
    attack_list[| 1] = atk.dash;
    attack_list[| 2] = atk.stomp;
    attack_list[| 3] = atk.jump;
    attack_list[| 4] = atk.circles;
    attack_list[| 5] = atk.beams;
    ds_list_shuffle(attack_list);
} until (last_attack != attack_list[| 0]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fall back to the previous sprite
// after finishing the attack animation

if(fallback_sprite != noone &amp;&amp; sprite_index != fallback_sprite) {
    sprite_index = fallback_sprite;
    image_speed = fallback_image_speed;
    image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw self and other stuff

// Self and Aura
draw_set_blend_mode(bm_add);
draw_sprite_ext(sprite_index, image_index, x, y + float_y, aura_scale, abs(aura_scale), image_angle, c_fuchsia, aura_alpha);
draw_set_blend_mode(bm_normal);
draw_sprite_ext(sprite_index, image_index, x, y + float_y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

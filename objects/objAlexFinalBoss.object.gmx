<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAlexFinalBossIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>self</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init vars

// General
t = 0;                          // General use timer, updates in the "Animations" code block

intro_finished = false;         // Toggles to true when the intro is finished

hp = 60;                        // Starting health
max_hp = hp;
hit_count = 0;                  // How many times the boss got shot while being vulnerable
max_hits = 20;                  // How many hits are possible when the boss is vulnerable

vulnerable = false;             // If possible to damage the boss
iframes = 0;                    // How many iframes are currently present
max_iframes = 5;                // How long the iframes last
shield_rad = 40;                // How large the shield radius is
recovery_time = 200;            // How many frames until recover shield
recovering = false;             // Whether the boss is about to regenerate the shield orbs
beaten = false;                 // Whether the boss is defeated
player_defeated = false;        // Whether the player is dead

shield_orb_amnt = 0;            // How many orbs are currently present
shield_orb_spawn_amnt = 5;      // How many orbs the shield should have
shield_orb_rad = 64;            // How spaced out should the shield orbs be
shield_orb_spd = -1;            // How fast should the orbs rotate
shield_orb_circle_id = noone;   // The ID of the circle orb circle object

exp_amnt = 0;                   // Current exp amount
exp_max = 100;                  // How much exp is needed to level up
exp_idle_gain = 0.035;          // How much exp per frame
exp_shield_gain = 5;            // How much exp per shield hit
exp_lock_gain = true;           // Restricts exp gaining when true
exp_ready_to_level_up = false;  // Indicates when the boss should play the leveling animation
exp_level = 1;                  // Current boss level
exp_max_level = 3;              // Max level possible

on_ground = true;               // Whether the boss is touching the ground
ground_level = 512;             // The ground level, cannot clip past this point
default_gravity = 0.2;          // This is the gravity used when airborn

dist_from_player = 250;         // How far away to teleport from the player
dist_from_room_edges = 96;      // How close the final boss can be near the edges
                                // Also triggers the cage attack to bring the player
                                // closer to the middle.

side_from_player = choose(1, -1);   // Dictates which side the boss will teleport at
                                    // the start of the next attack
                                

// Animation related
fallback_sprite = noone;        // When the current sprite animation is finished
                                // fall back to this sprite.
fallback_image_speed = 0.3      // The animation speed of the fallback sprite
look_at_player = false;         // Controls the image_xscale
                          
// Draw related
draw_t = 0;

shield_alpha = 0;
shield_scale = 0.5;
shield_start_scale = 0.6;
shield_target_scale = 0.3;

floating = false;               // Makes the boss sprite wiggle up &amp; down
float_y = 0;
float_dist = 8;
float_spd = 2;

recovery_float_t = 0;

show_black_bars = false;
bars_y = 0;
bars_target_y = 96;

aura_spd = 3;
aura_alpha = 1;
aura_base_alpha = 0.5;
aura_add_alpha = 0.2;
aura_scale = 1.5;
aura_base_scale = aura_scale;
aura_add_scale = .3;

show_bars = true;

health_bar_alpha = 0;
health_bar_alpha2 = 0;
health_bar_length = 800 - 128;
health_bar_strip_length = 0;
health_bar_strip_max_length = health_bar_length + 24;
health_bar_strip_color = $7b2fcc;
health_bar_strip_shielded_color = $7b2fcc;
health_bar_strip_vulnerable_color = $b8a44f;
health_bar_color_blend_amnt = 0;  // 0: shielded color, 1: vulnerable color
health_bar_strip_trail_color = $41b5f0;
health_bar_trailing_strip_length = 0;
health_bar_x = 32;
health_bar_x2 = display_get_gui_width()-64;
health_bar_y = 24;
health_bar_eye_icons_alpha = 0;
health_bar_eye_icons_scale = 2;
health_bar_eye_icons_pad = 64;

exp_bar_alpha = 0;
exp_bar_alpha2 = 0;
exp_bar_max_level_alpha = 0;
exp_bar_strip_max_level_color = $41b5f0;
exp_bar_length = 800 - 160;
exp_bar_strip_length = 0;
exp_bar_strip_max_length = (exp_bar_length + 18)/2;
exp_bar_strip_color = $7b2fcc;
exp_bar_strip_first_color = $b8a44f;
exp_bar_strip_secondary_color = $7b2fcc;
exp_bar_color_blend_amnt = 0;  // 0: first color, 1: secondary color
exp_bar_flicker_t = 0;
exp_bar_font = fLobbySmall;
exp_bar_font_col = $e8e0df;
exp_bar_x = 64;
exp_bar_x2 = display_get_gui_width() - 80;
exp_bar_y = 55;

blk_texture = sprFinalStarLevelTexture;
blk_col_r = 105 / 255;
blk_col_g = 100 / 255;
blk_col_b = 165 / 255;

bg_target_hue = 0.7;
bg_target_sat = 0.5;
bg_target_val = 0.15;
bg_hue_incr = 0.022;
bg_sat_incr = 0.038;
bg_val_incr = 0.6;

indicator_ground_stomp_alpha = 0;
indicator_ground_stomp_alpha_target = 0;
indicator_dash_alpha = 0;
indicator_dash_alpha_target = 0;

lvlup_alpha = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init attacks enums and vars

enum atk {
    stars,
    dash,
    stomp,
    jump,
    circles,
    beams,
    beam_cage,
    level_up
}

current_attack = noone;
last_attack = noone;
attack_list = ds_list_create();
event_user(0);  // Fill and shuffle the attack list

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Make the particle system

part_system = part_system_create();
part_type = part_type_create();

part_system_depth(part_system, 1000);

part_type_life(part_type, 180, 220);
part_type_alpha2(part_type, 0.1, 0);
part_type_size(part_type, 5, 5, -0.025, 0);
part_type_shape(part_type, pt_shape_sphere);
part_type_colour2(part_type, $cc2fb0, $801c42);
part_type_speed(part_type, 0, 0, 0.02, 0);
part_type_direction(part_type, 90, 90, 0, 2);
part_type_blend(part_type, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get rid of any data structures

ds_list_destroy(attack_list);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy the particles

part_system_destroy(part_system);
part_type_destroy(part_type);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Teleport to the middle after defeating the player

scrFinalBossTP(view_xview[0] + 400, 300, sprAlexFinalBossIdleExcited);
image_speed = 0.2;
fallback_sprite = noone;
with(objAlexFBCam) {
    target_obj = other.id;
    zoom_on_boss = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn the astral crown for the defeat cutscene

instance_create(x, y, objAlexFinalBossCutsceneCrown);
audio_play_sound(sndAlexFBAstralCrownAppear, 0, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Freeze time during the defeat cutscene

alarm[2] = 40;  // Spawn the astral crown

friction = 0.05;
gravity = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start recovery sequence

recovering = true;
recovery_t = 0;
sprite_index = sprAlexFinalBossRecover;
image_speed = 0.2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Animations

t++;
draw_t++;

// Face the player
if(instance_exists(objPlayer) &amp;&amp; look_at_player) {
    if(objPlayer.x &gt; x)
        image_xscale = 1;
    else
        image_xscale = -1;
}


// Check if currently standing on ground
if(bbox_bottom &gt;= ground_level - 2) {
    if(on_ground == false &amp;&amp; sprite_index != sprAlexFinalBossIdle)
        audio_play_sound(sndAlexFBLand, 0, false);

    on_ground = true;
} else {
    on_ground = false;
}


// Black bars
if(show_black_bars) {
    bars_y = lerp(bars_y, bars_target_y, 0.1);
} else {
    bars_y = lerp(bars_y, 0, 0.1);
}


// Health bar
if(intro_finished) {

    if(show_bars) {
        // Bar/strip lenghts &amp; color
        health_bar_alpha = min(health_bar_alpha + 0.1, 1);
        
        var _hp_bar_length_target = (hp/max_hp) * health_bar_strip_max_length;
        health_bar_strip_length = lerp(health_bar_strip_length, _hp_bar_length_target, 0.1);
        health_bar_strip_color = merge_colour(health_bar_strip_shielded_color, health_bar_strip_vulnerable_color, health_bar_color_blend_amnt);
        if(!vulnerable) {
            health_bar_trailing_strip_length = lerp(health_bar_trailing_strip_length, health_bar_strip_length, 0.1);
            health_bar_alpha2 = lerp(health_bar_alpha2, abs(dsin(draw_t*2)), 0.1);
            health_bar_color_blend_amnt = max(health_bar_color_blend_amnt - 0.05, 0);
        } else {
            health_bar_alpha2 = lerp(health_bar_alpha2, 0, 0.1);
            health_bar_color_blend_amnt = min(health_bar_color_blend_amnt + 0.05, 1);
        }
        
        // Eye ball icons
        var _shield_orb_amnt = 0;
        with(shield_orb_circle_id) {
            _shield_orb_amnt = available_orbs;
        }
        if(_shield_orb_amnt &gt; 0) {
            health_bar_eye_icons_alpha = lerp(health_bar_eye_icons_alpha, 1, 0.1);
            health_bar_eye_icons_scale = lerp(health_bar_eye_icons_scale, 1, 0.1);
        } else {
            health_bar_eye_icons_alpha = 0;
            health_bar_eye_icons_scale = 2;
        }
    } else {
        health_bar_trailing_strip_length = lerp(health_bar_trailing_strip_length, health_bar_strip_length, 0.1);
        
        if(health_bar_alpha2 &gt; 0 || health_bar_eye_icons_alpha &gt; 0) {
            health_bar_alpha2 = max(health_bar_alpha2 - 0.1, 0);
            health_bar_eye_icons_alpha = max(health_bar_eye_icons_alpha - 0.1, 0);
        } else {
            health_bar_alpha = max(health_bar_alpha - 0.1, 0);
        }
    }
}


// Exp bar
if(intro_finished) {

    if(show_bars) {
        // Bar/strip lenghts &amp; color
        exp_bar_alpha = min(exp_bar_alpha + 0.1, 1);
        
        var _exp_bar_length_target = (exp_amnt/exp_max) * exp_bar_strip_max_length;
        exp_bar_strip_length = lerp(exp_bar_strip_length, _exp_bar_length_target, 0.1);
        exp_bar_strip_color = merge_colour(exp_bar_strip_first_color, exp_bar_strip_secondary_color, exp_bar_color_blend_amnt);
        exp_bar_color_blend_amnt = lerp(exp_bar_color_blend_amnt, 0, 0.05);
        if(exp_amnt &lt; exp_max) {
            exp_bar_flicker_t += 12*(exp_amnt/exp_max);
            exp_bar_alpha2 = dsin(exp_bar_flicker_t);
            exp_bar_max_level_alpha = max(exp_bar_max_level_alpha - 0.05, 0);
        } else {
            exp_bar_max_level_alpha = min(exp_bar_max_level_alpha + 0.05, 1);
        }
    } else {
        if(exp_bar_alpha2 &gt; 0 || exp_bar_max_level_alpha &gt; 0) {
            exp_bar_alpha2 = max(exp_bar_alpha2 - 0.1, 0);
            exp_bar_max_level_alpha = max(exp_bar_max_level_alpha - 0.1, 0);
        } else {
            exp_bar_alpha = max(exp_bar_alpha - 0.1, 0);
        }
    }
}


// Wiggle the sprite if the sprite is floating
if(floating) {
    float_y = dsin(draw_t*float_spd) * float_dist;
} else {
    float_y = lerp(float_y, 0, .1);
}


// Shield
shield_alpha = max(shield_alpha-0.1, 0);
shield_scale = lerp(shield_scale, shield_target_scale, 0.1);


// Boss aura
if(vulnerable) {
    aura_base_alpha = lerp(aura_base_alpha, -aura_add_alpha, 0.05);
    aura_base_scale = lerp(aura_base_scale, 3, 0.05);
} else {
    aura_base_alpha = lerp(aura_base_alpha, 0.5, 0.05);
    aura_base_scale = lerp(aura_base_scale, 1.5, 0.05);
}

aura_alpha = aura_base_alpha + dsin(draw_t*aura_spd) * aura_add_alpha;
aura_scale = (aura_base_scale + dsin(draw_t*aura_spd) * aura_add_scale) * sign(image_xscale);


// Indicators
indicator_ground_stomp_alpha = lerp(indicator_ground_stomp_alpha, indicator_ground_stomp_alpha_target, 0.05);
indicator_dash_alpha = lerp(indicator_dash_alpha, indicator_dash_alpha_target, 0.05);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Introduction

if(!intro_finished &amp;&amp; instance_exists(objPlayer)) {
    if(t == 1) {
        scrFinalBossTP(x, ground_level, sprAlexFinalBossGroundStomp);
        image_speed = 0.31;
        
        if(instance_exists(objPlayer)) {
            if(objPlayer.x &gt; x)
                image_xscale = 1;
            else
                image_xscale = -1;
        }
    }
    if(round(image_index) == image_number-1 &amp;&amp; sprite_index == sprAlexFinalBossGroundStomp) {
        scrFinalBossTP(room_width/2, 260, sprAlexFinalBossIntro);
    }
    if(sprite_index == sprAlexFinalBossIntro) {
        if(t &lt; 175) {
            with(objPlayer)
                frozen = true;
        
            with(objAlexFBCam) {
                zoom_lvl = lerp(zoom_lvl, 0.4, 0.05);
                view_wview[0] = default_view_w * zoom_lvl;
                view_hview[0] = default_view_h * zoom_lvl;
                view_xview[0] = room_width/2 - view_wview[0]/2;
                view_yview[0] = 260 - view_hview[0]/2;
            }
        } else {        
            with(objAlexFBCam) {
                zoom_lvl = lerp(zoom_lvl, 1, 0.1);
                view_wview[0] = default_view_w * zoom_lvl;
                view_hview[0] = default_view_h * zoom_lvl;
                view_xview[0] = room_width/2 - view_wview[0]/2;
                view_yview[0] = 260 - view_hview[0]/2;
            }
        }
    }
    
    if(t &gt; 100) {
        health_bar_alpha = min(health_bar_alpha + 0.05, 1);
    }
    if(t &gt; 120) {
        exp_bar_alpha = min(exp_bar_alpha + 0.05, 1);
        health_bar_strip_length = lerp(health_bar_strip_length, health_bar_strip_max_length, 0.1);
    }
    
    if(t == 175) {
        event_user(2);  // Spawn the shield orbs
        
        with(objPlayer)
            frozen = false;
    }
    
    if(t &gt; 175) {
        health_bar_eye_icons_alpha = lerp(health_bar_eye_icons_alpha, 1, 0.1);
        health_bar_eye_icons_scale = lerp(health_bar_eye_icons_scale, 1, 0.1);
    }
    
    if(image_index &gt;= image_number - 1 &amp;&amp; sprite_index == sprAlexFinalBossIntro) {
        intro_finished = true;
        look_at_player = true;
        t = 0;
        
        sprite_index = sprAlexFinalBossIdle;
    
        with(objAlexFBCam) {
            lock_in_place = false;
        }
        
        with(objBlock) {
            if(y &lt; other.ground_level &amp;&amp; y &gt;= 0 &amp;&amp; x &gt; 0 &amp;&amp; x &lt; room_width)
                instance_destroy();
        }
        
        global.skipFBIntro = true;
        scrSaveGame(false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Attacking &amp; Leveling up

if(intro_finished &amp;&amp; !vulnerable &amp;&amp; instance_exists(objPlayer)) {

    // Choose an attack
    if(current_attack == noone) {
        if(exp_ready_to_level_up) {
            current_attack = atk.level_up;
        } else {
            if(!ds_list_empty(attack_list)) {
                current_attack = attack_list[| 0];
                last_attack = current_attack;
                ds_list_delete(attack_list, 0);
                //current_attack = atk.jump;
            } else {
                // If attack list is empty refill it
                event_user(0);
            }
        }
    }
    
    // Execute the attacks
    switch(current_attack) {
        case atk.stars:
            scrFBAtkStar(exp_level);
            break;
        
        case atk.dash:
            scrFBAtkDash(exp_level);
            break;
            
        case atk.stomp:
            scrFBAtkStomp(exp_level);
            break;
            
        case atk.jump:
            scrFBAtkJump(exp_level);
            break;
            
        case atk.circles:
            scrFBAtkCircles(exp_level);
            break;
            
        case atk.beams:
            scrFBAtkBeams(exp_level);
            break;
            
        case atk.beam_cage:
            scrFBAtkBeamCage(exp_level);
            break;
            
        case atk.level_up:
            scrFBLevelUp();
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Other checks

// Snap to ground level
while(bbox_bottom &gt; ground_level) {
    y--;
    speed = 0;
    gravity = 0;
}

// Attach the shield orb circle to the X &amp; Y coords
if(instance_exists(shield_orb_circle_id)) {
    shield_orb_circle_id.x = x;
    shield_orb_circle_id.y = y;
}

// Experience level
if(intro_finished &amp;&amp; !vulnerable &amp;&amp; !exp_ready_to_level_up)
    exp_amnt = min(exp_amnt + exp_idle_gain, exp_max);

if(exp_amnt &gt;= exp_max &amp;&amp; exp_level &lt; exp_max_level &amp;&amp; !exp_ready_to_level_up) {
    exp_ready_to_level_up = true;
}

// Vulnerability
if(intro_finished &amp;&amp; !instance_exists(shield_orb_circle_id) &amp;&amp; !vulnerable) {
    vulnerable = true;
    fallback_sprite = noone;
    alarm[0] = recovery_time;
    y = ground_level;  // Makes sure the boss is on the ground (in case you break the last orb on the last frame)
    audio_play_sound(sndAlexFBShieldBroken, 0, false);
    var _part = scrAlexMakeParticleExt(x, y, 25, sprAlexFinalBossMagicCircle, 0, 0, 0, 0, 0, 0, c_purple, c_purple, bm_add, false, true, 0, depth-1, false);
        _part.image_xscale = 0.5;
        _part.image_yscale = 0.5;
        _part.add_scale = 0.05;
        _part.image_alpha = 0.5;
    scrFBPExplosionParticles(sprAlexFinalBossMagicCircle, 15, 0.5, 0.03, true, bm_add, 10, 15, 1, -0.075, 8);
    
    if(!on_ground || x &lt; dist_from_room_edges || x &gt; room_width - dist_from_room_edges) {
        var _tp_x = clamp(x, dist_from_room_edges, room_width - dist_from_room_edges);
        scrFinalBossTP(_tp_x, ground_level, sprAlexFinalBossVulnerable);
    } else {
        sprite_index = sprAlexFinalBossVulnerable;
    }
    image_speed = 0.15;
}

// Bullet collisions
if(intro_finished &amp;&amp; !beaten) {
    if(!vulnerable) {
        var _bullet_id = collision_circle(x, y, shield_rad, objBullet, true, true);
        if(_bullet_id) {
            exp_amnt = min(exp_amnt + exp_shield_gain, exp_max);
            shield_scale = shield_start_scale;
            shield_alpha = 1;
            exp_bar_color_blend_amnt = 1;
            audio_play_sound(sndAlexFBShieldHit, 0, false);
        }
        with(_bullet_id) {
            repeat(3) {
                var _angle = random(360);
                _part = scrAlexMakeParticle(x, y, 10, sprAlexFBParticleSpark, 0, _angle, random_range(6, 9), true, false, false);
                _part.image_angle = _angle;
                _part.blend_mode = bm_add;
            }
            instance_destroy();
        }
    } else {    
        var _bullet_id = collision_circle(x, y, 32, objBullet, true, true);
        if(_bullet_id &amp;&amp; iframes == 0) {
            if(hit_count &lt; max_hits) {
                hp--;
                hit_count++;
                iframes = max_iframes;
                audio_play_sound(sndBossHit, 0, false);
                
                repeat(3) {
                    var _angle = random_range(40, 180 - 40);
                    _part = scrAlexMakeParticle(x, y+5, 14, sprAlexGlowOrb, 0, _angle, random_range(6, 11), false, true, false);
                    _part.image_xscale = 0.4;
                    _part.image_yscale = 0.4;
                    _part.image_blend = c_red;
                    _part.gravity = 0.35;
                    _part.add_scale = -0.02;
                    _part.blend_mode = bm_add;
                }
            } else {
                iframes = max_iframes;
                var _pitch = random_range(0.9, 1.1);
                repeat(2) {
                    var _sfx = audio_play_sound(sndAlexFBRicochet, 0, false);
                    audio_sound_pitch(_sfx, _pitch);
                }
                
                with(_bullet_id) {
                    repeat(3) {
                        var _angle = random(360);
                        _part = scrAlexMakeParticle(x, y, 10, sprAlexFBParticleSpark, 0, _angle, random_range(6, 9), true, false, false);
                        _part.image_angle = _angle;
                        _part.start_col = c_aqua;
                        _part.blend_mode = bm_add;
                    }
                }
            }
        }
        
        
        instance_destroy(_bullet_id);
        
        // Check if the hp reached 0
        if(hp == 0) {
            beaten = true;
            event_user(3);
        }
    }
}

// iFrames
iframes = max(iframes - 1, 0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Recovery sequence

if(recovering) {    
    if(sprite_index == sprAlexFinalBossRecover &amp;&amp; round(image_index) == image_number-1) {
        sprite_index = sprAlexFinalBossFloatUp;
        image_speed = 0.2;
        recovery_float_t = 0;
    }
    
    if(sprite_index == sprAlexFinalBossFloatUp) {
        recovery_float_t++;
        var _anim_val = clamp(recovery_float_t, 0, 80);
        
        y = scrAlexEaseInOutSine(_anim_val, ground_level - 24, ground_level - 250, 80);
        
        if(_anim_val == 80) {
            sprite_index = sprAlexFinalBossPowerUp;
            image_index = 0;
            image_speed = 0.3;   
        }
    }
    
    if(sprite_index == sprAlexFinalBossPowerUp) {
        if(round(image_index) == 10 &amp;&amp; !instance_exists(shield_orb_circle_id)) {
            event_user(2);  // Recover shield orbs
        }
        if(ceil(image_index) == image_number-1) {        
            recovering = false;
            vulnerable = false;
            hit_count -= max_hits;  // If the player missed a few shots they accumulate over
            exp_idle_gain += 0.015;
            event_user(1);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change color of the floor &amp; BG based on level

// Make the background black to make the fade
// transition afterwards if about to level up
if(exp_ready_to_level_up) {
    //bg_target_val = 0;
    //bg_val_incr = 0;
} else {
    if(exp_level == 2) {
        blk_texture = sprFinalStarLevelTexture2;
        blk_col_r = 60 / 255;
        blk_col_g = 125 / 255;
        blk_col_b = 100 / 255;
    
        bg_target_hue = 0.68;
        bg_target_sat = 0.5;
        bg_target_val = 0.15;
        bg_hue_incr = -0.027;
        bg_sat_incr = 0.05;
        bg_val_incr = 1.2;
    }
    
    if(exp_level &gt;= 3) {
        blk_texture = sprFinalStarLevelTexture3;
        blk_col_r = 170 / 255;
        blk_col_g = 80 / 255;
        blk_col_b = 60 / 255;
    
        bg_target_hue = 0.9;
        bg_target_sat = 0.5;
        bg_target_val = 0.15;
        bg_hue_incr = 0.03;
        bg_sat_incr = 0.06;
        bg_val_incr = 1.6;
    }
}

with(objAlexObstacleRenderer) {
    block_texture_sprite = other.blk_texture;
    outline_col[0] = other.blk_col_r;
    outline_col[1] = other.blk_col_g;
    outline_col[2] = other.blk_col_b;
}

with(objAlexStarStageBG) {
    base_col_hsv[0] = lerp(base_col_hsv[0], other.bg_target_hue, 0.05); // Hue
    base_col_hsv[1] = lerp(base_col_hsv[1], other.bg_target_sat, 0.05); // Saturation
    base_col_hsv[2] = lerp(base_col_hsv[2], other.bg_target_val, 0.05); // Value / Luminosity
    hue_increment = lerp(hue_increment, other.bg_hue_incr, 0.05); // How much the hue changes each step
    sat_increment = lerp(sat_increment, other.bg_sat_incr, 0.05); // How much the sat changes each step
    val_increment = lerp(val_increment, other.bg_val_incr, 0.05); // How much the value/luminosity changes each step
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn particles

if(!beaten) {
    repeat(5)
        part_particles_create(part_system, random_range(-50, room_width+50), ground_level + 130, part_type, 1)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Teleport to the middle of the screen when the player is dead

if(!instance_exists(objPlayer) &amp;&amp; !player_defeated) {
    alarm[3] = 50;
    sprite_index = sprAlexFinalBossIdle;
    player_defeated = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Kill player upon collision

if(!vulnerable &amp;&amp; !beaten)
    scrKillPlayer();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Defeat cutscene

alarm[0] = -1;
recovering = false;
show_bars = false;
look_at_player = true;
show_black_bars = true;

scrStopMusic();
audio_play_sound(sndAlexFBDefeat, 0, false);

// Spawn the color effect obj
instance_create(0, 0, objAlexFinalBossDefeatCutsceneColorEffect);

// Set the speed and sprite
with(objPlayer) {
    if(x &lt; other.x)
        other.hspeed = 1;
    else
        other.hspeed = -1;
}
vspeed = -1.5;
gravity = 0.015;
sprite_index = sprAlexFinalBossKnockedOut;
image_index = 0;
image_speed = 0.04;

var _part = scrAlexMakeParticle(x, y, 200, sprAlexPlayerBloodSplatter, 0.06, 0, 0, false, false, false);
    _part.depth = -1000;
    _part.image_xscale = 2;
    _part.image_yscale = 2;
    _part.start_col = c_black;
    _part.end_on_last_frame = true;

// Destroy all projectiles
with(objPlayerKiller) {
    if(object_index != other.object_index)
        instance_destroy();
}

// Prepare to freeze time
alarm[1] = 150;

// Disable player actions
with(objPlayer)
    frozen = true;

// Disable pausing &amp; restarting
global.noPause = true;
global.noRestart = true;

// Clear smoke particles
part_particles_clear(part_system);

// Focus on the boss (even if outside of the screen)
with(objAlexFBCam) {
    anchor_strength = 1;
    update_max_coords = false;
    min_x = -1000;
    max_x = room_width + 1000;
    min_y = -1000;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn shield orbs

shield_orb_circle_id = instance_create(x, y, objAlexFinalBossShieldOrbCircle);
shield_orb_circle_id.rad_target = shield_orb_rad;
shield_orb_circle_id.target_spd = shield_orb_spd;
shield_orb_circle_id.shield_orb_amnt = shield_orb_spawn_amnt;

shield_orb_rad += 8;
shield_orb_spd -= 0.15;
shield_orb_spawn_amnt = min(shield_orb_spawn_amnt + 1, 7);

audio_play_sound(sndAlexFBShieldRestored, 0, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Finish the current attack &amp; reset some vars

t = 0;
current_attack = noone;
fallback_sprite = noone;
fallback_image_speed = 0.3;
side_from_player *= -1;
look_at_player = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fill the attack list &amp; shuffle

t = 0;

do {
    attack_list[| 0] = atk.stars;
    attack_list[| 1] = atk.dash;
    attack_list[| 2] = atk.stomp;
    attack_list[| 3] = atk.jump;
    attack_list[| 4] = atk.circles;
    attack_list[| 5] = atk.beams;
    attack_list[| 6] = atk.beam_cage;
    ds_list_shuffle(attack_list);
} until (last_attack != attack_list[| 0]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fall back to the previous sprite
// after finishing the attack animation

if(fallback_sprite != noone &amp;&amp; sprite_index != fallback_sprite) {
    sprite_index = fallback_sprite;
    image_speed = fallback_image_speed;
    image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Freeze on the last frame of the knockout animation
if(sprite_index == sprAlexFinalBossKnockedOut) {
    image_index = image_number-1;
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy the particles

part_system_destroy(part_system);
part_type_destroy(part_type);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy the particles

part_system_destroy(part_system);
part_type_destroy(part_type);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw health bar &amp; exp bar

var _back_bar_color = $452b2b

// Health
var _shield_orb_amnt = 0;
with(shield_orb_circle_id) {
    _shield_orb_amnt = available_orbs;
}
var _strip_x = health_bar_x + 20;
var _strip_y = health_bar_y + 4;
var _strip_x2 = health_bar_x + 20 + health_bar_strip_length;
var _bar_x2 = health_bar_x + 20 + health_bar_strip_max_length;
var _strip_y2 = health_bar_y + 12;

// Health trailing strip/bar
draw_set_alpha(health_bar_alpha);

draw_set_color(_back_bar_color);
draw_rectangle(_strip_x, _strip_y, _bar_x2, _strip_y2, false);

if(health_bar_alpha &gt;= 1) {
    var _trail_strip_x2 = health_bar_x + 20 + health_bar_trailing_strip_length;
    var _trail_strip_y2 = health_bar_y + 12;

    draw_set_color(health_bar_strip_trail_color);
    draw_rectangle(_strip_x, _strip_y, _trail_strip_x2, _trail_strip_y2, false);
}
// Health strip/bar
draw_set_color(health_bar_strip_color);
draw_rectangle(_strip_x, _strip_y, _strip_x2, _strip_y2, false);
draw_set_alpha(health_bar_alpha2);
draw_set_blend_mode(bm_add);
draw_rectangle(_strip_x, _strip_y, _strip_x2, _strip_y2, false);
draw_set_alpha(health_bar_alpha);
draw_set_blend_mode(bm_normal);

// Health frame
draw_sprite_part(sprAlexFBHealthBar, 0, 0, 0, 32, 16, health_bar_x, health_bar_y);
draw_sprite_part_ext(sprAlexFBHealthBar, 0, 32, 0, 16, 16, health_bar_x + 32, health_bar_y, health_bar_length / 16, 1, -1, health_bar_alpha);
draw_sprite_part(sprAlexFBHealthBar, 0, 48, 0, 32, 16, health_bar_x2, health_bar_y);

// Eyeballs
var _eye_y = health_bar_y + 8;
var _start_x = (display_get_gui_width() / 2) - (_shield_orb_amnt*health_bar_eye_icons_pad) / 2 + (health_bar_eye_icons_pad/2)*sign(_shield_orb_amnt);
if(_shield_orb_amnt &gt; 0) {
    for(var i=0; i&lt;_shield_orb_amnt; i++) {
        var _eye_x = _start_x + i*health_bar_eye_icons_pad;
        var _eye_y = health_bar_y + 8;
        var _eye_scale = health_bar_eye_icons_scale;
        var _eye_alpha = health_bar_eye_icons_alpha;
        draw_sprite_ext(sprAlexFBHealthBarEyeIcon, 0, _eye_x, _eye_y, _eye_scale, _eye_scale, 0, -1, _eye_alpha);
    }
}



// Exp
_strip_x = display_get_gui_width()/2 - exp_bar_strip_length;
_strip_y = exp_bar_y + 2;
var _bar_x1 = display_get_gui_width()/2 - exp_bar_strip_max_length;
_strip_x2 = display_get_gui_width()/2 + exp_bar_strip_length;
_bar_x2 = display_get_gui_width()/2 + exp_bar_strip_max_length;
_strip_y2 = exp_bar_y + 7;

// Exp strip/bar
draw_set_alpha(exp_bar_alpha);

draw_set_color(_back_bar_color);
draw_rectangle(_bar_x1, _strip_y, _bar_x2, _strip_y2, false);

if(exp_bar_strip_length &gt; 0) {
    draw_set_color(exp_bar_strip_color);
    draw_rectangle(_strip_x, _strip_y, _strip_x2, _strip_y2, false);
    draw_set_alpha(exp_bar_alpha2);
    draw_set_blend_mode(bm_add);
    draw_rectangle(_strip_x, _strip_y, _strip_x2, _strip_y2, false);
    draw_set_blend_mode(bm_normal);
    
    draw_set_color(exp_bar_strip_max_level_color);
    draw_set_alpha(exp_bar_max_level_alpha);
    draw_rectangle(_strip_x, _strip_y, _strip_x2, _strip_y2, false);
    draw_set_alpha(exp_bar_alpha);
}

// Exp frame
draw_sprite_part(sprAlexFBExpBar, 0, 0, 0, 16, 8, exp_bar_x, exp_bar_y);
draw_sprite_part_ext(sprAlexFBExpBar, 0, 16, 0, 16, 8, exp_bar_x + 16, exp_bar_y, exp_bar_length / 16, 1, -1, exp_bar_alpha);
draw_sprite_part(sprAlexFBExpBar, 0, 16, 0, 96, 20, (display_get_gui_width()/2)-48, exp_bar_y);
draw_sprite_part(sprAlexFBExpBar, 0, 112, 0, 16, 8, exp_bar_x2, exp_bar_y);

// Level string
var _lvl_x = display_get_gui_width()/2;
var _lvl_y = exp_bar_y + 12;
var _lvl_string = "LEVEL " + string(exp_level);
if(exp_level == exp_max_level)
    _lvl_string = "MAX LEVEL!";
draw_set_font(exp_bar_font)
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_color(exp_bar_font_col);
draw_text(_lvl_x, _lvl_y, _lvl_string);

draw_set_alpha(1);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the bars

var _gui_width = display_get_gui_width();
var _gui_height = display_get_gui_height();

if(bars_y &gt; 1) {
    draw_set_colour(c_black);
    draw_rectangle(0, 0, _gui_width, bars_y, false);
    draw_rectangle(0, _gui_height, _gui_width, _gui_height - bars_y, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the level up stuff

if(lvlup_alpha &gt; 0) {
    draw_set_blend_mode(bm_add);
    draw_sprite_ext(sprAlexFBParticleMagicCircle, 0, x, y, 1, 1, draw_t, -1, lvlup_alpha*0.25);
    draw_sprite_ext(sprAlexFBParticleMagicCircle, 0, x, y, 2, 2, -draw_t, -1, lvlup_alpha*0.25);
}

draw_set_blend_mode(bm_normal);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw self and other stuff

// Self and Aura
draw_set_blend_mode(bm_add);
draw_sprite_ext(sprite_index, image_index, x, y + float_y, aura_scale, abs(aura_scale), image_angle, c_fuchsia, aura_alpha);
draw_set_blend_mode(bm_normal);
draw_sprite_ext(sprite_index, image_index, x, y + float_y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);

// Shield
draw_sprite_ext(sprAlexFinalBossMagicCircle, 0, x, y, shield_scale, shield_scale, 0, -1, shield_alpha);
draw_set_blend_mode(bm_add);
if(exp_level != exp_max_level) {
    draw_set_alpha(shield_alpha*0.7);
    draw_line_width_colour(x, y, view_xview[0] + (view_wview[0]/2), view_yview[0] + (view_hview[0]/8.4), 3, c_purple, $7b2fcc);
}

draw_set_blend_mode(bm_normal);
draw_set_alpha(1);

// Damage indicator
var _damage_alpha = iframes / max_iframes;
var _blend_col = c_red;
if(hit_count &gt;= max_hits)
    _blend_col = c_aqua;
draw_sprite_ext(sprite_index, image_index, x, y + float_y, image_xscale, image_yscale, image_angle, _blend_col, _damage_alpha);
draw_set_blend_mode(bm_add);
draw_sprite_ext(sprite_index, image_index, x, y + float_y, image_xscale, image_yscale, image_angle, _blend_col, _damage_alpha);
draw_set_blend_mode(bm_normal);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw attack indicators

// Ground stomp
if(indicator_ground_stomp_alpha &gt; 0.01) {
    draw_set_blend_mode(bm_add);
    draw_sprite_ext(sprAlexFBGroundGlow, 0, room_width/2, 512, 200, 2, 0, -1, indicator_ground_stomp_alpha);
    draw_set_blend_mode(bm_normal);
}


// Pre dash / charge
if(indicator_dash_alpha &gt; 0.01) {
    var _xx, _yy;
    var _len = 150 - (150*indicator_dash_alpha);
    var _scale_mult = 2 - (0.5*indicator_dash_alpha);
    var _dir = (draw_t*3);
    draw_set_blend_mode(bm_add);
    for(var i=0; i&lt;4; i++) {
        _xx = x + lengthdir_x(_len, _dir + (i*90));
        _yy = y + lengthdir_y(_len, _dir + (i*90));
        draw_sprite_ext(sprite_index, image_index, _xx, _yy, image_xscale*_scale_mult, image_yscale*_scale_mult, 0, c_fuchsia, indicator_dash_alpha*0.5);
    }
    
    for(var i=0; i&lt;17; i++) {
        _xx = x + (32 * (i * sign(image_xscale)));
        draw_sprite_ext(sprite_index, image_index, _xx, y, image_xscale, image_yscale, 0, c_fuchsia, indicator_dash_alpha*0.6);
    }
    
    var _charge_alpha = dsin(draw_t*50);
    repeat(2)
        draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, 0, -1, _charge_alpha);
    draw_set_blend_mode(bm_normal);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

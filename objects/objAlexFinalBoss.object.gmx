<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAlexFinalBossIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init vars

// General
t = 0;                          // General use timer, updates in the "Animations" code block

intro_finished = false;         // Toggles to true when the intro is finished

vulnerable = false;             // If possible to damage the boss
shield_orb_amnt = 0;            // How many orbs are currently present
recovery_time = 100;            // How many frames until recover shield

exp_amnt = 0;                   // Current exp amount
exp_target = 100;               // How much exp is needed to level up
exp_idle_gain = 0.1;            // How much exp per frame
exp_shield_gain = 5;            // How much exp per shield hit
exp_lock_gain = true;           // Restricts exp gaining when true

on_ground = true;               // Whether the boss is touching the ground
ground_level = 512;             // The ground level, cannot clip past this point


// Animation related
fallback_sprite = noone;        // When the current sprite animation is finished
                                // fall back to this sprite.

                          
// Draw related
aura_spd = 3;
aura_alpha = 1;
aura_base_alpha = 0.5;
aura_add_alpha = 0.2;
aura_scale = 1.5;
aura_base_scale = aura_scale;
aura_add_scale = .3;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init attacks enums and vars

enum atk {
    flower,
    dash,
    stomp,
    jump,
    back_jump,
    cage,
}

enum ulti_atk {
    orb_walls,
    bubbles,
}

attack_list = ds_list_create();
attack_list[| 0] = atk.flower;
attack_list[| 1] = atk.dash;
attack_list[| 2] = atk.stomp;
attack_list[| 3] = atk.jump;
attack_list[| 4] = atk.back_jump;
ds_list_shuffle(attack_list);

current_attack = noone;
last_attack = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get rid of any data structures

ds_list_destroy(attack_list);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Animations

t++;

// Check if currently standing on ground
if(place_meeting(x, y+1, objBlock)) {
    on_ground = true;
} else {
    on_ground = false;
}

// Boss aura
aura_alpha = aura_base_alpha + dsin(t*aura_spd) * aura_add_alpha;
aura_scale = (aura_base_scale + dsin(t*aura_spd) * aura_add_scale) * sign(image_xscale);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Introduction

if(!intro_finished) {
    if(t == 1) {
        scrFinalBossTP(x, ground_level, sprAlexFinalBossIntro);
        image_speed = 0.25;
    }
    
    if(instance_exists(objPlayer)) {
        if(objPlayer.x &gt; x)
            image_xscale = 1;
        else
            image_xscale = -1;
    }
    
    if(image_index &gt;= image_number - 1) {
        intro_finished = true;
        t = 0;
        
        sprite_index = sprAlexFinalBossIdle;
    
        with(objAlexFBCam) {
            lock_in_place = false;
        }
        
        with(objBlock) {
            if(y &lt; other.ground_level &amp;&amp; y &gt;= 0 &amp;&amp; x &gt; 0 &amp;&amp; x &lt; room_width)
                instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Attacking
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Other checks

// Snap to ground level
while(bbox_bottom &gt; ground_level) {
    y--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw self and other stuff

// Self and Aura
draw_set_blend_mode(bm_add);
draw_sprite_ext(sprite_index, image_index, x, y, aura_scale, abs(aura_scale), image_angle, c_fuchsia, aura_alpha);
draw_set_blend_mode(bm_normal);
draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

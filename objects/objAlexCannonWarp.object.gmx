<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAlexCannonWarp</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-201</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init vars

in_use = false;
t = 0;
cooldown_t = 0;
draw_scale = 1;
draw_bounce_length = 15;
glow_alpha = 0;
line_alpha = 0;
spiral_angle = 0;
spiral_rotate_spd = -5;
spiral_target_spd = -5;
line_angle = 0;
line_target_angle = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Animations

t++;

if(in_use) {
    var _anim_val = min(t, draw_bounce_length);

    glow_alpha = abs(dcos(t*2));
    line_alpha = scrAlexEaseOutSine(_anim_val, 0, 1, draw_bounce_length);
    draw_scale = scrAlexEaseOutSine(_anim_val, 1.5, 1, draw_bounce_length);
} else {
    line_alpha = 0;
    draw_scale = lerp(draw_scale, 1, 0.1);
}

spiral_angle += spiral_rotate_spd;
spiral_rotate_spd = lerp(spiral_rotate_spd, spiral_target_spd, 0.1);
line_angle = lerp(line_angle, line_target_angle, 0.25);

if(round(line_angle) &gt;= 360) {
    line_angle = 0;
    line_target_angle = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Logic

var _action_key = (scrButtonCheckPressed(global.jumpButton) || scrButtonCheckPressed(global.shootButton));
var _hor = (scrButtonCheckPressed(global.rightButton) - scrButtonCheckPressed(global.leftButton));
var _ver = (scrButtonCheckPressed(global.downButton) - scrButtonCheckPressed(global.upButton));

cooldown_t = max(cooldown_t - 1, 0);

if(!instance_exists(objPlayer)) {
    in_use = false;
    
    line_angle = 0;
    line_target_angle = 0;
    spiral_rotate_spd = -5;
    spiral_target_spd = -5;
}

if(in_use) {
    // Lock the player inside
    with(objPlayer) {
        x = other.x;
        y = other.y;
    }

    // Point the line
    if(_hor == 1) {
        if(line_target_angle &gt;= 180)
            line_target_angle = 360;
        else
            line_target_angle = 0;
    }
    if(_hor == -1)
        line_target_angle = 180;
    if(_ver == 1) {
        if(line_target_angle == 0)
            line_angle = 359;
        
        line_target_angle = 270;
    }
    if(_ver == -1)
        line_target_angle = 90;
        
    if(_hor != 0 || _ver != 0) {
        audio_play_sound(sndAlexMenuSwitchOption, 0, false);
    }
        
    // Launch the player
    if(_action_key) {
        in_use = false;
        var _launch_player = instance_create(x, y, objAlexCannonWarpLaunch);
            _launch_player.launch_dir = line_target_angle;
            _launch_player.image_angle = line_target_angle;
            
        line_angle = 0;
        line_target_angle = 0;
        spiral_rotate_spd = -20;
        spiral_target_spd = -5;
        
        cooldown_t = 5;
        
        // Make particles
        event_user(0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Grab the player

if(!in_use &amp;&amp; cooldown_t == 0) {
    in_use = true;
    t = 0;
    spiral_rotate_spd = -20;
    spiral_target_spd = -10;
    
    audio_play_sound(sndAlexCannonWarpIn, 0, false);
    
    // In case it collided with a warp launch
    with(objAlexCannonWarpLaunch) {
        other.line_angle = launch_dir;
        other.line_target_angle = launch_dir;
        instance_destroy();
    }
        
    // In case it collided with a bubble
    with(objAlexBubble) {
        if(active)
            instance_destroy();
    }
        
    with(other) {
        frozen = true;
        visible = false;
    }
    
    // Make particles
    event_user(0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Make particles

for(i=0; i&lt;8; i++) {
    var _dir = (360/8) * i;
    scrAlexMakeParticleExt(x, y, 12, sprAlexCannonWarpPart, 0, 0, 0, _dir, 6, -.2, c_white, $33387d, bm_normal, true, false, 0, depth+1, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw warp and guide line

draw_sprite_ext(sprite_index, 0, x, y, draw_scale, draw_scale, 0, -1, 1);;

if(in_use) {
    draw_sprite_ext(sprite_index, 1, x, y, draw_scale, draw_scale, 0, -1, glow_alpha);

    var _line_alpha = (0.4 + (glow_alpha * 0.2)) * line_alpha;
    draw_set_blend_mode(bm_add);
    draw_sprite_ext(sprAlexCannonWarpLine, 0, x, y, 1, 1, line_angle, -1, _line_alpha);
    draw_set_blend_mode(bm_normal);
}

draw_sprite_ext(sprAlexCannonWarpSpiral, 0, x, y, draw_scale, draw_scale, spiral_angle, -1, 1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAlexFinalBossIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init vars

// Add dialog into the list &amp; change the target room
dialog_list = ds_list_create();
room_to = room;

npc_name = "???";
idle_sprite = sprAlexFinalBossIdle;
talking_sprite = sprAlexFinalBossTalking;
letter_sfx = sndAlexDialogSoundBartender;
zoom_dur = 100;

t = 0;
active = false;
is_talking = false;
snap_finger = false;
show_magic_circles = false;
dialog_box = noone;
floating = !place_meeting(x, y+1, objBlock);
float_y = 0;
float_amnt = 8;
show_black_bars = false;
bars_y = 0;
bars_target_y = 96;
magic_circle_scale = 0;
magic_circle_target_scale = 1;
magic_circle_angle = 0;
magic_circle_angle_incr = 2;

sprite_index = sprAlexNoMask;
image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// destroy the dialog list

ds_list_destroy(dialog_list);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn dialog box

is_talking = true;
show_black_bars = false;

dialog_box = instance_create(x, y, objAlexDialogBox);
dialog_box.npc_name = npc_name;
dialog_box.letter_sfx = letter_sfx;
dialog_box.npc_name_color = $7752ff;
ds_list_copy(dialog_box.dialog_list, dialog_list);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Logic and animations

// Camera zoom
if(active) {
    t++;
    
    if(t &lt;= zoom_dur) {
        var _init_x = objAlexStarStageCam.x;
        var _dest_x = x - view_wview[0]/2;
        var _init_y = objAlexStarStageCam.y;
        var _dest_y = y - view_hview[0]/2;
        view_xview[0] = scrAlexEaseInSine(t, _init_x, _dest_x, zoom_dur);
        view_yview[0] = scrAlexEaseInSine(t, _init_y, _dest_y, zoom_dur);
        view_wview[0] = scrAlexEaseInSine(t, 800, 400, zoom_dur);
        view_hview[0] = scrAlexEaseInSine(t, 608, 304, zoom_dur);
    }
    
    if(t == zoom_dur) {
        sprite_index = sprAlexFinalBossSmokeAppear;
        image_speed = 0.3;
        
        audio_play_sound(sndAlexFinalStageCutsceneAppear, 0, false);
        instance_create(x, y, objAlexScreenPulseEffect);
    }
    
    if(floating) {
        float_y = dsin(t)*float_amnt;
    }
    
    if(instance_exists(objPlayer)) {
        if(objPlayer.x &gt; x)
            image_xscale = 1;
        else
            image_xscale = -1;
    }
    
    if(snap_finger) {
        view_xview[0] = x - view_wview[0]/2;
        view_yview[0] = y - view_hview[0]/2;
        view_wview[0] = lerp(view_wview[0], 800, 0.1);
        view_hview[0] = lerp(view_hview[0], 608, 0.1);
        
        if(sprite_index == sprAlexFinalBossFingerSnap &amp;&amp; round(image_index) == 15 &amp;&amp; !audio_is_playing(sndAlexFinalStageCutsceneFingerSnap)) {
            audio_play_sound(sndAlexFinalStageCutsceneFingerSnap, 0, false);
        }
    }
}

// Dialog and finger snapping
if(!snap_finger &amp;&amp; is_talking) {
    if(!instance_exists(objAlexDialogBox)) {
        dialog_box = noone;
        snap_finger = true;
        show_black_bars = true;
        show_magic_circles = true;
        
        sprite_index = sprAlexFinalBossFingerSnap;
        image_index = 0;
    } else {
       
        if(dialog_box.talking) {
            sprite_index = talking_sprite;
        } else {
            sprite_index = idle_sprite;
        }
    }
}

// Black bars
if(show_black_bars) {
    bars_y = lerp(bars_y, bars_target_y, 0.1);
} else {
    bars_y = lerp(bars_y, 0, 0.1);
}

// Magic circles
if(show_magic_circles) {
    magic_circle_scale = lerp(magic_circle_scale, magic_circle_target_scale, 0.05);
    magic_circle_angle += magic_circle_angle_incr;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Activate cutscene

global.noRestart = true;
global.noPause = true;

active = true;
show_black_bars = true;
with(objPlayer) frozen = true;
with(objAlexStarStageCam) active = false;

scrPlayMusic(musFinalStageCutscene, true);
audio_sound_gain(global.currentMusic, 1, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Switch specific sprites

if(sprite_index == sprAlexFinalBossSmokeAppear) {
    sprite_index = idle_sprite;
    alarm[0] = 20;
}

if(sprite_index == sprAlexFinalBossFingerSnap) {
    sprite_index = sprAlexFinalBossFingerSnapped;
    
    // Spawn transition obj
    with(instance_create(0, 0, objAlexFinalStageCutsceneTransition))
        room_to = other.room_to;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the black bars

var _gui_width = display_get_gui_width();
var _gui_height = display_get_gui_height();

if(bars_y &gt; 1) {
    draw_set_colour(c_black);
    draw_rectangle(0, 0, _gui_width, bars_y, false);
    draw_rectangle(0, _gui_height, _gui_width, _gui_height - bars_y, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw self and magic circles

draw_set_blend_mode(bm_add);
draw_sprite_ext(sprAlexFBParticleMagicCircle, 0, x, y, magic_circle_scale, magic_circle_scale, magic_circle_angle, -1, 0.7);
draw_sprite_ext(sprAlexFBParticleMagicCircle, 0, x, y, magic_circle_scale*2, magic_circle_scale*2, -magic_circle_angle, -1, 0.7);
draw_set_blend_mode(bm_normal);

draw_sprite_ext(sprite_index, image_index, x, y+float_y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprCamera</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init vars and snap to player

snapSpd = 0.166; //determines how fast the camera snaps to the player (higher numbers follow the player slower), can be changed in creation code
zoom_spd = 0.1;  // Determines how fast the camera zooms in and out
zoom_lvl = 1;  // How zoomed in we currently are (1 being the default view dimensions)
zoom_min_lvl = 0.5;
zoom_max_lvl = 1;
default_view_w = view_wport[0];
default_view_h = view_hport[0];
target_obj = objPlayer;
anchor_obj = objAlexFinalBoss;  // The 2nd object to average the cam position (In this case it's the final boss)
lock_in_place = true;
target_x = 0;
target_y = 0;
min_x = 0;
min_y = 0;
max_x = room_width - view_wview[0];
max_y = room_height - view_hview[0];
dist_to_anchor = 0;
default_dist_to_anchor = 600;

alarm[0] = 1; // Snap to the target object
opt_previous_x = view_xview[0];
opt_previous_y = view_yview[0];
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Center the cam at the beginning

view_xview[0] = 400;
view_yview[0] = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Snap to the target object

if (instance_exists(target_obj) &amp;&amp; !lock_in_place)
{
    target_x = target_obj.x - view_wview[0]/2;
    target_y = target_obj.y - view_hview[0]/2;
    event_user(0);
    view_xview[0] = target_x;
    view_yview[0] = target_y;
}

opt_previous_x = view_xview[0];
opt_previous_y = view_yview[0];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Manipulate the cam coords

if (instance_exists(target_obj) &amp;&amp; !lock_in_place)
{
    if(instance_exists(anchor_obj)) {
        var _average_x = mean(target_obj.x, anchor_obj.x);
        var _average_y = mean(target_obj.y, anchor_obj.y);
        
        // Get distance from target to anchor
        with(target_obj) {
            other.dist_to_anchor = distance_to_object(other.anchor_obj);
        }       
        
        // Do the zooming shenanigans
        zoom_lvl = clamp(mean(dist_to_anchor, default_dist_to_anchor) / default_dist_to_anchor, zoom_min_lvl, zoom_max_lvl);
        view_wview[0] = lerp(view_wview[0], default_view_w * zoom_lvl, zoom_spd);
        view_hview[0] = lerp(view_hview[0], default_view_h * zoom_lvl, zoom_spd);
        
        // Update the max X &amp; Y coords
        max_x = room_width - view_wview[0];
        max_y = room_height - view_hview[0];
        
        // Set a new target position for the cam
        target_x = _average_x - view_wview[0]/2;
        target_y = _average_y - view_hview[0]/2;
    } else {
        // Set a new target position for the cam
        target_x = target_obj.x - view_wview[0]/2;
        target_y = target_obj.y - view_hview[0]/2;
    }
    
    // Clamp target coords
    event_user(0);
    
    // Update view coords
    view_xview[0] = lerp(view_xview[0], target_x, snapSpd);
    view_yview[0] = lerp(view_yview[0], target_y, snapSpd);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clamp cam coords

target_x = clamp(target_x, min_x, max_x);
target_y = clamp(target_y, min_y, max_y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

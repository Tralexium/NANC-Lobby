<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init vars

floor_hor_dist = 400;
floor_z_dist = 3;

horizon_x = 0;
horizon_y = room_height - floor_z_dist * 32;
horizontal_mult = 0.46;
rise_mult = 0.66;
sun_glow_alpha = 1;

timer = 0;

surf = noone;
floor_move_amnt = view_xview[0];

alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy the custom vertex format and buffer

vertex_format_delete(my_format);
vertex_delete_buffer(v_buff);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Disable shadow for the player

with(objAlexLobbyPlayer)
    draw_shadow = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Make custom Vertex primitives and draw

var _x1, _y1, _z1, _x2, _y2, _z2, _x3, _y3, _z3, _x4, _y4, _z4;
// Bottom left corner
_x1 = view_xview[0] - floor_hor_dist;
_y1 = room_height;
_z1 = 1;
// Bottom right corner
_x2 = view_xview[0] + view_wview[0] + floor_hor_dist;
_y2 = room_height;
_z2 = 1;
// Top left corner
_x3 = view_xview[0] - floor_hor_dist;
_y3 = room_height;
_z3 = floor_z_dist;
// Top right corner
_x4 = view_xview[0] + view_wview[0] + floor_hor_dist;
_y4 = room_height;
_z4 = floor_z_dist;

if(timer == 0) {
    vertex_format_begin();
    vertex_format_add_position_3d();
    vertex_format_add_colour();
    vertex_format_add_textcoord();
    my_format = vertex_format_end();
    v_buff = vertex_create_buffer();
}

vertex_begin(v_buff, my_format);
// Bottom left
vertex_position_3d(v_buff, _x1, _y1, _z1);
vertex_colour(v_buff, c_white, 1);
vertex_texcoord(v_buff, 0, 1);
// Bottom right
vertex_position_3d(v_buff, _x2, _y2, _z2);
vertex_colour(v_buff, c_white, 1);
vertex_texcoord(v_buff, 1, 1);
// Top left
vertex_position_3d(v_buff, _x3, _y3, _z3);
vertex_colour(v_buff, c_white, 1);
vertex_texcoord(v_buff, 0, 0);
// Top right
vertex_position_3d(v_buff, _x4, _y4, _z4);
vertex_colour(v_buff, c_white, 1);
vertex_texcoord(v_buff, 1, 0);
// End
vertex_end(v_buff);


timer++;

// Draw the sun glow and suns
horizon_x = view_xview[0] * horizontal_mult;
horizon_y = (room_height - floor_z_dist * 32) - ((room_height - view_hview[0]) - view_yview[0]) * rise_mult;
sun_glow_alpha = .8 - abs(dsin(timer*1.2)*0.2);
draw_sprite_ext(sprAlex3DFloorSunGlow, 0, 0, horizon_y, room_width, 1, 0, -1, sun_glow_alpha);
for(var i = 0; i &lt; ceil(room_width/256) + 2; i++) {
    _hor_x = (256 * (i - 1)) + horizon_x;
    draw_sprite_ext(sprAlex3DFloorSuns, 0, _hor_x, horizon_y, 1, 1, 0, -1, 1);
}


// Draw floor
floor_move_amnt = view_xview[0] / floor_z_dist;
var _spr_h = sprite_get_height(sprAlex3DFloor);
var _spr_x = floor_move_amnt mod _spr_h;
if(!surface_exists(surf)) {
    surf = surface_create(_spr_h, _spr_h);    
}

surface_set_target(surf);
    draw_sprite_part(sprAlex3DFloor, 0, _spr_x, 0, _spr_h, _spr_h, 0, 0);
surface_reset_target();

var _tex = surface_get_texture(surf);
shader_set(s3DFloor);
    vertex_submit(v_buff, pr_trianglestrip, _tex);
shader_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

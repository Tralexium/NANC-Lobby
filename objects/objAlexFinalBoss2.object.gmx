<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAlexFB2Body</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objAlexPseudo3D</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init general vars &amp; modify parent vars

x = room_width/2;
y = room_height/2;
image_xscale = 4;
image_yscale = 4;
image_speed = 0.3;  // Body image speed
image_alpha = 0;
alpha_to_z = -1;  // Disable alpha fading
z = 2;

t = 0;

max_hp = 200;
hp = max_hp;

intro_cutscene_finished = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init star related vars

enum boss_star {
    blue,
    green,
    yellow,
    red,
    purple,
    white
}

star_list = ds_list_create();
ds_list_add(star_list, 
            boss_star.blue,
            boss_star.green,
            boss_star.yellow,
            boss_star.red,
            boss_star.purple,
            boss_star.white);           
ds_list_shuffle(star_list);


current_star = star_list[|0];
star_shield_max_hp = 50;
star_shield_hp = 0;
star_shield_time_until_regen = 100;
star_shield_t = 0;
star_shield_regen_rate = 0;
star_shield_regen_incr = 0.05;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw related vars

eyes_sprite = -1;
eyes_img_index = 0;
eyes_img_spd = 0;

mouth_sprite = -1;
mouth_img_index = 0;
mouth_img_spd = 0;

crown_y_offset = -64;
crown_star_col = c_white;
crown_star_rainbow_col = make_colour_hsv(0, 100, 200);  // When no shield is present or choosing an attack
crown_star_rainbow_col_spd = 1.5;  // Speeds up the rainbow color when choosing the next star
crown_star_attack_col = c_white;  // Matches the color of the current star
crown_star_color_merge_val = 0;  // 0: rainbow col, 1: attack col
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Intro Cutscene [MAKE SURE THIS CODE IS ON TOP]

if(!intro_cutscene_finished) {
    t++;
    
    if(eyes_sprite != -1 &amp;&amp; mouth_sprite != -1) {
        eyes_img_index += eyes_img_spd;
        mouth_img_index += mouth_img_spd;
    
        if(eyes_img_index &gt;= sprite_get_number(eyes_sprite) &amp;&amp; eyes_sprite == sprAlexFB2EyesIntro) {
            eyes_sprite = sprAlexFB2EyesIdle;
            eyes_img_index = 0;
        }
        if(mouth_img_index &gt;= sprite_get_number(mouth_sprite) &amp;&amp; mouth_sprite == sprAlexFB2MouthIntro) {
            mouth_sprite = sprAlexFB2MouthIdle;
            mouth_img_index = 0;
        }
    }
    
    if(t == 50) {
        eyes_sprite = sprAlexFB2EyesIntro;
        eyes_img_spd = image_speed;
        mouth_sprite = sprAlexFB2MouthIntro;
        mouth_img_spd = image_speed;
    }
    
    if(t &gt; 50 &lt;= 150) {
        var _ease_val = clamp(t-50, 0, 100);
        with(objAlexFB2TunnelBG) {
            shader_shadow_line_thicness = scrAlexEaseInSine(_ease_val, 0.8, 0.05, 100);
        }
    }
    
    if(t &gt; 120 &amp;&amp; t &lt;= 150) {
        var _ease_val = clamp(t-120, 0, 30);
        z = scrAlexEaseInQuart(_ease_val, 2, scale_to_z/5, 30);
        image_alpha = scrAlexEaseInQuart(_ease_val, 0, 1, 30);
        
        if(t == 150) {        
            instance_create(-500, -500, objAlexScreenPulseEffect)
            intro_cutscene_finished = true;  // Finish
        }
    }
    
    exit; // Skip the rest of the step event
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Logic &amp; Attacks

t++;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Visual stuff

// Eyes and mouth image indexes
eyes_img_index += eyes_img_spd;
mouth_img_index += mouth_img_spd;

// Star on crown
crown_star_rainbow_col = make_colour_hsv(t*crown_star_rainbow_col_spd, 100, 250);
switch(current_star) {
    case boss_star.blue:
        crown_star_attack_col = make_colour_rgb(106, 180, 230);
        break;
    
    case boss_star.green:
        crown_star_attack_col = make_colour_rgb(136, 213, 112);
        break;
        
    case boss_star.yellow:
        crown_star_attack_col = make_colour_rgb(230, 185, 75);
        break;
        
    case boss_star.red:
        crown_star_attack_col = make_colour_rgb(242, 108, 108);
        break;
        
    case boss_star.purple:
        crown_star_attack_col = make_colour_rgb(150, 60, 180);
        break;
        
    case boss_star.white:
        crown_star_attack_col = make_colour_rgb(192, 236, 230);
        break;
}
if(star_shield_hp &gt; 0) {
    crown_star_color_merge_val = min(crown_star_color_merge_val+.1, 1);
} else {
    crown_star_color_merge_val = max(crown_star_color_merge_val-.1, 0);
}
crown_star_col = merge_colour(crown_star_rainbow_col, crown_star_attack_col, crown_star_color_merge_val);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop boss music

scrStopMusic();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw body and facials

// Body
draw_sprite_ext(sprite_index, image_index, draw_x, draw_y, draw_xscale, draw_yscale, image_angle, image_blend, image_alpha);

// Crown
draw_sprite_ext(sprAlexAstralCrown, 0, draw_x, draw_y + (crown_y_offset*draw_yscale), draw_xscale, draw_yscale, image_angle, image_blend, image_alpha);
draw_sprite_ext(sprAlexAstralCrown, 1, draw_x, draw_y + (crown_y_offset*draw_yscale), draw_xscale, draw_yscale, image_angle, crown_star_col, image_alpha);

// Eyes
if(eyes_sprite != -1)
    draw_sprite_ext(eyes_sprite, eyes_img_index, draw_x, draw_y, draw_xscale, draw_yscale, image_angle, image_blend, 1);

// Mouth
if(mouth_sprite != -1)
    draw_sprite_ext(mouth_sprite, mouth_img_index, draw_x, draw_y, draw_xscale, draw_yscale, image_angle, image_blend, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAlexFB2Body</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objAlexPseudo3D</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init general vars &amp; modify parent vars

x = room_width/2;
y = room_height/2;
image_xscale = 4;
image_yscale = 4;
image_speed = 0.3;  // Body image speed
image_alpha = 0;
alpha_to_z = -1;  // Disable alpha fading
z = 2;

t = 0;

max_hp = 200;
hp = max_hp;

bullet_z_leeway = 5;

intro_cutscene_finished = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init attack related vars

enum boss_star {
    blue,
    green,
    purple,
    yellow,
    red,
    white,
}

path_list = ds_list_create();
ds_list_add(path_list,
            pathFB1,
            pathFB2,
            pathFB3,
            pathFB4,
            pathFB5,
            pathFB6);
ds_list_shuffle(path_list);


star_list = ds_list_create();
ds_list_add(star_list, 
            boss_star.blue,
            boss_star.green,
            boss_star.purple,
            boss_star.yellow,
            boss_star.red,
            boss_star.white);           
ds_list_shuffle(star_list);

current_star = noone;
current_path = noone;
is_attacking = false;
min_spd = 6;
max_spd = 10;
spd_fluctuation = 1;
move_speed = min_spd;
shield_max_hp = 60;
shield_hp = 0;
shield_time_until_regen = 100;
shield_t = 0;
shield_regen_rate = 0;
shield_regen_incr = 0.05;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw related vars

eyes_sprite = -1;
eyes_img_index = 0;
eyes_img_spd = 0;

mouth_sprite = -1;
mouth_img_index = 0;
mouth_img_spd = 0;

crown_y_offset = -64;
crown_star_col = c_white;
crown_star_rainbow_col = make_colour_hsv(0, 100, 200);  // When no shield is present or choosing an attack
crown_star_rainbow_hue = 0;
crown_star_rainbow_hue_spd = 2;  // Speeds up the rainbow color when choosing the next star
crown_star_attack_col = c_white;  // Matches the color of the current star
crown_star_color_merge_val = 0;  // 0: rainbow col, 1: attack col

shield_alpha = 0;
shield_scale = 0;
shield_impact_alpha = 0;  // When a bullet hits, the shield and health bar flash for a moment

shield_health_ring_alpha = 0;
shield_health_ring_circum = 0;  // The circumference of the health ring
shield_health_ring_target = 0;  // The target circumference of the health ring
shield_health_ring_regen_circum = 0;  // Goes from 0 up to current health ring circumference
shield_health_ring_regen_alpha = 0;

star_ring_anim = false;  // Start the star ring animation
star_ring_t = 0;
star_ring_alpha = 0;
star_ring_scale = 0;
star_ring_y = y;
star_ring_y_offset = crown_y_offset;
star_ring_rad = 0;
star_ring_max_rad = 112;
star_ring_appear_dur = 60;  // How long it takes for the ring to fade in, scale up, expand and snap to the center of the body
star_ring_angle = 0;
star_ring_spin_amnt = 360*2.5;  // How many degrees should the star ring spin whilst choosing the next color
star_ring_spin_dur = 100;  // How long to spin it for
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy any data structures

ds_list_destroy(star_list);
ds_list_destroy(path_list);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Intro Cutscene [MAKE SURE THIS CODE IS ON TOP]

if(!intro_cutscene_finished) {
    t++;
    
    if(eyes_sprite != -1 &amp;&amp; mouth_sprite != -1) {
        eyes_img_index += eyes_img_spd;
        mouth_img_index += mouth_img_spd;
    
        if(eyes_img_index &gt;= sprite_get_number(eyes_sprite) &amp;&amp; eyes_sprite == sprAlexFB2EyesIntro) {
            eyes_sprite = sprAlexFB2EyesIdle;
            eyes_img_index = 0;
        }
        if(mouth_img_index &gt;= sprite_get_number(mouth_sprite) &amp;&amp; mouth_sprite == sprAlexFB2MouthIntro) {
            mouth_sprite = sprAlexFB2MouthIdle;
            mouth_img_index = 0;
        }
    }
    
    if(t == 50) {
        eyes_sprite = sprAlexFB2EyesIntro;
        eyes_img_spd = image_speed;
        mouth_sprite = sprAlexFB2MouthIntro;
        mouth_img_spd = image_speed;
    }
    
    if(t &gt; 50 &lt;= 150) {
        var _ease_val = clamp(t-50, 0, 100);
        with(objAlexFB2TunnelBG) {
            shader_shadow_line_thicness = scrAlexEaseInSine(_ease_val, 0.8, 0.05, 100);
        }
    }
    
    if(t &gt; 120 &amp;&amp; t &lt;= 150) {
        var _ease_val = clamp(t-120, 0, 30);
        z = scrAlexEaseInQuart(_ease_val, 2, scale_to_z/5, 30);
        image_alpha = scrAlexEaseInQuart(_ease_val, 0, 1, 30);
        
        if(t == 150) {
            t = 0;
            star_ring_anim = true;  // Start star ring animation
        
            instance_create(-500, -500, objAlexScreenPulseEffect)
            intro_cutscene_finished = true;  // Finish
        }
    }
    
    exit; // Skip the rest of the step event
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Logic &amp; Attacks

// Choose next star attack
if(current_star == noone) {
    if(!ds_list_empty(star_list)) {
        // Assign the next available star &amp; path
        ds_list_delete(star_list, 0);
        current_star = star_list[|0];
        ds_list_delete(path_list, 0);
        current_path = path_list[|0];
        
        // Refill star shield hp
        shield_hp = shield_max_hp;
    } else {
        // No stars left, initiate phase 2
        current_star = -1;
    }
}

// Execute attacks
if(current_star != noone &amp;&amp; !star_ring_anim) {
    
    is_attacking = true;
    
    if(current_path != noone) {
        if(t == 0) {
            path_start(current_path, min_spd, path_action_restart, false);
        }
        var _mean_of_min_max_spd = mean(min_spd, max_spd);
        path_speed = (min_spd +_mean_of_min_max_spd) + (dsin(t*spd_fluctuation) * _mean_of_min_max_spd);
    }

    t++;  // Increment timer once the boss starts attacking
    
    // TODO: Health regen
    
    switch(current_star) {
        // Star shield attacks
        case boss_star.blue:
            // Todo
            break;
        
        case boss_star.green:
            // Todo
            break;
            
        case boss_star.purple:
            // Todo
            break;
            
        case boss_star.yellow:
            // Todo
            break;
            
        case boss_star.red:
            // Todo
            break;
            
        case boss_star.white:
            // Todo
            break;
        
              
        // Phase 2
        default:
            // Todo
            break;
    }
} else {

    // Bring the boss back to the room center
    x = lerp(x, room_width/2, 0.1);
    y = lerp(y, room_height/2, 0.1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Visual stuff


// Eyes and mouth image indexes
eyes_img_index += eyes_img_spd;
mouth_img_index += mouth_img_spd;


// Star on crown
crown_star_rainbow_hue += crown_star_rainbow_hue_spd;
crown_star_rainbow_col = make_colour_hsv(crown_star_rainbow_hue, 100, 250);
switch(current_star) {
    case boss_star.blue:
        crown_star_attack_col = make_colour_rgb(106, 180, 230);
        break;
    
    case boss_star.green:
        crown_star_attack_col = make_colour_rgb(136, 213, 112);
        break;
        
    case boss_star.purple:
        crown_star_attack_col = make_colour_rgb(150, 60, 180);
        break;
        
    case boss_star.yellow:
        crown_star_attack_col = make_colour_rgb(230, 185, 75);
        break;
        
    case boss_star.red:
        crown_star_attack_col = make_colour_rgb(242, 108, 108);
        break;
        
    case boss_star.white:
        crown_star_attack_col = make_colour_rgb(192, 236, 230);
        break;
}
if(shield_hp &gt; 0 &amp;&amp; is_attacking) {
    crown_star_color_merge_val = min(crown_star_color_merge_val+.1, 1);
} else {
    crown_star_color_merge_val = max(crown_star_color_merge_val-.1, 0);
}
crown_star_col = merge_colour(crown_star_rainbow_col, crown_star_attack_col, crown_star_color_merge_val);


// Shield &amp; health bar
shield_impact_alpha = lerp(shield_impact_alpha, 0, 0.1);
if(shield_hp &gt; 0 &amp;&amp; is_attacking) {
    shield_alpha = min(shield_alpha + 0.1, 1);
    shield_scale = lerp(shield_scale, 1, 0.1);
    shield_health_ring_alpha = shield_alpha;
} else {
    shield_alpha = 0;
    shield_scale = 0;
    shield_health_ring_alpha = 0;
} 
if(shield_health_ring_alpha &gt; 0) {
    shield_health_ring_target = shield_hp / shield_max_hp;
    shield_health_ring_circum = lerp(shield_health_ring_circum, shield_health_ring_target, 0.2); 

    var _regen_anim_len = 100;
    var _regen_anim_len_half = _regen_anim_len/2;
    var _regen_t = shield_t mod _regen_anim_len;
    if(t &lt;= _regen_anim_len/2) {
        shield_health_ring_regen_alpha = shield_health_ring_alpha;
        shield_health_ring_regen_circum = scrAlexEaseInSine(_regen_t, 0, shield_health_ring_circum, _regen_anim_len_half);
    } else {
        shield_health_ring_regen_alpha = scrAlexEaseInSine(_regen_t - _regen_anim_len_half, 1, 0, _regen_anim_len_half) * shield_health_ring_alpha;
        shield_health_ring_regen_circum = shield_health_ring_circum;
    }
}


// Star ring
if(star_ring_anim) {
    
    star_ring_t++;
    
    var _appear_val = min(star_ring_t, star_ring_appear_dur);
    var _spin_val = min(star_ring_t, star_ring_spin_dur);
    
    star_ring_alpha = scrAlexEaseInOutSine(_appear_val, 0, 1, star_ring_appear_dur);
    star_ring_scale = scrAlexEaseInOutSine(_appear_val, 0, 2, star_ring_appear_dur);
    star_ring_y = scrAlexEaseInOutSine(_appear_val, draw_y + star_ring_y_offset, draw_y, star_ring_appear_dur);
    star_ring_rad = scrAlexEaseInOutSine(_appear_val, 0, star_ring_max_rad, star_ring_appear_dur);
    
    crown_star_rainbow_hue_spd = scrAlexEaseInOutSine(_appear_val, 2, 40, star_ring_spin_dur);
    star_ring_angle = scrAlexEaseInQuart(_spin_val, 0, star_ring_spin_amnt, star_ring_spin_dur);
    
    if(star_ring_t == star_ring_spin_dur) {
        star_ring_anim = false;
        crown_star_rainbow_hue_spd = 2;
        star_ring_t = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objAlexFlyingPlayerBullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collisions with bullet
    
if(is_attacking) {
    if(other.z &lt; z || other.z &gt; z + bullet_z_leeway) {
        exit;
    } else {
        other.z = z;  // So that the impact FX shows above
        with(other) {
            event_user(10);  // Recalculate all the bullet draw values
            instance_destroy();
        }
    }
    
    shield_impact_alpha = 1;

    // Shield/Star phases
    if(shield_hp &gt; 0) {
        shield_hp = max(shield_hp - other.damage, 0);
        
        if(shield_hp == 0)
            event_user(0);  // End star phase
    }
    
    // Final phase
    if(hp &gt; 0) {
        hp = max(hp - other.damage, 0);
        
        if(hp == 0) {}
            // TODO: End the fight
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// End current star/attack

path_end();

t = 0;
current_path = noone;
current_star = noone;  // This forces the boss to
                       // choose the next available star.

star_ring_anim = true;                  
is_attacking = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stop boss music &amp; destroy self

scrStopMusic();
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw body and facials

// Body
draw_sprite_ext(sprite_index, image_index, draw_x, draw_y, draw_xscale, draw_yscale, image_angle, image_blend, image_alpha);

// Crown
draw_sprite_ext(sprAlexAstralCrown, 0, draw_x, draw_y + (crown_y_offset*draw_yscale), draw_xscale, draw_yscale, image_angle, image_blend, image_alpha);
draw_sprite_ext(sprAlexAstralCrown, 1, draw_x, draw_y + (crown_y_offset*draw_yscale), draw_xscale, draw_yscale, image_angle, crown_star_col, image_alpha);

// Eyes
if(eyes_sprite != -1)
    draw_sprite_ext(eyes_sprite, eyes_img_index, draw_x, draw_y, draw_xscale, draw_yscale, image_angle, image_blend, 1);

// Mouth
if(mouth_sprite != -1)
    draw_sprite_ext(mouth_sprite, mouth_img_index, draw_x, draw_y, draw_xscale, draw_yscale, image_angle, image_blend, 1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the star ring

if(star_ring_anim) {
    var _star_list_size = ds_list_size(star_list);
    var _angle, _xx, _yy, _alpha, _scale, _img_index;
    
    _yy = star_ring_y;
    
    for(var i=0; i&lt;_star_list_size; i++) {
        _angle = star_ring_angle + (360/_star_list_size)*i;
        var _angle_to_dsin = dsin(_angle);
        var _angle_to_dcos = dcos(_angle);
        
        _xx = draw_x + _angle_to_dsin * star_ring_rad;
        _alpha = _angle_to_dcos * star_ring_alpha;
        _scale = _angle_to_dcos * star_ring_scale;
        
        switch(star_list[| i]) {
            case boss_star.blue:
                _img_index = 0;
                break;
            
            case boss_star.green:
                _img_index = 1;
                break;
                
            case boss_star.purple:
                _img_index = 2;
                break;
                
            case boss_star.yellow:
                _img_index = 3;
                break;
                
            case boss_star.red:
                _img_index = 4;
                break;
                
            case boss_star.white:
                _img_index = 5;
                break;
        }
        
        draw_sprite_ext(sprAlexCrystalStars, _img_index, _xx, _yy, _scale, _scale, 0, -1, _alpha);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the shield

// Draw_shield
if(shield_alpha &gt; 0) {
    draw_sprite_ext(sprAlexFB2Shield, 0, draw_x, draw_y, 1, 1, 0, crown_star_attack_col, shield_alpha);
    draw_sprite_ext(sprAlexCrystalStars, current_star, draw_x, draw_y, 2, 2, 0, -1, shield_alpha);
    draw_set_blend_mode(bm_add);
    draw_sprite_ext(sprAlexFB2Shield, 0, draw_x, draw_y, 1, 1, 0, crown_star_attack_col, shield_impact_alpha);
    draw_sprite_ext(sprAlexCrystalStars, current_star, draw_x, draw_y, 2, 2, 0, -1, shield_impact_alpha);
    draw_set_blend_mode(bm_normal);
}

// Shield health ring
if(shield_health_ring_alpha &gt; 0) {
    scrAlexDrawPieTexExt(draw_x, draw_y, shield_health_ring_circum, sprAlexFB2ShieldHealthRing, 0, crown_star_attack_col, shield_health_ring_alpha);
    draw_set_blend_mode(bm_add);
    var _glow_alpha = shield_health_ring_regen_alpha + shield_impact_alpha;
    scrAlexDrawPieTexExt(draw_x, draw_y, shield_health_ring_regen_circum, sprAlexFB2ShieldHealthRing, 0, crown_star_attack_col, _glow_alpha);
    draw_set_blend_mode(bm_normal);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

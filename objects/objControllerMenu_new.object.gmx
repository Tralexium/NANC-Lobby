<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>select = 0;

canSelect = false; // If the player can select an option
backToSettings = false;
timer = 0;
xSelector = 100;
ySelector = 60;
xSeperation = 800-200;
ySeperation = 50;

drawAlpha = 0; // The alpha of all drawn elements
arrowAlpha = 0; // Select arrow alpha
arrowYScale = 1; // Scale of the arrow
arrowPosX = xSelector; // X position of the arrow
arrowPosY = ySelector+(ySeperation*select); // Y position of the arrow

settingButton = false;     //sets whether or not a button is getting set
resetPrompt = false;    //shows the message that controls were reset

strSelect[0] = "Left Button";
strSelect[1] = "Right Button";
strSelect[2] = "Up Button";
strSelect[3] = "Down Button";
strSelect[4] = "Jump Button";
strSelect[5] = "Shoot Button";
strSelect[6] = "Restart Button";
strSelect[7] = "Skip Button";
strSelect[8] = "Pause Button";
strSelect[9] = "Reset Controls";

//get current controls
strButton[0] = scrGetControllerBind(global.leftButton[1]);
strButton[1] = scrGetControllerBind(global.rightButton[1]);
strButton[2] = scrGetControllerBind(global.upButton[1]);
strButton[3] = scrGetControllerBind(global.downButton[1]);
strButton[4] = scrGetControllerBind(global.jumpButton[1]);
strButton[5] = scrGetControllerBind(global.shootButton[1]);
strButton[6] = scrGetControllerBind(global.restartButton[1]);
strButton[7] = scrGetControllerBind(global.skipButton[1]);
strButton[8] = scrGetControllerBind(global.pauseButton[1]);
strButton[9] = "";

playerIndex = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Option holders visuals

holderScale = .6;
holderAlpha = 0;
holderMaxAlpha = .4;
holderAddX = 40;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go back to settings
instance_create(0,0, objOptionsMenu);
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>resetPrompt = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(drawAlpha &lt; 1 &amp;&amp; !backToSettings){
    drawAlpha += .05;
    if(drawAlpha &gt;= 1){
        canSelect = true;
    }
}

if(backToSettings &amp;&amp; drawAlpha &gt; 0){
    canSelect = false;
    drawAlpha -= .05;
    if(arrowYScale &gt; 0)arrowYScale -= .1;
}

if(canSelect){
    // Option holder draw stuff
    holderAddX = lerp(holderAddX, 0, .1);
    holderAlpha = lerp(holderAlpha, holderMaxAlpha, .05);
}
else if(backToSettings)
{
    holderScale = lerp(holderScale, 0, .1);
    holderAlpha = lerp(holderAlpha, 0, .1);
}

if(canSelect)
{

if (!settingButton)
{
    timer++;
    
    // Arrow related draw vars
    if(arrowAlpha &lt; 1){arrowAlpha += .05;}
    arrowPosX = xSelector-24 + (-1 * abs(dsin(timer*2)*16));
    arrowPosY = lerp(arrowPosY, ySelector+(ySeperation*select), .2);

    if (scrButtonCheckPressed(global.menuUpButton))
    {
        audio_play_sound(sndSelectArrow,0,false);
        select -= 1;
        if(select &lt; 0)
            select = 9;
    }
    else if (scrButtonCheckPressed(global.menuDownButton))
    {
        audio_play_sound(sndSelectArrow,0,false);
        select += 1;
        if(select &gt; 9)
            select = 0;
    }
    else if (scrButtonCheckPressed(global.menuBackButton) || keyboard_check_pressed(vk_escape))
    {
        audio_play_sound(sndSaveOption, 0, false);
    
        //save changes and go back
        scrSaveConfig();
        alarm[1] = 60;
        //global.menuSelectPrev[1] = 0;
        backToSettings = true;
        canSelect = false;
        exit;
    }
    else if (scrButtonCheckPressed(global.menuAcceptButton) || keyboard_check_pressed(vk_enter))
    {
        audio_play_sound(sndAwaitingKey, 0, false);
    
        if (select != 9)
        {
            settingButton = true;
        }
        else
        {
            //default controls
            global.leftButton[1] = gp_padl;
            global.rightButton[1] = gp_padr;
            global.upButton[1] = gp_padu;
            global.downButton[1] = gp_padd;
            global.jumpButton[1] = gp_face1;
            global.shootButton[1] = gp_face3;
            global.restartButton[1] = gp_face4;
            global.skipButton[1] = gp_face2;
            global.suicideButton[1] = gp_select;
            global.pauseButton[1] = gp_start;
            
            resetPrompt = true;
            alarm[0] = 60;
        }
    }
}
else
{
    var buttonChange = scrAnyControllerButton();
    if (buttonChange != -1)  //check if a button is being pressed and if it is, store that button
    {    
        audio_play_sound(sndInputNewKey, 0, false);
                                              
        if (select == 0) {global.leftButton[1] = buttonChange;}
        else if (select == 1) {global.rightButton[1] = buttonChange;}
        else if (select == 2) {global.upButton[1] = buttonChange;}
        else if (select == 3) {global.downButton[1] = buttonChange;}
        else if (select == 4) {global.jumpButton[1] = buttonChange;}
        else if (select == 5) {global.shootButton[1] = buttonChange;}
        else if (select == 6) {global.restartButton[1] = buttonChange;}
        else if (select == 7) {global.skipButton[1] = buttonChange;}
        else if (select == 8) {global.pauseButton[1] = buttonChange;}
        
        settingButton = false;
    }
    else if (keyboard_check_pressed(vk_anykey))    //check if a keybord key was pressed, exit prompt
    {
        audio_play_sound(sndGeneralError, 0, false);
        settingButton = false;
    }
}

}

//update controls
strButton[0] = scrGetControllerBind(global.leftButton[1]);
strButton[1] = scrGetControllerBind(global.rightButton[1]);
strButton[2] = scrGetControllerBind(global.upButton[1]);
strButton[3] = scrGetControllerBind(global.downButton[1]);
strButton[4] = scrGetControllerBind(global.jumpButton[1]);
strButton[5] = scrGetControllerBind(global.shootButton[1]);
strButton[6] = scrGetControllerBind(global.restartButton[1]);
strButton[7] = scrGetControllerBind(global.skipButton[1]);
strButton[8] = scrGetControllerBind(global.pauseButton[1]);
strButton[9] = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white);
draw_set_font(fAlex20);
draw_set_halign(fa_left);
draw_set_valign(fa_middle);

/*
var outlineSize = 3;
var shadowCol = make_colour_rgb(30, 170, 210);

for(var i = 0; i &lt; 10; i += 1)
{
    if(i mod 2 == 0)
    {
      draw_sprite_ext(sprAlexTitleOptionHolder, 0, 400+holderAddX, ySelector+(ySeperation*i), 1, holderScale, 0, -1, holderAlpha);
    }
    else
    {
      
      draw_sprite_ext(sprAlexTitleOptionHolder, 0, 400-holderAddX, ySelector+(ySeperation*i), 1, holderScale, 0, -1, holderAlpha);
    }
    
    draw_set_halign(fa_left);
    scrAlexDrawTextShadow(strSelect[i],xSelector,ySelector+i*ySeperation, 0, 3, c_white, shadowCol, drawAlpha, drawAlpha);
    
    draw_set_halign(fa_right);
    
    if(i == select)
    {
        draw_sprite_ext(sprSelectArrow, 0, arrowPosX, arrowPosY, 1, arrowYScale, 0, -1, arrowAlpha);
        
        if (settingButton) //button prompt
        {
            scrAlexDrawTextShadow("Press button to set",xSelector+xSeperation,ySelector+i*ySeperation, 0, 3, c_white, shadowCol, drawAlpha, drawAlpha);
        }
    }
    
    if (!settingButton || i != select)    //shows current button
    {
        scrAlexDrawTextShadow(strButton[i],xSelector+xSeperation,ySelector+i*ySeperation, 0, 3, c_white, shadowCol, drawAlpha, drawAlpha);
    }
    
    if (resetPrompt &amp;&amp; i == 9) //reset controls prompt
    {
        scrAlexDrawTextShadow("Controls reset!",xSelector+xSeperation,ySelector+i*ySeperation, 0, 3, c_white, shadowCol, drawAlpha, drawAlpha);
    }
}

if (global.controllerIndex != -1)
{
    draw_set_font(fAlex20);
    draw_set_halign(fa_middle);
    draw_set_valign(fa_bottom);
    
    var controllerText = "Current controller: ";
    
    if (gamepad_is_connected(global.controllerIndex))//say what type of controller is connected (i.e. Xbox, Playstation)
    { 
        controllerText += gamepad_get_description(global.controllerIndex);
    }
    else
    {
        controllerText += "None";
    }
    
    scrAlexDrawTextShadow(controllerText,640, 720-20, 0, 4, c_white, shadowCol, drawAlpha, drawAlpha);
}

scrDrawButtonInfo();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAlexStarDoor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init vars

// Change these
room_id = rStarLevel1;
stage_name = "Null";
creator_name = "Null";
difficulty = 0;  // 0-10
star_number = 0;
spawn_x = -1;
spawn_y = -1;

// overwrite these slots to check
// if those stages are already beaten
for(i=0; i&lt;6; i++) {
    stage_to_check[i] = -1;
}

// Recalculate variables based on the creation code
alarm[10] = 1;

image_speed = 0;
timer = 0;
stage_cleared = false;
colliding = false;
active = true;
force_close = false;
arrow_x = x;
arrow_y = y;
arrow_image_index = 0;
theta = 0;
checkmark_x = x;
checkmark_y = y - sprite_height/2;
checkmark_y_start = checkmark_y;
checkmark_wiggle = 4;
lock_x = x;
lock_y = y - (sprite_height/2) + 12;
lock_angle = 0;
lock_shake_amnt = 20;
lock_shake_limiter = 0;

// Unique vars
locked = true;
flash_expand = false;
flash_height = 0;
flash_width = 0;
flash_timer = 0;
flash_length = 30;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// UI variables

ui_alpha = 0;
ui_x = x;
ui_y = y;
ui_y_start = ui_y;
ui_y_travel = 8;
ui_fade_progress = 0;
ui_difficulty_length = 0;

stage_name = "null";
creator_name = "null";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shader related

door_surf = noone;
shader = sRainbowAura;
shader_timer = random(100);
u_time = shader_get_uniform(shader, "u_time");
u_visibility = shader_get_uniform(shader, "u_visibility");
u_resolution = shader_get_uniform(shader, "u_resolution");
shader_vis = 1;
shader_res[0] = sprite_width;
shader_res[1] = sprite_height;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clear surface/s

surface_free(door_surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Convert the difficulty into the UI variant

ui_difficulty_length = difficulty/10;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if it's unlocked &amp; if the stage is cleared

var is_locked = false;
for(i=0; i&lt;6; i++) {
    if(stage_to_check[i] != -1) {
        if(!stage_to_check[i])
            is_locked = true;
    }
}

locked = is_locked;

if(!locked &amp;&amp; global.crystalStar[star_number]) {
    stage_cleared = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start the flash animation

audio_play_sound(sndAlexStarDoorFlash, 0, false)
flash_expand = true;
alarm[1] = flash_length + 15;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go to the appropriate room

// Save current lobby position and room
global.lobbyLastFloor = room;
global.lobbyLastX = objPlayer.x;
global.lobbyLastY = objPlayer.y;

// Enable stage time/death tracking
global.stagePresent = true;

// Re enable restart and pause
global.noRestart = false;
global.noPause = false;

if(spawn_x == -1 &amp;&amp; spawn_y == -1) {
    with(objAlexLobbyPlayer)
        instance_destroy();  // so that the kid can spawn at the right pos
} else {
    with(objAlexLobbyPlayer) {
        x = other.spawn_x;
        y = other.spawn_y;
    }
}

with(instance_create(0, 0, objAlexStageIntro)) {
    stage_title = other.stage_name;
    maker_name = other.creator_name;
}

room_goto(room_id)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn Transition

instance_create(x, y, objAlexLobbyBubbleTransitionOut);
alarm[2] = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shut the door

force_close = true;
audio_play_sound(sndAlexStageDoorClosed, 0, false);

alarm[3] = 35;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Arrow above kid's head

arrow_image_index += .3;

var p = objAlexLobbyPlayer;
if(colliding &amp;&amp; instance_exists(p)) {
    arrow_x = p.x;
    arrow_y = p.y - 16;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Freeze and fade player

if(!active) {
    with(objAlexLobbyPlayer) {
        frozen = true;
        sprite_index = sprPlayerRunning;
        image_speed = 0.4;
        if(draw_alpha &gt; 0) {
            draw_alpha -= .05;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Zoom in camera

if(!active) {
    with(objAlexStarStageCam) {
        target_obj = other.id;
    }
    view_wview[0] = round(lerp(view_wview[0], 300, .1));
    view_hview[0] = round(lerp(view_hview[0], 228, .1));
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change the transition bubble into stars

with(objAlexLobbyTransitionBubbleOut)
    sprite_index = sprAlexStarTransition;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for player

timer++;

if(place_meeting(x, y, objAlexLobbyPlayer) &amp;&amp; active) {
    colliding = true;
    
    // Check if the player has entered the door
    if(scrButtonCheckPressed(global.upButton)) {
        if(!locked) {
            active = false;
            alarm[0] = 40;
            
            // Disable pause and restart
            global.noRestart = true;
            global.noPause = true;
            
            var fader = instance_create(0, 0, objAlexMusicFadeTransition);
                fader.bubble_transition = false;
            
            audio_play_sound(sndAlexKidEnter, 0, false);
        } else {
            lock_shake_limiter = lock_shake_amnt;
            audio_play_sound(sndAlexLootBoxLocked, 0, false);
        }
    }
} else {
    colliding = false;
}

if((colliding || !active) &amp;&amp; !force_close) {
    if(!locked)
        image_speed = .25;
    
    if(!active)
        ui_fade_progress = lerp(ui_fade_progress, 1, .25);
    else
        ui_fade_progress = lerp(ui_fade_progress, 0, .25);
} else {
    image_speed = -.25; 
    ui_fade_progress = lerp(ui_fade_progress, 0, .25);
}

image_index = clamp(image_index, .5, image_number-1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle UI values

ui_alpha = ui_fade_progress;
ui_y = ui_y_start - (ui_y_travel * ui_fade_progress);

lock_shake_limiter = max(lock_shake_limiter-1, 0);
lock_angle = dsin(timer*40)*lock_shake_limiter;

if(stage_cleared) {
    theta += 5;
    checkmark_y = checkmark_y_start + dsin(theta)*checkmark_wiggle;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Flash animation

if(flash_expand) {
    flash_timer++;
    
    var _anim_progress = clamp(flash_timer, 0, flash_length / 2);
    flash_height = scrAlexEaseOutSine(_anim_progress, 0, 160, flash_length / 2)

    _anim_progress = clamp(flash_timer - (flash_length / 2), 0, flash_length / 2);
    flash_width = scrAlexEaseInSine(_anim_progress, 2, 300, flash_length / 2);
    
    draw_sprite_ext(sprAlexStarDoorFlash, 0, 400, 304, flash_width, flash_height, 0, -1, 1);

    // Draw the right and left black bars
    draw_set_colour(c_black);
    draw_rectangle(-5000, -5000, -1, 5000, false);
    draw_rectangle(display_get_gui_width(), -5000, 5000, 5000, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the door

if(locked) {
    if(!surface_exists(door_surf)) {
        door_surf = surface_create(sprite_width, sprite_height);
    }
    
    surface_set_target(door_surf);
        draw_clear_alpha(c_black, 0);
        draw_sprite(sprite_index, image_index, sprite_width/2, sprite_height);
    surface_reset_target();
    
    shader_timer += 0.05;
    
    // Draw door
    shader_set(shader);
        shader_set_uniform_f(u_time, shader_timer);
        shader_set_uniform_f(u_visibility, shader_vis);
        shader_set_uniform_f_array(u_resolution, shader_res);
        draw_surface(door_surf, x-(sprite_width/2), y-sprite_height);
    shader_reset();
    
    // Draw lock
    draw_sprite_ext(sprAlexLootBoxLock, 0, lock_x, lock_y, 1, 1, lock_angle, -1, image_alpha);
} else {
    draw_self();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the arrow

if(colliding &amp;&amp; active)
    draw_sprite(sprAlexPressUpArrow, arrow_image_index, arrow_x, arrow_y);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the UI above

if(ui_fade_progress &gt; .02) {

    draw_set_alpha(ui_alpha);
    
    var text_col = $e8fff5;
    var outline_col = $2e1814;
    
    // Stage title
    draw_set_font(fMenuLobby6);
    
    scrDrawTextSquareOutline(ui_x, ui_y-120, stage_name, text_col, outline_col, 1, fa_center, fa_top);
    
    // Creator
    draw_set_font(fLobbySmall);
    scrDrawTextSquareOutline(ui_x, ui_y-110, "By: "+creator_name, text_col, outline_col, 1, fa_center, fa_top);
    
    // Difficulty
    scrDrawTextSquareOutline(ui_x, ui_y-90, "difficulty", text_col, outline_col, 1, fa_center, fa_top);
    draw_sprite(sprAlexStageDifficultyBar, 0, ui_x-20, ui_y-75);
    draw_sprite_part(sprAlexStageDifficultyBar, 1, 0, 0, 40*ui_difficulty_length, 8, ui_x-20, ui_y-75);
    
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw clear checkmark

if(stage_cleared) {

    draw_set_alpha(1-ui_alpha);
    draw_sprite(sprAlexLobbyStageDoorCleared, 0, checkmark_x, checkmark_y)
    draw_set_alpha(1);

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

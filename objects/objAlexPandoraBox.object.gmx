<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAlexPandoraBoxIdle</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-250</depth>
  <persistent>0</persistent>
  <parentName>objBlock</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init vars

image_speed = 0.3;

active = false;
unlocked = false;
explode = false;
t = 0;

border_wiggle_amnt = 5;
border_clones = 3;
border_col = $b8a44f
border_alpha = 1;

area_x1 = -1;
area_y1 = -1;
area_x2 = -1;
area_y2 = -1;

outside_surf = noone;
outside_alpha = 0;

glow_alpha = 0;
glow_alpha_multi = 0;
ring_alpha = 0;
ring_alpha_multi = 0;
ring_angle = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shader related

shader = sPandoraBoxHaze;
shader_timer = 0;
distort_sprite = sprAlexHeatHazeDistortionTex;
distort_tex = sprite_get_texture(distort_sprite, 0);
u_distort_tex = shader_get_sampler_index(shader, "distort_tex");
u_time = shader_get_uniform(shader, "time");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create particle container object

if(!instance_exists(objAlexPandoraBoxParticles))
    instance_create(0, 0, objAlexPandoraBoxParticles);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Free outside surface &amp; change cam target obj

surface_free(outside_surf);

with(objAlexStarStageCam)
    target_obj = objPlayer;
    
audio_stop_sound(sndAlexPandoraBoxAmbience);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Logic &amp; screen wrapping

t++;

if(active &amp;&amp; !unlocked) {
    with(objPlayer) {
        // Left side
        if(x &lt;= other.area_x1) {
            var _part = scrAlexMakeParticle(x, y, 30, sprAlexPandoraBoxBorderEnter, 0.499, 0, 0, false, false, false);
                _part.depth = depth - 1;
                _part.blend_mode = bm_add;
            x = other.area_x2 - 1;
            var _part = scrAlexMakeParticle(x, y, 30, sprAlexPandoraBoxBorderEnter, 0.499, 0, 0, false, false, false);
                _part.depth = depth - 1;
                _part.image_angle = 180;
                _part.blend_mode = bm_add;
            audio_play_sound(sndAlexPandoraBoxWrap, 0, false);
        }
        // Right side
        if(x &gt;= other.area_x2) {
            var _part = scrAlexMakeParticle(x, y, 30, sprAlexPandoraBoxBorderEnter, 0.499, 0, 0, false, false, false);
                _part.depth = depth - 1;
                _part.image_angle = 180;
                _part.blend_mode = bm_add;
            x = other.area_x1 + 1;
            var _part = scrAlexMakeParticle(x, y, 30, sprAlexPandoraBoxBorderEnter, 0.499, 0, 0, false, false, false);
                _part.depth = depth - 1;
                _part.blend_mode = bm_add;
            audio_play_sound(sndAlexPandoraBoxWrap, 0, false);
        }
        // Top side
        if(y &lt;= other.area_y1) {
            var _part = scrAlexMakeParticle(x, y, 30, sprAlexPandoraBoxBorderEnter, 0.499, 0, 0, false, false, false);
                _part.depth = depth - 1;
                _part.image_angle = -90;
                _part.blend_mode = bm_add;
            y = other.area_y2 - 1;
            var _part = scrAlexMakeParticle(x, y, 30, sprAlexPandoraBoxBorderEnter, 0.499, 0, 0, false, false, false);
                _part.depth = depth - 1;
                _part.image_angle = 90;
                _part.blend_mode = bm_add;
            audio_play_sound(sndAlexPandoraBoxWrap, 0, false);
        }
        // Bottom side
        if(y &gt;= other.area_y2) {
            var _part = scrAlexMakeParticle(x, y, 30, sprAlexPandoraBoxBorderEnter, 0.499, 0, 0, false, false, false);
                _part.depth = depth - 1;
                _part.image_angle = 90;
                _part.blend_mode = bm_add;
            y = other.area_y1 + 1;
            var _part = scrAlexMakeParticle(x, y, 30, sprAlexPandoraBoxBorderEnter, 0.499, 0, 0, false, false, false);
                _part.depth = depth - 1;
                _part.image_angle = -90;
                _part.blend_mode = bm_add;
            audio_play_sound(sndAlexPandoraBoxWrap, 0, false);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Animations

if(explode) {
    image_angle -= 30;
    image_xscale -= 0.1;
    image_yscale = image_xscale;
    
    if(image_xscale &lt;= 0) {
        var _part = scrAlexMakeParticle(x, y, 20, sprAlexPandoraBoxExplosion, 0.49, 0, 0, false, false, false);
            _part.image_xscale = 2;
            _part.image_yscale = 2;
            _part.depth = depth;
        
        repeat(5) {
            _spark_dir = random(360);
            _part = scrAlexMakeParticle(x, y, 10, sprAlexFBParticleSpark, 0, _spark_dir, random_range(8, 12), false, false, false);
            _part.image_blend = c_aqua;
            _part.image_xscale = 1.5;
            _part.image_yscale = 1.5;
            _part.depth = depth-1;
            _part.image_angle = _spark_dir;
            _part.blend_mode = bm_add;
            _part.add_scale = -0.15;
        }
        
        audio_stop_sound(sndAlexPandoraBoxPreExplosion);
        audio_play_sound(sndAlexPandoraBoxExplosion, 0, false);
        instance_destroy();
    }
}
else if(unlocked) {
    sprite_index = sprAlexPandoraBoxUnlocked;
    image_speed = 0.4;
    outside_alpha = max(outside_alpha - 0.01, 0);
    glow_alpha_multi = max(glow_alpha_multi - 0.01, 0);
    ring_alpha_multi = max(ring_alpha_multi - 0.01, 0);
    border_alpha = max(border_alpha - 0.01, 0);
}
else if(active) {
    sprite_index = sprAlexPandoraBoxActive;
    outside_alpha = min(outside_alpha + 0.1, 1);
    
    var _key_collected = false;
    with(objAlexPandoraKey)
        _key_collected = collected;
    
    if(!_key_collected) {
        glow_alpha_multi = min(glow_alpha_multi + 0.03, 0.5);
    } else {
        ring_alpha_multi = min(ring_alpha_multi + 0.03, 0.3);
    }
}

glow_alpha = (0.5 + dsin(t*2)*0.25)*glow_alpha_multi;
ring_alpha = abs(dsin(t))*ring_alpha_multi;
ring_angle -= 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Border particles

if(active &amp;&amp; !unlocked &amp;&amp; t mod 2 == 0) {
    var _random_hor = random_range(area_x1 - 32, area_x2 + 32);
    var _random_ver = random_range(area_y1 - 32, area_y2 + 32);
    
    with(objAlexPandoraBoxParticles) {
        part_particles_create(part_system, _random_hor, other.area_y1, part_type_up, 1);
        part_particles_create(part_system, _random_hor, other.area_y2, part_type_down, 1);
        part_particles_create(part_system, other.area_x1, _random_ver, part_type_left, 1);
        part_particles_create(part_system, other.area_x2, _random_ver, part_type_right, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Replace the player sounds with the echo variants

if(active &amp;&amp; !unlocked) {
    if(audio_is_playing(sndJump)) {
        audio_stop_sound(sndJump);
        audio_play_sound(sndAlexPandoraBoxPlayerJump, 0, false);
    }
    
    if(audio_is_playing(sndDJump)) {
        audio_stop_sound(sndDJump);
        audio_play_sound(sndAlexPandoraBoxPlayerDJump, 0, false);
    }
    
    if(audio_is_playing(sndShoot)) {
        audio_stop_sound(sndShoot);
        audio_play_sound(sndAlexPandoraBoxPlayerShoot, 0, false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fill the broders with particles

repeat(30) {
    var _random_hor = random_range(area_x1 - 32, area_x2 + 32);
    var _random_ver = random_range(area_y1 - 32, area_y2 + 32);
    
    with(objAlexPandoraBoxParticles) {
        part_particles_create(part_system, _random_hor, other.area_y1, part_type_up, 1);
        part_particles_create(part_system, _random_hor, other.area_y2, part_type_down, 1);
        part_particles_create(part_system, other.area_x1, _random_ver, part_type_left, 1);
        part_particles_create(part_system, other.area_x2, _random_ver, part_type_right, 1);
    }
}

audio_play_sound(sndAlexPandoraBoxActivate, 0, false);
audio_play_sound(sndAlexPandoraBoxAmbience, 0, true);
audio_sound_gain(sndAlexPandoraBoxAmbience, 1, 0);
audio_sound_gain(global.currentMusic, 0.4, 1000);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// If finished unlocking start shrinking

if(sprite_index == sprAlexPandoraBoxUnlocked) {
    sprite_index = sprAlexPandoraBoxPreExplosion;
    mask_index = sprAlexNoMask;
    explode = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get the bounding box from the cyan area

var _area = instance_place(x, y, objAlexPandoraBoxArea);

if(_area != noone) {
    area_x1 = _area.bbox_left;
    area_y1 = _area.bbox_top;
    area_x2 = _area.bbox_right;
    area_y2 = _area.bbox_bottom;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Remove ambient noise and restore music volume

if(audio_is_playing(sndAlexPandoraBoxAmbience)) {
    audio_stop_sound(sndAlexPandoraBoxAmbience);
    audio_sound_gain(global.currentMusic, 1, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the border lines &amp; self

draw_set_colour(border_col);
draw_set_blend_mode(bm_add);

draw_rectangle(area_x1, area_y1, area_x2, area_y2, true);

var _border_add_x, _border_add_y, _box_alpha, _bt;
for(var i=0; i&lt;border_clones; i++) {
    _bt = t + (360/border_clones)*i;
    _border_add_x = dsin(_bt*2)*border_wiggle_amnt;
    _border_add_y = dsin(_bt)*border_wiggle_amnt;
    _border_alpha = dsin(_bt) * border_alpha;
    
    draw_set_alpha(_border_alpha);
    draw_rectangle(area_x1 + _border_add_x, area_y1 + _border_add_y, area_x2 + _border_add_x, area_y2 + _border_add_y, true);
}

draw_sprite_ext(sprAlexGlowOrb, 0, x, y, 2, 2, 0, border_col, glow_alpha);
draw_sprite_ext(sprAlexPandoraRing, 0, x, y, 0.5, 0.5, ring_angle, -1, ring_alpha);

draw_set_alpha(1);
draw_set_blend_mode(bm_normal);

draw_self();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the outside

var _area_x1 = area_x1 - view_xview[0];
var _area_x2 = area_x2 - view_xview[0];
var _area_y1 = area_y1 - view_yview[0];
var _area_y2 = area_y2 - view_yview[0];
var _area_width = abs(area_x2 - area_x1);
var _area_height = abs(area_y2 - area_y1);

if(!surface_exists(outside_surf)) {
    outside_surf = surface_create(view_wview[0], view_hview[0]);
}

if(outside_alpha &gt; 0) {
    
    surface_set_target(outside_surf);
        draw_clear_alpha(c_black, 0);    
        // Top
        draw_surface_part_ext(application_surface, _area_x1, _area_y1, _area_width, _area_height, _area_x1, _area_y1 - _area_height, 1, 1, c_dkgray, outside_alpha);
        // Bottom
        draw_surface_part_ext(application_surface, _area_x1, _area_y1, _area_width, _area_height, _area_x1, _area_y2, 1, 1, c_dkgray, outside_alpha);
        // Left
        draw_surface_part_ext(application_surface, _area_x1, _area_y1, _area_width, _area_height, _area_x1 - _area_width, _area_y1, 1, 1, c_dkgray, outside_alpha);
        // Right
        draw_surface_part_ext(application_surface, _area_x1, _area_y1, _area_width, _area_height, _area_x2, _area_y1, 1, 1, c_dkgray, outside_alpha);
        
        // Top Left Corner
        draw_surface_part_ext(application_surface, _area_x1, _area_y1, _area_width, _area_height, _area_x1 - _area_width, _area_y1 - _area_height, 1, 1, c_dkgray, outside_alpha);
        // Top Right Corner
        draw_surface_part_ext(application_surface, _area_x1, _area_y1, _area_width, _area_height, _area_x2, _area_y1 - _area_height, 1, 1, c_dkgray, outside_alpha);
        // Bottom Right Corner
        draw_surface_part_ext(application_surface, _area_x1, _area_y1, _area_width, _area_height, _area_x2, _area_y2, 1, 1, c_dkgray, outside_alpha);
        // Bottom Left Corner
        draw_surface_part_ext(application_surface, _area_x1, _area_y1, _area_width, _area_height, _area_x1 - _area_width, _area_y2, 1, 1, c_dkgray, outside_alpha);
    surface_reset_target();
    
    shader_timer += 0.002;
    
    draw_set_alpha(outside_alpha);
    texture_set_interpolation_ext(u_distort_tex, true);
    
    shader_set(shader);
        texture_set_stage(u_distort_tex, distort_tex);
        shader_set_uniform_f(u_time, shader_timer);
        draw_surface_ext(outside_surf, view_xview[0], view_yview[0], 1.02, 1.02, 0, -1, outside_alpha);
    shader_reset();
    
    texture_set_interpolation(false);
}

draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

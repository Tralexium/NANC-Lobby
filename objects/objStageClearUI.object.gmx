<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init vars &amp; disable restarting &amp; pausing

global.noRestart = true;
global.noPause = true;

timer = 0;
text_col = $e8fff5;
outline_col = $2e1814;


// Stage stats
stage_time = 0;
stage_deaths = 0;
stage_total_secrets = 0;
stage_secrets_found = 0;


// UI converted stage stats
ui_stage_time = 0;
ui_stage_deaths = 0;
ui_stage_secrets_found = 0;
ui_time_icon_scale = 1;
ui_deaths_icon_scale = 1;
ui_secret_icon_scale = 1;
stats_timer = 0;
stats_count_delay = 20;
stats_x = display_get_gui_width()/2;
stats_y = display_get_gui_height()/2;
stats_add_y = 0;
stats_add_y_target = 64;
stats_alpha = 0;


// Stage clear text
sc_string = "STAGE CLEAR";
sc_font = fStageClear;
sc_letter_outline_size = 9;
sc_letter_delay = 5;
sc_letter_anim_length = 40;
sc_letter_distance = 80;
sc_string_size = string_length(sc_string)
sc_fade_delay = 10;
for(var i = 0; i &lt; go_string_size; i++) {
    sc_letter_alpha[i] = 0;
    sc_letter_add_y[i] = 0;
    sc_letter_hue[i] = i * sc_letter_delay;
}


// BG
bg_anim_length = 40;
bg_size = 0;
bg_target_size = 2500;


// Top and bottom bars
bar_anim_length = 20;
bar_scroll_min_speed = 0.5;
bar_scroll_max_speed = 8;
bar_scroll_speed = bar_scroll_max_speed;
bar_y = -96;
bar_rise_distance = 72;
bar_render_x = 0;
bar_length = 32;
bar_height = 96;


// Continue text
var _scr_to_get_key = scrGetKeybind;
var _array_index = 0;
if(global.controllerMode) {
    _scr_to_get_key = scrGetControllerBind;
    _array_index = 1;
}
continue_string = "Press ["+script_execute(scr_to_get_key,global.jumpButton[array_index])+"] to Continue";
continue_alpha = 0;


// Shader related
shader_surf = noone;
shader = sRainbowCircles;
shader_timer = 0;
shader_timer_max_spd = 0.03;
shader_timer_min_spd = 0.003;
shader_timer_spd = shader_timer_max_spd;
u_time = shader_get_uniform(shader, "u_time");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Free surface

surface_free(shader_surf)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Animations

timer++;

// Circle BG
if(timer &lt;= bg_anim_length) {
   bg_size = scrAlexEaseOutSine(timer, 0, bg_target_size, bg_anim_length);
   shader_timer_spd = scrAlexEaseOutSine(timer, shader_timer_max_spd, shader_timer_min_spd, bg_anim_length);
}

// Top &amp; Bottom bars
if(timer &lt;= bar_anim_length) {
    var _anim_progress = scrAlexEaseOutSine(timer, 0, 1, bar_anim_length);
    bar_y = -bar_height + (bar_rise_distance * _anim_progress);
}
bar_scroll_speed = lerp(bar_scroll_speed, bar_scroll_min_speed, 0.1);
bar_render_x = (bar_render_x + bar_scroll_speed) mod bar_length;


// Stage clear letters
var _time_begin, _letter_timer;
for(var i = 0; i &lt; sc_string_size; i++) {
    _time_begin = sc_letter_delay * i;
    _letter_timer = clamp(timer - (_time_begin + sc_fade_delay), 0, sc_letter_anim_length);

    sc_letter_alpha[i] = scrAlexEaseOutSine(_letter_timer, 0, 1, sc_letter_anim_length);
    sc_letter_add_y[i] = scrAlexEaseOutElastic(_letter_timer, -100, 0, sc_letter_anim_length);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the UI


// Draw BG
if(!surface_exists(shader_surf)) {
    shader_surf = surface_create(bg_target_size, bg_target_size);
}

var _middle = bg_target_size / 2;
surface_set_target(shader_surf);
    draw_clear_alpha(c_black, 0);
    draw_set_circle_precision(64);
    draw_circle(middle, middle, bg_size, false);
    draw_set_circle_precision(24);
surface_reset_target();

shader_timer += shader_timer_spd;

shader_set(shader);
    shader_set_uniform_f(u_time, shader_timer);
    draw_surface(shader_surf, display_get_gui_width()/2 - middle, display_get_gui_height()/2 - middle);
shader_reset();


// Stage clear text
var _letter_x, _letter_y, _letter_str, _letter_col;
draw_set_font(sc_font);
for(var i = 0; i &lt; sc_string_size; i++) {
    if(sc_letter_alpha[i] &gt; 0) {
        _letter_x = (view_wport[0]/2) + (sc_letter_distance * (i - sc_string_size/2 + 0.5));
        _letter_y = (view_hport[0]/2) + 75 + sc_letter_add_y[i];
        _letter_str = string_char_at(sc_string, i+1);
        draw_set_alpha(sc_letter_alpha[i]);
        sc_letter_hue[i] += 1;
        _letter_col = make_colour_hsv(sc_letter_hue[i], 200, 240);
        scrDrawTextSquareOutline(_letter_x, _letter_y, _letter_str, _letter_col, outline_col, sc_letter_outline_size, fa_center, fa_bottom);
    }
}


// Draw the top &amp; bottom bars
draw_set_alpha(1);
var bar_segments = round(display_get_gui_width() / bar_length);
var bar_bottom_y = display_get_gui_height()- bar_y - bar_height;
var bar_render_x_bottom = bar_length - bar_render_x;
for(var i=0; i&lt;bar_segments; i++) {
    var segment_x = i*32;
    draw_sprite_part(sprAlexPauseUITopBar, 0, bar_render_x, 0, bar_length, bar_height, segment_x, bar_y);
    draw_sprite_part(sprAlexPauseUIBottomBar, 0, bar_render_x_bottom, 0, bar_length, bar_height, segment_x, bar_bottom_y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

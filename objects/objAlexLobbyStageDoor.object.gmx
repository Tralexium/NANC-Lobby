<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAlexLobbyStageDoor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init vars

// Change these
room_id = rLobbyFloor1;
creator_name = "null";
stage_name = "null";
rating = 0;  // 0-10
difficulty = 0;  // 0-10
stage_number = 0;

/*
    To assign secrets use this format inside
    the creation code:
    
    stage_secret_id[0] = global.secretItem[3];
    stage_secret_id[1] = global.secretItem[4];
    stage_secret_id[2] = global.secretItem[5];
    ...and so on depending on how many secrets the stage has!
*/
////////////////

// Shader related
preview_alpha = 0;
time_since_open_door = 0;
time_until_preview_shows = 8;
stage_preview_image = sprAllStagePreviews;

shader = sHeatHaze;
shader_timer = 0;
distort_sprite = sprAlexHeatHazeDistortionTex;
distort_tex = sprite_get_texture(distort_sprite, 0);
u_distort_tex = shader_get_sampler_index(shader, "distort_tex");
u_time = shader_get_uniform(shader, "time");
preview_image_surf = noone;

// Init empty secret slots (max of 10)
for(var i = 0; i &lt; 10; i++) {
    stage_secret_id[i] = noone;
}

tag_id = instance_create(x, y+1, objAlexDoorTag);
image_speed = 0;
alarm[10] = 1;
total_secrets = 0;  // This will be filled in the 10th alarm
secrets_found = 0;  // Same as above
stage_cleared = false; // Check if the stage is cleared
stage_aced = false;  // Whether all the secrets have been collected and the stage is cleared
colliding = false;
active = true;
force_close = false;
arrow_x = x;
arrow_y = y;
arrow_image_index = 0;
theta = 0;
checkmark_x = x;
checkmark_y = y - sprite_height/2;
checkmark_y_start = checkmark_y;
checkmark_wiggle = 4;
reading_reviews = false;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// UI related vars

// We use a seperate object for UI to make the depth negative
// Messing with the GUI event is more hassle than this...
door_ui_id = instance_create(x, y, objAlexLobbyStageDoorUI);

ui_alpha = 0;
ui_x = x;
ui_y = y - (sprite_height-8);
ui_y_start = ui_y;
ui_y_travel = 8;
ui_fade_progress = 0;  // goes from 0 to 1, manages the fading animation
ui_rating_length = 1;  // This is set in the 10th alarm
ui_difficulty_length = 1;  // This is set in the 10th alarm
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send the UI info to door_ui_id

door_ui_id.ui_alpha = ui_alpha;
door_ui_id.ui_x = ui_x;
door_ui_id.ui_y = ui_y;
door_ui_id.ui_y_start = ui_y_start;
door_ui_id.ui_y_travel = ui_y_travel;
door_ui_id.ui_fade_progress = ui_fade_progress;
door_ui_id.ui_rating_length = ui_rating_length;
door_ui_id.ui_difficulty_length = ui_difficulty_length;

door_ui_id.stage_name = stage_name;
door_ui_id.creator_name = creator_name;
door_ui_id.total_secrets = total_secrets;
door_ui_id.secrets_found = secrets_found;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clear surface/s

surface_free(preview_image_surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup Door Tag

tag_id.stage_number = stage_number;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if stage is cleared

if(global.stageCleared[stage_number]) {
    stage_cleared = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Find total number of secrets &amp; if aced

for(var i = 0; i &lt; 10; i++) {
    if(stage_secret_id[i] != noone) {
        total_secrets++;
        if(stage_secret_id[i])
            secrets_found++;
    }
}

if(stage_cleared &amp;&amp; total_secrets == secrets_found) {
    tag_id.sprite_index = sprAlexLobbyStageDoorAcedTag;
    stage_aced = true;
    tag_id.is_aced = true;
}

// If no secrets exist, bring the UI closer to the door
if(total_secrets &lt;= 0) {
    ui_y_start += 16;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Convert the score &amp; ratings into UI variants

ui_rating_length = rating/10;  // This is set in the 10th alarm
ui_difficulty_length = difficulty/10;  // This is set in the 10th alarm
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go to the appropriate room

with(objAlexLobbyPlayer)
    instance_destroy();  // so that the kid can spawn at the right pos

with(instance_create(0, 0, objAlexStageIntro)) {
    stage_title = other.stage_name;
    maker_name = other.creator_name;
}

// Enable stage time/death tracking
global.stagePresent = true;

room_goto(room_id)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn Transition

instance_create(x, y, objAlexLobbyBubbleTransitionOut);
alarm[2] = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shut the door

force_close = true;
audio_play_sound(sndAlexStageDoorClosed, 0, false);

alarm[1] = 50;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Arrow above kid's head

arrow_image_index += .3;

var p = objAlexLobbyPlayer;
if(colliding &amp;&amp; instance_exists(p)) {
    arrow_x = p.x;
    arrow_y = p.y - 16;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Freeze and fade player

if(!active) {
    with(objAlexLobbyPlayer) {
        frozen = true;
        sprite_index = sprPlayerRunning;
        image_speed = 0.4;
        if(draw_alpha &gt; 0) {
            draw_alpha -= .05;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Zoom in camera

if(!active) {
    view_wview[0] = round(lerp(view_wview[0], 300, .1));
    view_hview[0] = round(lerp(view_hview[0], 228, .1));
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Send the UI info to door_ui_id

door_ui_id.ui_alpha = ui_alpha;
door_ui_id.ui_x = ui_x;
door_ui_id.ui_y = ui_y;
door_ui_id.ui_y_start = ui_y_start;
door_ui_id.ui_y_travel = ui_y_travel;
door_ui_id.ui_fade_progress = ui_fade_progress;
door_ui_id.ui_rating_length = ui_rating_length;
door_ui_id.ui_difficulty_length = ui_difficulty_length;

door_ui_id.stage_name = stage_name;
door_ui_id.creator_name = creator_name;
door_ui_id.total_secrets = total_secrets;
door_ui_id.secrets_found = secrets_found;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle UI values

ui_alpha = ui_fade_progress;
ui_y = ui_y_start - (ui_y_travel * ui_fade_progress);

if(stage_cleared) {
    theta += 5;
    checkmark_y = checkmark_y_start + dsin(theta)*checkmark_wiggle;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for player

if(instance_exists(objAlexStageReviewUI)) {
    reading_reviews = true;
} else {
    reading_reviews = false;
}

if(place_meeting(x, y, objAlexLobbyPlayer) &amp;&amp; active &amp;&amp; !reading_reviews) {
    colliding = true;
    
    // Check if the player has entered the door
    if(scrButtonCheckPressed(global.upButton)) {
        active = false;
        alarm[0] = 40;
        var obj = instance_create(0, 0, objAlexMusicFadeTransition);
            obj.bubble_transition = false;
        audio_play_sound(sndAlexKidEnter, 0, false);
    }
    
    // Check if the player wants to read the reviews
    if(scrButtonCheckPressed(global.downButton)) {
        var _review_ui = instance_create(0, 0, objAlexStageReviewUI);
            _review_ui.stage_id = stage_number;
    }
} else {
    colliding = false;
}

if((colliding || !active) &amp;&amp; !force_close) {
    image_speed = .25;
    time_since_open_door++;
    ui_fade_progress = lerp(ui_fade_progress, 1, .25);
} else {
    // Wait for the preview to fade out first
    if((preview_alpha &lt;= 0))
        image_speed = -.25;
        
    time_since_open_door = 0;
    ui_fade_progress = lerp(ui_fade_progress, 0, .25);
}

// Fade in stage preview after a while
if(time_since_open_door &gt;= time_until_preview_shows) {
    preview_alpha = min(1, preview_alpha+0.1);
} else {
    preview_alpha = max(0, preview_alpha-0.2);
}

image_index = clamp(image_index, .5, image_number-1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the door

draw_self();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw preview of the stage

if(preview_alpha &gt; 0) {

if(!surface_exists(preview_image_surf)) {
    var w = sprite_get_width(stage_preview_image);
    var h = sprite_get_height(stage_preview_image);
    preview_image_surf = surface_create(w, h);
    
    surface_set_target(preview_image_surf)
        draw_sprite(stage_preview_image, stage_number, 0, 0);
    surface_reset_target();
}

shader_timer += 0.002;
var door_w = sprite_get_width(sprite_index);
var door_h = sprite_get_height(sprite_index);

draw_set_alpha(preview_alpha);
texture_set_interpolation_ext(u_distort_tex, true);

shader_set(shader);
    texture_set_stage(u_distort_tex, distort_tex);
    shader_set_uniform_f(u_time, shader_timer);
    draw_surface(preview_image_surf, x-door_w/2+1, y-door_h);
shader_reset();

draw_set_alpha(1);
texture_set_interpolation(false);

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw clear checkmark

if(stage_cleared) {

    draw_set_alpha(1-ui_alpha);
    draw_sprite(sprAlexLobbyStageDoorCleared, 0, checkmark_x, checkmark_y)
    draw_set_alpha(1);

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the arrow

if(colliding &amp;&amp; active)
    draw_sprite(sprAlexPressUpArrow, arrow_image_index, arrow_x, arrow_y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

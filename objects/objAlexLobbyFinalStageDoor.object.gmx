<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAlexFinalStageDoor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init vars

// Change these
room_id = rStarLevel1;
stage_name = "Null";
creator_name = "Null";
difficulty = 0;  // 0-10
spawn_x = -1;
spawn_y = -1;

// Recalculate variables based on the creation code
alarm[10] = 1;

image_speed = 0;
timer = 0;
stage_cleared = false;
zoom_t = 0;
zoom_dur = 25;
initial_view_x = 0;
initial_view_y = 0;
colliding = false;
active = true;
force_close = false;
arrow_x = x;
arrow_y = y;
arrow_image_index = 0;
theta = 0;
checkmark_x = x;
checkmark_y = y - sprite_height/2;
checkmark_y_start = checkmark_y;
checkmark_wiggle = 4;

// Unique vars
locked = true;
flash_expand = false;
flash_height = 0;
flash_width = 0;
flash_timer = 0;
flash_length = 30;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// UI variables

ui_alpha = 0;
ui_x = x;
ui_y = y;
ui_y_start = ui_y;
ui_y_travel = 16;
ui_fade_progress = 0;
ui_difficulty_length = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shader related

shader = sHeatHaze;
shader_timer = 0;
distort_sprite = sprAlexHeatHazeDistortionTex;
distort_tex = sprite_get_texture(distort_sprite, 0);
u_distort_tex = shader_get_sampler_index(shader, "distort_tex");
u_time = shader_get_uniform(shader, "time");
aura_surf = noone;
aura_sprite = sprAlexFinalStageDoorAura;
aura_alpha = 0.7;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clear surface/s

surface_free(aura_surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Convert the difficulty into the UI variant

ui_difficulty_length = difficulty/10;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if the stage is cleared

if(global.gameClear) {
    stage_cleared = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start the flash animation

audio_play_sound(sndAlexStarDoorFlash, 0, false)
flash_expand = true;
alarm[1] = flash_length + 15;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go to the appropriate room

// Save current lobby position and room
global.lobbyLastFloor = room;
global.lobbyLastX = objPlayer.x;
global.lobbyLastY = objPlayer.y;

// Enable stage time/death tracking
global.stagePresent = true;

// Re enable restart and pause
global.noRestart = false;
global.noPause = false;

if(spawn_x == -1 &amp;&amp; spawn_y == -1) {
    with(objAlexLobbyPlayer)
        instance_destroy();  // so that the kid can spawn at the right pos
} else {
    with(objAlexLobbyPlayer) {
        x = other.spawn_x;
        y = other.spawn_y;
    }
}

with(instance_create(0, 0, objAlexStageIntro)) {
    stage_title = other.stage_name;
    maker_name = other.creator_name;
}

room_goto(room_id)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn Transition

instance_create(x, y, objAlexLobbyBubbleTransitionOut);
alarm[2] = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shut the door

force_close = true;
audio_play_sound(sndAlexStageDoorClosed, 0, false);

alarm[3] = 35;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Arrow above kid's head

arrow_image_index += .3;

var p = objAlexLobbyPlayer;
if(colliding &amp;&amp; instance_exists(p)) {
    arrow_x = p.x;
    arrow_y = p.y - 16;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Freeze and fade player

if(!active) {
    with(objAlexLobbyPlayer) {
        frozen = true;
        sprite_index = sprPlayerRunning;
        image_speed = 0.4;
        if(draw_alpha &gt; 0) {
            draw_alpha -= .05;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Zoom in camera

if(!active) {
    with(objAlexStarStageCam) {
        active = false;
    }
    
    zoom_t = min(zoom_t+1, zoom_dur);
    view_wview[0] = scrAlexEaseOutSine(zoom_t, 400, 300, zoom_dur);
    view_hview[0] = scrAlexEaseOutSine(zoom_t, 304, 228, zoom_dur);
    view_xview[0] = x - view_wview[0]/2;
    view_yview[0] = scrAlexEaseOutSine(zoom_t, initial_view_y, y - view_hview[0]/2, zoom_dur);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change the transition bubble into stars

with(objAlexLobbyTransitionBubbleOut)
    sprite_index = sprAlexStarTransition;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for player

timer++;

if(place_meeting(x, y, objAlexLobbyPlayer) &amp;&amp; active &amp;&amp; !locked) {
    colliding = true;
    
    // Check if the player has entered the door
    if(scrButtonCheckPressed(global.upButton)) {
        active = false;
        alarm[0] = 40;
        
        // Disable pause and restart
        global.noRestart = true;
        global.noPause = true;
        
        var fader = instance_create(0, 0, objAlexMusicFadeTransition);
            fader.bubble_transition = false;
        
        audio_play_sound(sndAlexKidEnter, 0, false);
        
        initial_view_x = view_xview[0];
        initial_view_y = view_yview[0];
    }
} else {
    colliding = false;
}

if((colliding || !active) &amp;&amp; !force_close &amp;&amp; !locked) {
    image_speed = .25;
    
    if(active)
        ui_fade_progress = lerp(ui_fade_progress, 1, .25);
    else
        ui_fade_progress = lerp(ui_fade_progress, 0, .25);
} else {
    image_speed = -.25; 
    ui_fade_progress = lerp(ui_fade_progress, 0, .25);
}

image_index = clamp(image_index, .5, image_number-1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle UI values

ui_alpha = ui_fade_progress;
ui_y = ui_y_start - (ui_y_travel * ui_fade_progress);

if(stage_cleared) {
    theta += 5;
    checkmark_y = checkmark_y_start + dsin(theta)*checkmark_wiggle;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create aura underneath

if(timer mod 2 == 0 &amp;&amp; locked) {
    var _x = random_range(x - 40, x + 40);
    var _y = y + 50;
    var _dir = random_range(100, 80)
    var _spd_shift = choose(.015, .015, .015, .015, .02, .02, .02, .02, .03, .04);
    var _part = scrAlexMakeParticleExt(_x, _y, 60, sprAlexGlowOrb, 0, 0, 0, _dir, 0, _spd_shift, $7752ff, $e6c742, bm_add, true, false, false, depth-1, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Flash animation

if(flash_expand) {
    flash_timer++;
    
    var _anim_progress = clamp(flash_timer, 0, flash_length / 2);
    flash_height = scrAlexEaseOutSine(_anim_progress, 0, 160, flash_length / 2)

    _anim_progress = clamp(flash_timer - (flash_length / 2), 0, flash_length / 2);
    flash_width = scrAlexEaseInSine(_anim_progress, 2, 300, flash_length / 2);
    
    draw_sprite_ext(sprAlexFinalDoorFlash, 0, 400, 304, flash_width, flash_height, 0, -1, 1);
    
    // Draw the right and left black bars
    draw_set_colour(c_black);
    draw_rectangle(-5000, -5000, -1, 5000, false);
    draw_rectangle(display_get_gui_width(), -5000, 5000, 5000, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if in view

if(!scrInView(128))
    exit;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the door

draw_self();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the Aura if locked

if(!surface_exists(aura_surf)) {
    var w = sprite_get_width(aura_sprite);
    var h = sprite_get_height(aura_sprite);
    aura_surf = surface_create(w, h);
    
    surface_set_target(aura_surf)
        draw_sprite(aura_sprite, 0, 0, 0);
    surface_reset_target();
}

if(locked) {
    shader_timer += 0.002;
    var door_w = sprite_get_width(sprite_index);
    var door_h = sprite_get_height(sprite_index);
    
    aura_alpha = 0.5 + dsin(shader_timer*1000)*0.25;
    
    draw_set_alpha(aura_alpha);
    texture_set_interpolation_ext(u_distort_tex, true);
    
    shader_set(shader);
        texture_set_stage(u_distort_tex, distort_tex);
        shader_set_uniform_f(u_time, shader_timer);
        draw_surface(aura_surf, bbox_left + 1, bbox_top - 3);
        
        draw_set_blend_mode(bm_add);
        draw_surface(aura_surf, bbox_left + 1, bbox_top - 3);
        draw_set_blend_mode(bm_normal);
    shader_reset();
    
    draw_set_alpha(1);
    texture_set_interpolation(false);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the UI above

if(ui_fade_progress &gt; .02) {

    draw_set_alpha(ui_alpha);
    
    var text_col = $3945e6;
    var outline_col = $2e1814;
    
    if(!locked) {
        // Stage title
        draw_set_font(fMenuLobby6);
        
        scrDrawTextSquareOutline(ui_x, ui_y-90, stage_name, text_col, outline_col, 1, fa_center, fa_top);
        
        // Creator
        draw_set_font(fLobbySmall);
        scrDrawTextSquareOutline(ui_x, ui_y-80, "By: "+creator_name, text_col, outline_col, 1, fa_center, fa_top);
        
        // Difficulty
        scrDrawTextSquareOutline(ui_x, ui_y-60, "difficulty", text_col, outline_col, 1, fa_center, fa_top);
        draw_sprite(sprAlexStageDifficultyBar, 0, ui_x-20, ui_y-45);
        draw_sprite_part(sprAlexStageDifficultyBar, 1, 0, 0, 40*ui_difficulty_length, 8, ui_x-20, ui_y-45);
    } else {
        // Green tick
        draw_set_font(fLobbySmall);
        draw_sprite(sprAlexLobbyStageDoorCleared, 0, ui_x-16, ui_y-53);
        var _string = ": " + string(beaten_levels) + "/" + string(level_amnt);
        scrDrawTextSquareOutline(ui_x-4, ui_y-45, _string, text_col, outline_col, 1, fa_left, fa_bottom);
    }
    
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the arrow

if(colliding &amp;&amp; active)
    draw_sprite(sprAlexPressUpArrow, arrow_image_index, arrow_x, arrow_y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

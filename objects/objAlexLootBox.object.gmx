<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAlexLootBox</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init vars

// Change these
hat_id = -1;
pet_id = -1;
min_secret_amnt = 1;

// General vars
colliding = false;
collected = false;
locked = true;

// Drawing related
timer = x/4;
draw_x = x;
draw_y = y;
arrow_x = x;
arrow_y = y;
arrow_image_index = 0;
lock_angle = 0;
lock_shake_amnt = 20;
lock_shake_limiter = 0;
halo_angle = 0;
halo_spin_spd = 1;
halo_alpha = .5;
halo_scale = .4;
halo_add_scale = .1;
halfs_distance = 0;
halfs_alpha = 1;

// Shader related
shader = sRainbowAura;
shader_timer = random(100);
u_time = shader_get_uniform(shader, "u_time");
u_visibility = shader_get_uniform(shader, "u_visibility");
u_resolution = shader_get_uniform(shader, "u_resolution");
shader_vis = 1;
shader_res[0] = sprite_width;
shader_res[1] = sprite_height;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Arrow above kid's head

arrow_image_index += .3;

var p = objAlexLobbyPlayer;
if(colliding &amp;&amp; instance_exists(p)) {
    arrow_x = p.x;
    arrow_y = p.y - 16;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Manipulate values &amp; check for player

if(place_meeting(x, y+16, objAlexLobbyPlayer) &amp;&amp; !collected) {
    colliding = true;
    
    // Check if the player collected the reward
    if(scrButtonCheckPressed(global.upButton)) {
        if(!locked) {
            collected = true;
            alarm[0] = 50;
            
            var preview = instance_create(x, y, objAlexCosmeticPreviewFromBox);            
            if(hat_id != -1) {
                global.playerHat[hat_id] = true;
                preview.hat_id = hat_id;
            }
            if(pet_id != -1) {
                global.playerPet[pet_id] = true;
                preview.pet_id = pet_id;
            }
            
            repeat(20) {
                instance_create(draw_x, draw_y, objAlexLootBoxStarPart);
            }
            audio_play_sound(sndAlexLootBoxOpen, 0, false);
        } else {
            lock_shake_limiter = lock_shake_amnt;
            audio_play_sound(sndAlexLootBoxLocked, 0, false);
        }
    }
} else {
    colliding = false;
}

timer++;

if(!collected) {
    draw_y = ystart + dsin(timer*2)*8;
} else {
    halo_spin_spd += .5;
    halo_alpha = max(halo_alpha - .05, 0);
    halo_scale = max(halo_alpha - .02, 0);
    halfs_distance = lerp(halfs_distance, 24, .05);
    halfs_alpha = max(halfs_alpha - .05, 0);
}

halo_add_scale = dsin(timer)*.1;
lock_shake_limiter = max(lock_shake_limiter-1, 0);
lock_angle = dsin(timer*40)*lock_shake_limiter;
shader_vis = abs(dsin(timer))
halo_angle += halo_spin_spd;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if the box has been collected

if(hat_id != -1) {
    if(global.playerHat[hat_id]) {
        instance_destroy();
    }
}

if(pet_id != -1) {
    if(global.playerPet[pet_id]) {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Find out how many secrets are collected

if(global.totalSecretsFound &gt;= min_secret_amnt)
    locked = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Assign the sprite's dimensions to the res uniform

shader_res[0] = sprite_width;
shader_res[1] = sprite_height;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw halo if unlocked

if(!locked) {
    var halo_scale1 = halo_scale + halo_add_scale;
    var halo_scale2 = halo_scale - halo_add_scale;
    
    draw_sprite_ext(sprAlexSecretHalo, 0, draw_x, draw_y, halo_scale1, halo_scale1, halo_angle, -1, halo_alpha);
    draw_sprite_ext(sprAlexSecretHalo, 0, draw_x, draw_y, halo_scale2, halo_scale2, -halo_angle, -1, halo_alpha);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw box &amp; lock

if(locked) {
    shader_timer += 0.05;
    
    // Draw box
    shader_set(shader);
        shader_set_uniform_f(u_time, shader_timer);
        shader_set_uniform_f(u_visibility, shader_vis);
        shader_set_uniform_f_array(u_resolution, shader_res);
        draw_sprite_ext(sprite_index, image_index, draw_x, draw_y, image_xscale, image_yscale, 0, -1, image_alpha);
    shader_reset();
    
    // Draw lock
    draw_sprite_ext(sprAlexLootBoxLock, 0, draw_x, draw_y, 1, 1, lock_angle, -1, image_alpha);
} else {
    if(!collected) {
        draw_sprite_ext(sprite_index, image_index, draw_x, draw_y, image_xscale, image_yscale, 0, -1, image_alpha);
    } else {
        draw_sprite_ext(sprAlexLootBoxUpperHalf, 0, draw_x, draw_y-halfs_distance, image_xscale, image_yscale, 0, -1, halfs_alpha);
        draw_sprite_ext(sprAlexLootBoxBottomHalf, 0, draw_x, draw_y+halfs_distance, image_xscale, image_yscale, 0, -1, halfs_alpha);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the required secret amount

var text_col = $e8fff5;
var outline_col = $2e1814;

draw_set_font(fLobbySmall);
draw_set_halign(fa_left);
draw_set_valign(fa_middle);

if(locked) {
    draw_sprite(sprAlexStageSecretIcon, 0, draw_x-16, draw_y-32);
    scrDrawTextOutline(draw_x-2, draw_y-32, "x  "+string(min_secret_amnt), text_col, outline_col);
} else if(!collected) {
    draw_set_halign(fa_center);
    scrDrawTextOutline(draw_x, draw_y-32, "COLLECT ME!", text_col, outline_col);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the arrow

if(colliding &amp;&amp; !collected)
    draw_sprite(sprAlexPressUpArrow, arrow_image_index, arrow_x, arrow_y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize variables

// Core variables
timer = 0;
select_index = 1;
index_selected = false;
select_string[0] = "Options";
select_string[1] = "Play Game";
select_string[2] = "Quit Game";
intro_length = 60;
can_interact = false;
quiting_game = false;

// Visual variables
logo_obj = instance_create(400, 304, objAlexMenuGameLogo);
logo_new_y_pos = 200;

overlay_alpha = 1;
overlay_color = c_white;

// If we came back from pause
// then make overlay black and
// reset the global.
if(global.skipGameIntro) {
    overlay_color = c_black;
    global.skipGameIntro = false;
    scrSaveConfig();
}

option_alpha = 0;
option_x = room_width/2;
option_y_start = 400;
option_y_final = 450;
option_y = option_y_start;
option_start_sep = 100;
option_final_sep = 200;
option_sep = option_start_sep;

text_selected_col = $e8e0df; // Greyish white
unselected_text_col1 = $ceb85a; // Sky blue
unselected_text_col2 = $702a9c; // Redish fuchsia
unselected_text_col = unselected_text_col1;
text_font = fMenuLobby12;
text_ease_length = 20;
text_ease_timer = 0;
select_string_scale = 1;
for(var i=0; i&lt;3; i++) {
    select_string_color[i] = unselected_text_col;
}

text_box_col = $2e1814; // Night blue black
text_box_h_padding = 20;
text_box_v_padding = 10;
text_box_curve = 32;
draw_set_font(text_font);
text_box_width = string_width(select_string[1]) + text_box_h_padding*2;
text_box_height = string_height(select_string[1]) + text_box_v_padding*2;
text_box_outline_size = 0;
text_box_max_outline_size = 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Switch menu

switch(select_index) {
    // Options
    case 0:
        global.menuSelectPrev[1] = 0;
        instance_create(0, 0, objNewOptionsMenu);
        break;
        
    // Save files
    case 1:
        instance_create(0, 0, objNewSaveFileMenu);
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Functionality

var H = (scrButtonCheckPressed(global.menuRightButton) - scrButtonCheckPressed(global.menuLeftButton));
var _accept_press = scrButtonCheckPressed(global.menuAcceptButton) || keyboard_check_pressed(vk_enter);

timer++;

if(timer == intro_length) {
    can_interact = true;
}

if(can_interact) {
    if(H != 0) {
        select_index += H;
        if(select_index &lt; 0)
            select_index = 2;
        if(select_index &gt; 2)
            select_index = 0;
            
        audio_play_sound(sndAlexMenuSwitchOption, 0, false);
        text_box_outline_size = 0;
        text_ease_timer = 0;
    }
    
    if(_accept_press) {
        can_interact = false;
        alarm[0] = 20;
        
        if(select_index == 2) {
            quiting_game = true;
            audio_sound_gain(global.currentMusic, 0, 1000);
            audio_play_sound(sndAlexExitGame, 0, false);
        } else {
            audio_play_sound(sndAlexPauseTopOption, 0, false);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Visuals

// Alpha
if(timer &gt; intro_length) {
    if(quiting_game) {
        overlay_color = c_black
        overlay_alpha += .015;
        if(overlay_alpha &gt;= 1.4) {
            game_end();
        }
    } else {
        if(can_interact)
            image_alpha = min(image_alpha + 0.075, 1);
        else
            image_alpha = max(image_alpha - 0.075, 0);
    }
}

logo_obj.image_alpha = image_alpha;

// Overlay
if(timer &lt;= intro_length) {
    overlay_alpha = max(overlay_alpha - 0.05, 0);
    
    if(timer &gt; intro_length/2) {
        logo_obj.y = scrAlexEaseOutSine(timer - (intro_length/2), logo_obj.ystart, logo_new_y_pos, intro_length/2);
        option_alpha = scrAlexEaseOutSine(timer - (intro_length/2), 0, 1, intro_length/2);
        option_sep = scrAlexEaseOutSine(timer - (intro_length/2), option_start_sep, option_final_sep, intro_length/2);
        option_y = scrAlexEaseOutSine(timer - (intro_length/2), option_y_start, option_y_final, intro_length/2);
    }
    
    if(timer == intro_length) {
        logo_obj.y = logo_new_y_pos;
        option_alpha = 1;
        option_sep = option_final_sep;
        option_y = option_y_final;
    }
}

// Pulse animation for text and outline
if(text_ease_timer &lt; text_ease_length) {
    text_ease_timer++;
    
    text_box_outline_size = scrAlexEaseOutElastic(text_ease_timer, -10, text_box_max_outline_size, text_ease_length);
    select_string_scale = scrAlexEaseOutElastic(text_ease_timer, .5, 1, text_ease_length);
}

// Colors
var _amnt = abs(dsin(timer*2));
unselected_text_col = merge_colour(unselected_text_col1, unselected_text_col2, _amnt);

for(var i=0; i&lt;3; i++) {
    if(i == select_index)
        select_string_color[i] = text_selected_col;
    else 
        select_string_color[i] = unselected_text_col;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw buttons


// Draw button boxes
draw_set_alpha(option_alpha * image_alpha);
var _button_x;
var _half_width = text_box_width/2;
var _half_height = text_box_height/2;
var _outline_half_width = _half_width + text_box_outline_size;
var _outline_half_height = _half_height + text_box_outline_size;
for(var i=0; i&lt;3; i++) {
    _button_x = (i-1) * option_sep + option_x;
    if(i == select_index) {
        draw_set_colour(unselected_text_col);
        draw_roundrect_ext(_button_x - _outline_half_width, option_y - _outline_half_height, 
                           _button_x + _outline_half_width, option_y + _outline_half_height,
                           text_box_curve, text_box_curve, false);
    }
    draw_set_colour(text_box_col);
    draw_roundrect_ext(_button_x - _half_width, option_y - _half_height, 
                       _button_x + _half_width, option_y + _half_height,
                       text_box_curve, text_box_curve, false);
}


// Draw text
draw_set_font(text_font)
draw_set_halign(fa_center)
draw_set_valign(fa_middle)
var _text_x;
var _text_y = option_y + 4;
for(var i=0; i&lt;3; i++) {
    _text_x = (i-1) * option_sep + option_x;
    if(i == select_index) {
        draw_set_colour(text_selected_col);
        draw_text_transformed(_text_x, _text_y, select_string[i], 
                              select_string_scale, select_string_scale, 0);
    } else {
        draw_set_colour(unselected_text_col);
        draw_text(_text_x, _text_y, select_string[i]);
    }
}


// Draw overlay
draw_set_alpha(overlay_alpha);
draw_set_colour(overlay_color);
draw_rectangle(-1, -1, room_width, room_height, false);

draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init vars

image_speed = 0.3;
audio_play_sound(sndAlexDialogStart, 0, false);

// Add text into this list
dialog_list = ds_list_create();

npc_name = "NPC Name goes here";
letter_sfx = sndAlexDialogSoundDefault;
confirm_button = global.jumpButton;
dialog_index = -1;
timer = 0;
current_letter = 0;
displayed_text = "";
box_center_x = display_get_gui_width()/2;
box_center_y = 100;
box_width = 0;
box_height = 0;
box_target_width = 500;
box_target_height = 150;
box_add_bottom_height = 0; // Makes sure the text fits
box_alpha = 0;
box_color = $2e1814;
box_animation_length = 20;
box_animation_timer = 0;
text_padding = 20;
text_sep = -1;
text_width = box_target_width - (text_padding*2);
text_font = fLobbySmall24;
text_color = $e8fff5;
npc_name_color = $b8a44f;
can_talk = false;
talking = false;
end_reached = false;
letter_delay = 2;
letter_sfx_delay = 4;
delay_between_dialogs = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// destroy the dialog list

ds_list_destroy(dialog_list);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move to the next paragraph

talking = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// logic

var _list_size = ds_list_size(dialog_list);
var _current_dialog = dialog_list[| dialog_index];

end_reached = dialog_index &gt;= _list_size;
timer++;
    
if(can_talk) {
    // Dialog
    if(scrButtonCheckPressed(confirm_button) &amp;&amp; !end_reached &amp;&amp; !alarm[0]) {
        current_letter = 0;
        
        if(!talking) {
            alarm[0] = delay_between_dialogs;
            displayed_text = "";
            dialog_index++;
            audio_play_sound(sndAlexDialogNext, 0, false);
        } else {
            talking = false;
            displayed_text = _current_dialog;            
        }
    }
    
    // Resize the box vertically based on the dialog height
    draw_set_font(text_font);
    var _text_height = string_height_ext(displayed_text, text_sep, text_width);
    if(_text_height &gt; box_target_height - text_padding*3) {
        box_add_bottom_height = _text_height - (box_target_height - text_padding*3);
    } else {
        box_add_bottom_height = 0;
    }
} else {
    // Dialog box intro visuals
    if(box_animation_timer &lt; box_animation_length) {
        box_animation_timer++;
        
        box_alpha = scrAlexEaseOutSine(box_animation_timer, 0, 1, box_animation_length);
        box_width = scrAlexEaseOutSine(box_animation_timer, 0, box_target_width, box_animation_length);
        box_height = scrAlexEaseOutSine(box_animation_timer, 0, box_target_height, box_animation_length);
    } else {
        can_talk = true;
        talking = true;
        dialog_index++;
    }
}

end_reached = dialog_index &gt;= _list_size;

if(!end_reached) {
    if(talking) {
        // Add letters to the dialog
        _current_dialog = dialog_list[| dialog_index];
        var _text_length = string_length(_current_dialog);
        if(current_letter &lt; _text_length) {
            if(timer mod letter_delay == 0) {
                current_letter++;
                displayed_text += string_char_at(_current_dialog, current_letter);
            }
            if(timer mod letter_sfx_delay == 0) {
                audio_stop_sound(letter_sfx);
                audio_play_sound(letter_sfx, 0, false);
            }
        } else {
            talking = false;
        }
    }
} else {
    // Remove the box and destroy the object
    if(box_animation_timer &gt; 0) {
        if(box_animation_timer == box_animation_length)
            audio_play_sound(sndAlexDialogEnd, 0, false);
        
        box_animation_timer--;
        
        box_alpha = scrAlexEaseOutSine(box_animation_timer, 0, 1, box_animation_length);
        box_width = scrAlexEaseOutSine(box_animation_timer, 0, box_target_width, box_animation_length);
        box_height = scrAlexEaseOutSine(box_animation_timer, 0, box_target_height, box_animation_length);
    } else {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw dialog box

// Box
var _half_width = box_width / 2;
var _half_height = box_height / 2;
var _upper_x = box_center_x - _half_width;
var _upper_y = box_center_y - _half_height;
var _lower_x = box_center_x + _half_width;
var _lower_y = box_center_y + _half_height + box_add_bottom_height;
draw_set_colour(box_color);
draw_set_alpha(box_alpha);
draw_roundrect_ext(_upper_x, _upper_y, _lower_x, _lower_y, 30, 30, false);
draw_set_alpha(1);

if(can_talk &amp;&amp; !end_reached) {
    // NPC Name
    draw_set_font(text_font);
    draw_set_colour(npc_name_color);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    
    draw_text(_upper_x + text_padding, _upper_y + text_padding - 4, npc_name)
    
    // Dialog
    draw_set_colour(text_color);
    draw_text_ext(_upper_x + text_padding, _upper_y + text_padding*2 + 4, displayed_text, text_sep, text_width);
    
    // Next icon
    if(!talking &amp;&amp; !alarm[0])
        draw_sprite(sprAlexNPCDialogNextIcon, timer/12, _lower_x - 16, _lower_y - 16);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

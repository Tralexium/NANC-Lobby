<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>select = global.menuSelectPrev[1];

canSelect = false; // If the player can select an option
switchMenu = false; // If it should switch to keyboard or controller settings
goBack = false; // Go back the title screen
timer = 0;
xSelector = 100;
ySelector = 60;
xSeperation = 800-200;
ySeperation = 70;
shadowCol = make_colour_rgb(30, 170, 210);
volTimer = 0;
volArrowAlpha = 0;
volArrowWiggleX = 0;

optionsNum = 7; //sets number of separate options available

if (!global.controllerEnabled)  //remove controller settings menu if controllers are disabled
{
    optionsNum -= 1;
    ySelector += 32;
}

drawAlpha = 0; // The alpha of all drawn elements
arrowAlpha = 0; // Select arrow alpha
arrowYScale = 1; // Scale of the arrow
arrowPosX = xSelector; // X position of the arrow
arrowPosY = ySelector+(ySeperation*select); // Y position of the arrow

strSelect[0] = "Music";
strSelect[1] = "Volume Level";
strSelect[2] = "Screen Mode";
strSelect[3] = "Smoothing Mode";
strSelect[4] = "Vsync";
strSelect[5] = "Set Keyboard Controls";
strSelect[6] = "Controller Options";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Option holders visuals

holderScale = 1;
holderAlpha = 0;
holderMaxAlpha = .4;
holderAddX = 40;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Switch to a different menu
if(goBack) // Go back to main menu
{
    with(objTitleMenu){
        canSelect = true;
        nightMode = false;
    }
    instance_destroy();
}
else if (select == 5)   //go to the keyboard controls menu
{
    global.menuSelectPrev[1] = select;
    instance_create(x,y,objKeyboardControlsMenu);
    instance_destroy();
}
else if (select == 6)   //go to the controller options menu
{
    global.menuSelectPrev[1] = select;
    instance_create(x,y,objControllerMenu);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(drawAlpha &lt; 1 &amp;&amp; !switchMenu){
    drawAlpha += .05;
    if(drawAlpha &gt;= 1){
        canSelect = true;
    }
}

if(switchMenu &amp;&amp; drawAlpha &gt; 0){
    canSelect = false;
    drawAlpha -= .05;
    if(arrowYScale &gt; 0)arrowYScale -= .1;
}

if(canSelect){
    // Option holder draw stuff
    holderAddX = lerp(holderAddX, 0, .1);
    holderAlpha = lerp(holderAlpha, holderMaxAlpha, .05);
}
else if(switchMenu)
{
    holderScale = lerp(holderScale, 0, .1);
    holderAlpha = lerp(holderAlpha, 0, .1);
}

if(canSelect){
    timer++;

    // Arrow related draw vars
    if(arrowAlpha &lt; 1){arrowAlpha += .05;}
    arrowPosX = xSelector-24 + (-1 * abs(dsin(timer*4)*10));
    arrowPosY = lerp(arrowPosY, ySelector+(ySeperation*select), .2);
    volArrowWiggleX = abs(dsin(timer*4)*10);

    if (scrButtonCheckPressed(global.menuUpButton))
    {
        audio_play_sound(sndSelectArrow,0,false);
        select -= 1;
        if(select &lt; 0)
            select = optionsNum-1;
    }
    else if (scrButtonCheckPressed(global.menuDownButton))
    {
        audio_play_sound(sndSelectArrow,0,false);
        select += 1;
        if(select &gt; optionsNum-1)
            select = 0;
    }
    else if (scrButtonCheckPressed(global.menuBackButton) || keyboard_check_pressed(vk_escape))
    {
        audio_play_sound(sndSaveOption, 0, false);
    
        //save changes and go back
        scrSaveConfig();
        alarm[0] = 60;
        global.menuSelectPrev[1] = 0;
        switchMenu = true;
        goBack = true;
        canSelect = false;
        exit;
    }
    else if (scrButtonCheckPressed(global.menuAcceptButton) || keyboard_check_pressed(vk_enter))
    {
        if(select != 1 &amp;&amp; select != 5 &amp;&amp; select != 6) audio_play_sound(sndInputNewKey, 0, false);
        if(select == 5 || select == 6) audio_play_sound(sndConfirmAction, 0, false);
    
        if (select == 0)    //toggle mute music
        {
            scrToggleMusic();
        }
        else if (select == 2)   //toggle fullscreen
        {
            global.fullscreenMode = !global.fullscreenMode;
            
            window_set_fullscreen(global.fullscreenMode);
        }
        else if (select == 3)   //toggle smoothing mode
        {
            global.smoothingMode = !global.smoothingMode;
        }
        else if (select == 4)   //toggle vsync mode
        {
            global.vsyncMode = !global.vsyncMode;
            
            scrSetVsync();
        }else if (select == 5 || select == 6)  //play a fade animation and go to either the controller or keyboard menu
        {
            scrSaveConfig();    //save changes
            alarm[0] = 60;
            switchMenu = true;
            canSelect = false;
            exit;
        }
    }
    
    
    if (select == 1)
    {
        volArrowAlpha = lerp(volArrowAlpha, 1, .2);
        
        var changeV = false;
        if (scrButtonCheck(global.menuRightButton))  //raise volume
        {
            volTimer++;
            if (global.volumeLevel &lt; 100){
                if(volTimer == 1) changeV = true;
                else if(volTimer mod 10 == 0 &amp;&amp; volTimer &lt;= 50) changeV = true;
                else if(volTimer &gt; 50) changeV = true;
                
                if(changeV)
                {
                  global.volumeLevel += 1;
                  if(!audio_is_playing(sndVolumeChange)){audio_play_sound(sndVolumeChange, 0, false);}
                }
            }            
            
            audio_master_gain(global.volumeLevel/100);  //set master gain
        }
        else if (scrButtonCheck(global.menuLeftButton))  //lower volume
        {
            volTimer++;
            if (global.volumeLevel &gt; 0){
                if(volTimer == 1) changeV = true;
                else if(volTimer mod 10 == 0 &amp;&amp; volTimer &lt;= 50) changeV = true;
                else if(volTimer &gt; 50) changeV = true;
                
                if(changeV)
                {
                  global.volumeLevel -= 1;
                  if(!audio_is_playing(sndVolumeChange)){audio_play_sound(sndVolumeChange, 0, false);}
                }
            }
                
            audio_master_gain(global.volumeLevel/100);  //set master gain
        }
        else
        {
          volTimer = 0;
        }
    }
    else
    {
      volArrowAlpha = lerp(volArrowAlpha, 0, .2);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
draw_set_color(c_white);
draw_set_font(fAlex30);
draw_set_halign(fa_left);
draw_set_valign(fa_middle);

var outlineSize = 3;

for(var i = 0; i &lt; optionsNum; i++)
{
    if(i mod 2 == 0)
    {
      draw_sprite_ext(sprAlexTitleOptionHolder, 0, 400+holderAddX, ySelector+(ySeperation*i)+4, 1, holderScale, 0, -1, holderAlpha);
    }
    else
    {
      
      draw_sprite_ext(sprAlexTitleOptionHolder, 0, 400-holderAddX, ySelector+(ySeperation*i)+4, 1, holderScale, 0, -1, holderAlpha);
    }
    scrAlexDrawTextShadow(strSelect[i],xSelector,ySelector+(ySeperation*i),0,4,c_white,shadowCol, drawAlpha, drawAlpha);
}

draw_set_halign(fa_right);

if (global.muteMusic)
    scrAlexDrawTextShadow("Off",xSelector+xSeperation,ySelector,0,4,c_white,shadowCol, drawAlpha, drawAlpha);
else
    scrAlexDrawTextShadow("On",xSelector+xSeperation,ySelector,0,4,c_white,shadowCol, drawAlpha, drawAlpha);

scrAlexDrawTextShadow(string(global.volumeLevel) + "%",xSelector+xSeperation,ySelector+ySeperation,0,4,c_white,shadowCol, drawAlpha, drawAlpha);
    
if (global.fullscreenMode)
    //scrAlexDrawTextShadow("Fullscreen",xSelector+xSeperation,ySelector+(ySeperation*2),0,4,c_white,shadowCol, drawAlpha, drawAlpha);
else
    //scrAlexDrawTextShadow("Windowed",xSelector+xSeperation,ySelector+(ySeperation*2),0,4,c_white,shadowCol, drawAlpha, drawAlpha);

if (global.smoothingMode)
    //scrAlexDrawTextShadow("On",xSelector+xSeperation,ySelector+(ySeperation*3),0,4,c_white,shadowCol, drawAlpha, drawAlpha);
else
    //scrAlexDrawTextShadow("Off",xSelector+xSeperation,ySelector+(ySeperation*3),0,4,c_white,shadowCol, drawAlpha, drawAlpha);

if (global.vsyncMode)
    //scrAlexDrawTextShadow("On",xSelector+xSeperation,ySelector+(ySeperation*4),0,4,c_white,shadowCol, drawAlpha, drawAlpha);
else
    //scrAlexDrawTextShadow("Off",xSelector+xSeperation,ySelector+(ySeperation*4),0,4,c_white,shadowCol, drawAlpha, drawAlpha);

draw_sprite_ext(sprSelectArrow, 0, arrowPosX, arrowPosY, 1, arrowYScale, 0, -1, arrowAlpha);
draw_sprite_ext(sprSelectArrow, 0, 600-volArrowWiggleX, ySelector+ySeperation, -0.5, 0.5, 0, -1, volArrowAlpha*drawAlpha);
draw_sprite_ext(sprSelectArrow, 0, 720+volArrowWiggleX, ySelector+ySeperation, 0.5, 0.5, 0, -1, volArrowAlpha*drawAlpha);

scrDrawButtonInfo();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAlexEyeSentryClosed</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-202</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init vars

image_speed = 0.25;
image_xscale = 2;
image_yscale = 2;


t = 0;
active = false;
open = false;
spotted = false;
sleep_time = 150;
open_time = 80;


look_t = 0;
look_dur = 20;
look_times = 3;
look_lerp_spd = 0.15;
look_angle = random(360);

charge_t = 0;
charge_dur = 40;
charge_spotlight_alpha = 0;
charge_spotlight_scale = 0;

pupil_radius = 24;
pupil_x = x;
pupil_y = y;
pupil_sprite = sprAlexEyeSentryPupil;
pupil_target_x = x;
pupil_target_y = y;
spotlight_radius = 250;
spotlight_alpha = 0;
spotlight_x = x;
spotlight_y = y;
spotlight_target_x = x;
spotlight_target_y = y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Logic &amp; Animations

if(active &amp;&amp; instance_exists(objPlayer)) {
    t++;
    
    // Wake the turret
    if(t == sleep_time) {
        sprite_index = sprAlexEyeSentryOpening;
        image_index = 0;
        
        audio_play_sound(sndAlexEyeSentryOpen, 0, false);
    }
    
    // Look around for moving player
    if(open) {        
        if(objPlayer.sprite_index != sprPlayerIdle)
            spotted = true;
        
        if(spotted) {
            look_angle = point_direction(x, y, objPlayer.x, objPlayer.y);
            pupil_sprite = sprAlexEyeSentryPupilAlerted;
            
            pupil_target_x = x + lengthdir_x(pupil_radius, look_angle);
            pupil_target_y = y + lengthdir_y(pupil_radius, look_angle);
            
            spotlight_target_x = objPlayer.x;
            spotlight_target_y = objPlayer.y;
            
            charge_t++;
            
            var _val = charge_t / charge_dur;
            charge_spotlight_alpha = scrAlexEaseInSine(_val, 0, 1, 1);
            charge_spotlight_scale = scrAlexEaseInSine(_val, 0, 1, 1);
            
            if(charge_t == 1) {
                event_user(0);
                audio_play_sound(sndAlexEyeSentrySpotted, 0, false);
            }
            
            if(charge_t == charge_dur) {
                  scrKillPlayer();
                  scrAlexMakeParticleExt(spotlight_x, spotlight_y, 10, sprAlexEyeSentrySpotlight, 0, image_speed, 0, 0, 0, 0, -1, -1, bm_add, false, true, 0, depth+1, false);
                  instance_create(0, 0, objAlexScreenPulseEffect);
                  pupil_sprite = sprAlexEyeSentryPupil;
            }
        } else if(look_t mod look_dur == 0 &amp;&amp; look_t &lt; open_time) {
            if(look_t &lt; look_times*look_dur) {
                look_angle = random(360);
                
                pupil_target_x = x + lengthdir_x(pupil_radius, look_angle);
                pupil_target_y = y + lengthdir_y(pupil_radius, look_angle);
                
                spotlight_target_x = x + lengthdir_x(spotlight_radius, look_angle);
                spotlight_target_y = y + lengthdir_y(spotlight_radius, look_angle);
                
                audio_sound_pitch(sndAlexEyeSentryLook, random_range(1, 1.3));
                audio_play_sound(sndAlexEyeSentryLook, 0, false);
            } else {
                pupil_target_x = x;
                pupil_target_y = y;
                spotlight_target_x = x;
                spotlight_target_y = y;
                
                audio_play_sound(sndAlexEyeSentryResetPupil, 0, false);
            }
        } else if(look_t == open_time) {
            sprite_index = sprAlexEyeSentryClosing;
            image_index = 0;
        
            audio_play_sound(sndAlexEyeSentryClose, 0, false);
            
            open = false;
        }
        
        look_t++;
        spotlight_alpha = min(spotlight_alpha + 0.05, 1);
    } else {
        spotlight_alpha = max(spotlight_alpha - 0.05, 0);
    }
} else {
    pupil_target_x = x;
    pupil_target_y = y;
    spotlight_target_x = x;
    spotlight_target_y = y;
    charge_spotlight_alpha = 0;
    charge_spotlight_scale = 0;
    spotlight_alpha = max(spotlight_alpha - 0.05, 0);
    
    if(open &amp;&amp; round(pupil_target_x) == x &amp;&amp; round(pupil_target_y) == y) {
        sprite_index = sprAlexEyeSentryClosing;
        image_index = 0;
        
        open = false;
    }
}

// Direct the pupil and spotlight
pupil_x = lerp(pupil_x, pupil_target_x, look_lerp_spd);
pupil_y = lerp(pupil_y, pupil_target_y, look_lerp_spd);
spotlight_x = lerp(spotlight_x, spotlight_target_x, look_lerp_spd);
spotlight_y = lerp(spotlight_y, spotlight_target_y, look_lerp_spd);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Make scaled up part effect

var _part = scrAlexMakeParticleExt(x, y, 25, sprite_index, 0, image_speed, 0, 0, 0, 0, -1, -1, bm_add, false, true, 0, depth+1, false);
    _part.image_xscale = 2;
    _part.image_yscale = 2;
    _part.add_scale = 0.07;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// check if just opened or closed

if(sprite_index == sprAlexEyeSentryOpening) {
    sprite_index = sprAlexEyeSentryOpen;
    image_index = 0;
    open = true;
    event_user(0);
}

if(sprite_index == sprAlexEyeSentryClosing) {
    sprite_index = sprAlexEyeSentryClosed;
    image_index = 0;
    t = 0;
    look_t = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the eye &amp; spotlight

draw_self();

if(open) {
    draw_sprite_ext(pupil_sprite, image_index, pupil_x, pupil_y, 2, 2, 0, -1, 1);
}

draw_set_blend_mode(bm_add);
draw_sprite_ext(sprAlexEyeSentrySpotlight, 0, spotlight_x, spotlight_y, 1, 1, 0, -1, spotlight_alpha);
var _scale = charge_spotlight_scale;
draw_sprite_ext(sprAlexEyeSentrySpotlight, 0, spotlight_x, spotlight_y, _scale, _scale, 0, -1, charge_spotlight_alpha);
draw_set_blend_mode(bm_normal);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

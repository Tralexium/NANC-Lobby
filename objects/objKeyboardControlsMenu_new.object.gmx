<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>select = 0;

canSelect = false; // If the player can select an option
backToSettings = false;
timer = 0;
xSelector = 100;
ySelector = 60;
xSeperation = 800-200;
ySeperation = 50;

drawAlpha = 0; // The alpha of all drawn elements
arrowAlpha = 0; // Select arrow alpha
arrowYScale = 1; // Scale of the arrow
arrowPosX = xSelector; // X position of the arrow
arrowPosY = ySelector+(ySeperation*select); // Y position of the arrow

settingKey = false;     //sets whether or not a key is getting set
resetPrompt = false;    //shows the message that controls were reset

strSelect[0] = "Left Button";
strSelect[1] = "Right Button";
strSelect[2] = "Up Button";
strSelect[3] = "Down Button";
strSelect[4] = "Jump Button";
strSelect[5] = "Shoot Button";
strSelect[6] = "Restart Button";
strSelect[7] = "Skip Button";
strSelect[8] = "Pause Button";
strSelect[9] = "Reset Controls";

//get current controls
strKey[0] = scrGetKeybind(global.leftButton[0]);
strKey[1] = scrGetKeybind(global.rightButton[0]);
strKey[2] = scrGetKeybind(global.upButton[0]);
strKey[3] = scrGetKeybind(global.downButton[0]);
strKey[4] = scrGetKeybind(global.jumpButton[0]);
strKey[5] = scrGetKeybind(global.shootButton[0]);
strKey[6] = scrGetKeybind(global.restartButton[0]);
strKey[7] = scrGetKeybind(global.skipButton[0]);
strKey[8] = scrGetKeybind(global.pauseButton[0]);
strKey[9] = "";

playerIndex = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Option holders visuals

holderScale = .6;
holderAlpha = 0;
holderMaxAlpha = .4;
holderAddX = 40;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go back to settings
instance_create(0,0, objOptionsMenu);
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>resetPrompt = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(drawAlpha &lt; 1 &amp;&amp; !backToSettings){
    drawAlpha += .05;
    if(drawAlpha &gt;= 1){
        canSelect = true;
    }
}

if(backToSettings &amp;&amp; drawAlpha &gt; 0){
    canSelect = false;
    drawAlpha -= .05;
    if(arrowYScale &gt; 0)arrowYScale -= .1;
}

if(canSelect){
    // Option holder draw stuff
    holderAddX = lerp(holderAddX, 0, .1);
    holderAlpha = lerp(holderAlpha, holderMaxAlpha, .05);
}
else if(backToSettings)
{
    holderScale = lerp(holderScale, 0, .1);
    holderAlpha = lerp(holderAlpha, 0, .1);
}

if(canSelect)
{

if (!settingKey)
{
    timer++;
    
    // Arrow related draw vars
    if(arrowAlpha &lt; 1){arrowAlpha += .05;}
    arrowPosX = xSelector-24 + (-1 * abs(dsin(timer*2)*16));
    arrowPosY = lerp(arrowPosY, ySelector+(ySeperation*select), .2);

    if (scrButtonCheckPressed(global.menuUpButton))
    {
        audio_play_sound(sndSelectArrow,0,false);
        select -= 1;
        if(select &lt; 0)
            select = 9;
    }
    else if (scrButtonCheckPressed(global.menuDownButton))
    {
        audio_play_sound(sndSelectArrow,0,false);
        select += 1;
        if(select &gt; 9)
            select = 0;
    }
    else if (scrButtonCheckPressed(global.menuBackButton) || keyboard_check_pressed(vk_escape))
    {
        audio_play_sound(sndSaveOption, 0, false);
    
        //save changes and go back
        scrSaveConfig();
        alarm[1] = 60;
        //global.menuSelectPrev[1] = 0;
        backToSettings = true;
        canSelect = false;
        exit;
    }
    else if (scrButtonCheckPressed(global.menuAcceptButton) || keyboard_check_pressed(vk_enter))
    {
        audio_play_sound(sndAwaitingKey, 0, false);
    
        if (select != 9)
        {
            settingKey = true;
        }
        else
        {
            //default controls
            global.leftButton[0] = vk_left;
            global.rightButton[0] = vk_right;
            global.upButton[0] = vk_up;
            global.downButton[0] = vk_down;
            global.jumpButton[0] = vk_shift;
            global.shootButton[0] = ord("Z");
            global.restartButton[0] = ord("R");
            global.skipButton[0] = ord("S");
            global.suicideButton[0] = ord("Q");
            global.pauseButton[0] = vk_escape;
            
            resetPrompt = true;
            alarm[0] = 60;
        }
    }
}
else
{
    while (keyboard_check_pressed(vk_anykey))  //check if a key is being pressed and if it is, store that key
    {
        audio_play_sound(sndInputNewKey, 0, false);
    
        var keyChange;
        
        keyChange = keyboard_key;
        
        // Check for forbidden keys
        /*
        if (scrCheckForbiddenKey(keyChange))
        {
            audio_play_sound(sndGeneralError, 0, false);
            break;
        }
        */
        if (keyChange == 160 || keyChange == 161)   //check if current key pressed is either shift key
            keyChange = 16; //set it to work for both shift keys
        
        if (select == 0) {global.leftButton[0] = keyChange;}
        else if (select == 1) {global.rightButton[0] = keyChange;}
        else if (select == 2) {global.upButton[0] = keyChange;}
        else if (select == 3) {global.downButton[0] = keyChange;}
        else if (select == 4) {global.jumpButton[0] = keyChange;}
        else if (select == 5) {global.shootButton[0] = keyChange;}
        else if (select == 6) {global.restartButton[0] = keyChange;}
        else if (select == 7) {global.skipButton[0] = keyChange;}
        else if (select == 8) {global.pauseButton[0] = keyChange;}
        
        settingKey = false;
        break;
    }
    if (scrAnyControllerButton() != -1)    //check if a controller button was pressed, exit prompt
    {
        audio_play_sound(sndGeneralError, 0, false);
        settingKey = false;
    }
}

}

//get current controls
strKey[0] = scrGetKeybind(global.leftButton[0]);
strKey[1] = scrGetKeybind(global.rightButton[0]);
strKey[2] = scrGetKeybind(global.upButton[0]);
strKey[3] = scrGetKeybind(global.downButton[0]);
strKey[4] = scrGetKeybind(global.jumpButton[0]);
strKey[5] = scrGetKeybind(global.shootButton[0]);
strKey[6] = scrGetKeybind(global.restartButton[0]);
strKey[7] = scrGetKeybind(global.skipButton[0]);
strKey[8] = scrGetKeybind(global.pauseButton[0]);
strKey[9] = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
draw_set_color(c_white);
draw_set_font(fAlex20);
draw_set_halign(fa_left);
draw_set_valign(fa_middle);

var outlineSize = 3;
var shadowCol = make_colour_rgb(30, 170, 210);

for(var i = 0; i &lt; 10; i += 1)
{
    if(i mod 2 == 0)
    {
      draw_sprite_ext(sprAlexTitleOptionHolder, 0, 400+holderAddX, ySelector+(ySeperation*i), 1, holderScale, 0, -1, holderAlpha);
    }
    else
    {
      
      draw_sprite_ext(sprAlexTitleOptionHolder, 0, 400-holderAddX, ySelector+(ySeperation*i), 1, holderScale, 0, -1, holderAlpha);
    }

    draw_set_halign(fa_left);
    scrAlexDrawTextShadow(strSelect[i],xSelector,ySelector+i*ySeperation, 0, 3, c_white, shadowCol, drawAlpha, drawAlpha);
    
    draw_set_halign(fa_right);
    
    if(i == select)
    {
        draw_sprite_ext(sprSelectArrow, 0, arrowPosX, arrowPosY, 1, arrowYScale, 0, -1, arrowAlpha);
        
        if (settingKey) //key prompt
        {
            scrAlexDrawTextShadow("Press the key to set",xSelector+xSeperation,ySelector+i*ySeperation, 0, 3, c_white, shadowCol, drawAlpha, drawAlpha);
        }
    }
    
    if (!settingKey || i != select)    //shows current key
    {
        scrAlexDrawTextShadow(strKey[i],xSelector+xSeperation,ySelector+i*ySeperation, 0, 3, c_white, shadowCol, drawAlpha, drawAlpha);;
    }
    
    if (resetPrompt &amp;&amp; i == 9) //reset controls prompt
    {
        scrAlexDrawTextShadow("Controls reset!",xSelector+xSeperation,ySelector+i*ySeperation, 0, 3, c_white, shadowCol, drawAlpha, drawAlpha);
    }
}

scrDrawButtonInfo();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

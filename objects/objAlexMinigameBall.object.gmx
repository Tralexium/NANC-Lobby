<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAlexMinigameBall</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init vars

gravity = 0.1;
image_speed = 0.3;

active = false;  // Whether it can collide with the player
brightness = 125;
glow_alpha = 0;
glow_t = 0;

collision_spd_mult = 0.5;  // Multiplies player's speed with this value
max_spd = 7;

wall_touched = false;
points_on_destroy = 0;

collision_cooldown_t = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reward points &amp; effects

if(points_on_destroy &gt; 0) {
    global.ballMinigameScore += points_on_destroy;
    
    with(objAlexMinigameTarget) {
        if(other.points_on_destroy == 5)
            blue_glow = 1;
        if(other.points_on_destroy == 10)
            red_glow = 1;  
        if(other.points_on_destroy == 20)
            yellow_glow = 1;  
    }
    
    var _floating_score = instance_create(x, y, objAlexMinigameBallScoreText);
        _floating_score.text_score = points_on_destroy;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collisions

if(!active &amp;&amp; vspeed &gt; 0)
    active = true;

if(collision_cooldown_t &gt; 0) {
    collision_cooldown_t--;
} else {

    // Player / bounce away
    var _player = instance_place(x, y, objPlayer);
    if(_player != noone &amp;&amp; active) {
        var _dir = point_direction(_player.x, _player.y, x, y);
        direction = _dir;
        
        var _spd = speed + (_player.speed * collision_spd_mult);
            _spd = min(_spd, max_spd);
        speed = _spd;
        
        collision_cooldown_t = 2;
    }
    
    
    // Point fields
    var _point_field = instance_place(x, y, objAlexMinigamePointField);
    if(_point_field != noone) {
        points_on_destroy = _point_field.points_rewarded;
        instance_destroy();
    }
    
    // Solids
    if(place_meeting(x, y + vspeed, objBlock)) {
        if(!wall_touched) {
            wall_touched = true;
            alarm[0] = 50;
        }
        
        while(!place_meeting(x, y, objBlock)) {
            y += sign(vspeed);
        }
        
        var _spd = -vspeed * collision_spd_mult;
            _spd = min(_spd, max_spd);
        vspeed = _spd;
        
        collision_cooldown_t = 2;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Visuals

// Brightness
image_blend = make_colour_hsv(0, 0, brightness);
if(active)
    brightness = min(brightness + 2, 255);
else
    brightness = max(brightness - 2, 125);
    
// Image angle
image_angle -= hspeed;

// Glow when touched a solid
if(wall_touched) {
    glow_t++;
    glow_alpha = abs(dsin(glow_t*10));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw

draw_self();

draw_set_blend_mode(bm_add);
draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, glow_alpha);
draw_set_blend_mode(bm_normal);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

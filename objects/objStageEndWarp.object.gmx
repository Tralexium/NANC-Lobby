<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init vars and shader

// Change these
stage_num = -1;
stage_secret[0] = -1;
stage_secret[1] = -1;
stage_secret[2] = -1;
stage_secret[3] = -1;

surf = noone;
surf_size = 256;
middle = surf_size/2;
timer = 0;
part_spawn_freq = 4;
initial_warp_size = 24;
max_warp_size = 48;
warp_size = initial_warp_size;
check_size = warp_size - 4;
collided = false;

anim_timer = 0;
anim_length = 30;
anim_finished = false;

fake_player_x = 0;
fake_player_y = 0;
fake_player_scale = 1;
fake_player_actual_angle = 0;
fake_player_angle = 0;
fake_player_dist = 0;

spark_img_index = 0;
spark_img_spd = 0.4;


shader = sRainbowSpiral;
shader_timer = 0;
shader_timer_spd = 0.003;
u_time = shader_get_uniform(shader, "u_time");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Free surface

surface_free(surf)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn the stage clear UI &amp; destroy self

with(instance_create(0, 0, objStageClearUI)) {
    scrStageClearUIGetCurrentStageInfo(other.stage_num, other.stage_secret[0], other.stage_secret[1], other.stage_secret[2], other.stage_secret[3]);
}

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn particles

timer++;

if(timer mod part_spawn_freq == 0 &amp;&amp; !collided) {
    instance_create(middle, middle, objStageEndWarpPart);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if player has collided &amp; fade out animation

if(instance_exists(objPlayer)) {
    var _dist_to_player = distance_to_object(objPlayer);
    if(_dist_to_player&lt;= check_size) {
        collided = true;
        fake_player_angle = point_direction(x, y, objPlayer.x, objPlayer.y);
        fake_player_dist = _dist_to_player;
        instance_destroy(objPlayer);
    }
}

if(collided) {
    if(anim_timer &lt; anim_length) {
        anim_timer++
        if(anim_timer == anim_length) {
            anim_finished = true;
            alarm[0] = 30;
        }
        
        
        if(anim_timer &lt; anim_length/2)
            warp_size = initial_warp_size + dsin(anim_timer * (90/(anim_length/2))) * (max_warp_size - initial_warp_size);
        else
            warp_size = dsin(anim_timer * (90/(anim_length/2))) * max_warp_size;
            
        fake_player_angle -= scrAlexEaseInSine(anim_timer, 0, 20, anim_length);
        fake_player_actual_angle -= scrAlexEaseInSine(anim_timer, 0, 20, anim_length);
        fake_player_dist = scrAlexEaseInSine(anim_timer, check_size, 0, anim_length);
        fake_player_scale = scrAlexEaseInSine(anim_timer, 1, 0, anim_length);
        shader_timer_spd = scrAlexEaseOutSine(anim_timer, 0.003, 0.020, anim_length);
        
        fake_player_x = x + lengthdir_x(fake_player_dist, fake_player_angle);
        fake_player_y = y + lengthdir_y(fake_player_dist, fake_player_angle);
    }
}

if(anim_finished) {
    spark_img_index += spark_img_spd;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the warp &amp; animations

if(!surface_exists(surf)) {
    surf = surface_create(surf_size, surf_size);
}

surface_set_target(surf);
    draw_clear_alpha(c_black, 0);
    draw_set_circle_precision(32);
    draw_circle(middle, middle, warp_size, false);
    draw_set_circle_precision(24);
    
    with(objStageEndWarpPart) {
        draw_sprite_ext(sprite_index, 0, x, y, image_xscale, image_yscale, 0, -1, 1);
    }
    
    if(anim_finished &amp;&amp; spark_img_index &lt;= sprite_get_number(sprAlexPlayerBloodSplatter) - 1) {
        draw_sprite_ext(sprAlexPlayerBloodSplatter, spark_img_index, middle, middle, 2, 2, 0, -1, 1);
    }
surface_reset_target();

shader_timer += shader_timer_spd;

shader_set(shader);
    shader_set_uniform_f(u_time, shader_timer);
    draw_surface(surf, x - middle, y - middle);
shader_reset();

if(collided) {
    draw_sprite_ext(sprPlayerFall, 0, fake_player_x, fake_player_y, fake_player_scale, fake_player_scale, fake_player_actual_angle, -1, 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

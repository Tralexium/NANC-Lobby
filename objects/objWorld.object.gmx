<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//make sure we never have more than one world object

if (instance_number(object_index) &gt; 1)
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init pause UI vars

pause_timer = 0;  // timer used for pause animation stuff
pause_anim_timer = 0;
pause_anim_timer_length = 20;
pause_anim_progress = 0;  // 0: start, 1: finish
pause_input_delay = 0;
pause_music_fade_time = 500;
pause_music_volume = .4;

// Top options
pause_top_option_num = -1;
pause_top_option_text[0] = "Resume";
pause_top_option_text[1] = "Cosmetics";
pause_top_option_text[2] = "Options";
pause_top_option_text[3] = "Exit Game";
pause_top_option_selected = false;
pause_top_option_theta = 0;
pause_top_option_anim_spd = 20;
pause_top_option_text_angle = 0;
pause_top_option_text_scale = 1;
pause_top_option_arrow_alpha = 0;
pause_top_option_arrow_move = 0;

// Visuals
pause_surf_blur_intensity = 0;
pause_surf_blur_max_intensity = 6;
pause_bar_scroll_speed = 0.5;
pause_bar_scroll_min_speed = 0.5;
pause_bar_scroll_max_speed = 8;
pause_bar_y = -96;
pause_bar_rise_distance = 72;
pause_bar_render_x = 0;
pause_bar_length = 32;
pause_bar_height = 96;
pause_BG_alpha = 0;
pause_BG_max_alpha = .3;
pause_BG_x = 0;
pause_BG_y = 0;
pause_BG_scroll_h_speed = 0.5;
pause_BG_scroll_v_speed = 0.5;
pause_BG_col = c_white;
pause_BG_col1 = $ceb85a;
pause_BG_col2 = $702a9c;
pause_sprite_x = display_get_gui_width() / 2;
pause_sprite_y = display_get_gui_height() / 2;
pause_sprite_alpha = 0;
pause_navigation_text_alpha = 0;
pause_navigation_text_travel = 0;
pause_navigation_text_travel_distance = 64;
pause_navigation_text_y = display_get_gui_height() - pause_bar_rise_distance - 16;
pause_fade_spd = .15;

// Option contents
pause_cosmetics_alpha = 0;
pause_options_alpha = 0;
pause_options_keyboard_alpha = 0;
pause_options_controller_alpha = 0;
pause_exit_alpha = 0;
pause_options_keybind_menu = 0;  // 0: general, 1: keyboard, 2: controller
pause_cosmetic_index = 0;
pause_cosmetic_max_index = 16;
pause_cosmetic_image_index = 0;
pause_cosmetic_image_index_spd = 0.2;
pause_cosmetic_slot_cursor_index = 0;
pause_cosmetic_slot_cursor_index_spd = .3;
pause_cosmetic_slot_cursor_scale = 1;
pause_cosmetic_slot_sep = 48 + 16;
pause_cosmetic_x = 100;
pause_cosmetic_hat_y = 180;
pause_cosmetic_pet_y = 430;
pause_cosmetic_tiles_per_line = 5;
pause_cosmetic_kid_x = display_get_gui_width() - 240;
pause_cosmetic_kid_y = display_get_gui_height()/2;
pause_options_index = 0;
pause_options_seperation = 48;
pause_options_scroll_spd = .1;
pause_options_upper_threshold = pause_bar_rise_distance + 16;
pause_options_bottom_threshold = display_get_gui_height() - pause_bar_rise_distance - 60;
pause_options_threshold_space = 32;
pause_options_x = 150;
pause_options_y = 150;
pause_options_w = display_get_gui_width() - 150;
pause_options_target_y = pause_options_y;
pause_options_keyboard_target_y = pause_options_y;
pause_options_controller_target_y = pause_options_y;
pause_options_max_index = 7;
pause_options_keyboard_index = 0;
pause_options_keyboard_max_index = 11;
pause_options_controller_index = 0;
pause_options_controller_max_index = 11;
pause_options_volume_bars = 10;
pause_options_volume_bar_sep = 16;
pause_options_reset_keybinds_mix = 0; // 0: white, 1: red
pause_options_reset_col = $e8e0df;
pause_exit_index = 0;
pause_exit_max_index = 1;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///return to previous window position/size (after using display_reset)

if (!window_get_fullscreen())
{
    window_set_position(global.windowXPrev,global.windowYPrev);
    window_set_size(global.windowWidthPrev,global.windowHeightPrev);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///pause current music when it's done fading out

audio_pause_sound(global.currentMusic);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>objWorld</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///game checks


//set linear interpolation depending on what the current smoothing setting is
texture_set_interpolation(global.smoothingMode);

//controller checks
if (global.controllerEnabled &amp;&amp; global.controllerIndex != -1)
{
    if (!global.controllerMode)  //check if we should switch to controller mode
    {
        if (keyboard_check_pressed(vk_anykey))
        {
            global.controllerDelay = -1;
        }
        else if (scrAnyControllerButton() != -1)
        {
            if (global.controllerDelay == -1)
                global.controllerDelay = global.controllerDelayLength;
        }
    }
    else    //check if we should switch to keyboard mode
    {
        if (keyboard_check_pressed(vk_anykey))
        {
            if (global.controllerDelay == -1)
                global.controllerDelay = global.controllerDelayLength;
        }
        else if (scrAnyControllerButton() != -1)
        {
            global.controllerDelay = -1;
        }
    }
    
    if (global.controllerDelay != -1)   //check delay for switching between keyboard/controller
    {
        if (global.controllerDelay == 0)    //delay over, toggle controller mode
        {
            global.controllerMode = !global.controllerMode;
            global.controllerDelay = -1;
        }
        else
        {
            global.controllerDelay -= 1;
        }
    }
}

if (global.gameStarted)
{
    //handle pausing
    if (global.pauseDelay &lt;= 0) //check if pause delay is active
    {
        if ((scrButtonCheckPressed(global.pauseButton) || (global.gamePaused &amp;&amp; scrButtonCheckPressed(global.menuBackButton))) &amp;&amp; !pause_top_option_selected)
        {
            event_user(1);
        }
    }
    else
    {
        global.pauseDelay -= 1;
    }
    
    if (!global.gamePaused) //check if the game is currently paused
    {
        if (scrButtonCheckPressed(global.restartButton))
        {
            //stop death sound/music
            audio_stop_sound(global.deathSound);
            audio_stop_sound(global.gameOverMusic);
            
            //resume room music
            audio_resume_sound(global.currentMusic);
            
            ///return to old gain if music is being faded out
            if (global.musicFading)
            {
                global.musicFading = false;
                audio_sound_gain(global.currentMusic,global.currentGain,0);
                alarm[0] = -1;   //reset alarm that pauses music
            }
            
            scrSaveGame(false); //save death/time
            scrLoadGame(false); //load the game
        }
        
        if (global.timeWhenDead || instance_exists(objPlayer))  //increment timer
        {
            global.timeMicro += delta_time;
            global.time += global.timeMicro div 1000000;
            global.timeMicro = global.timeMicro mod 1000000;
        }
    }
    
    scrSetRoomCaption();    //keep caption updated
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug keys

if (global.debugMode &amp;&amp; global.gameStarted &amp;&amp; !global.gamePaused)
{
    if (keyboard_check(vk_tab))             //drags player with mouse
    {
        with (objPlayer)
        {
            x = mouse_x;
            y = mouse_y;
        }
    }
    if (keyboard_check_pressed(vk_backspace))   //toggles debug overlay
    {
        global.debugOverlay = !global.debugOverlay;
    }
    if (keyboard_check_pressed(vk_insert))  //saves game
    {
        with (objPlayer)
        {
            scrSaveGame(true);
            audio_play_sound(sndItem,0,false);
        }
    }
    if (keyboard_check_pressed(vk_delete))  //toggles showing the hitbox
    {
        global.debugShowHitbox = !global.debugShowHitbox;
    }
    if (keyboard_check_pressed(vk_home))    //toggles god mode
    {
        global.debugNoDeath = !global.debugNoDeath;
    }
    if (keyboard_check_pressed(vk_end))     //toggles infinite jump
    {
        global.debugInfJump = !global.debugInfJump;
    }
    if (keyboard_check_pressed(vk_pageup) &amp;&amp; room != room_last)  //goes to next room
    {        
        with (objPlayer)
            instance_destroy();
    
        room_goto_next();
    }
    if (keyboard_check_pressed(vk_pagedown) &amp;&amp; room != room_first)    //goes to previous room
    {        
        with (objPlayer)
            instance_destroy();
    
        room_goto_previous();
    }
}

if (global.debugVisuals)
{
    with (objPlayer)    //sets appearance of the player to show god mode/infinite jump
    {
        if (global.debugNoDeath)     //makes player slightly transparent when god mode is on
            image_alpha = 0.7;
        else
            image_alpha = 1;
        
        if (global.debugInfJump)     //makes player turn blue when infinite jump is on
            image_blend = c_blue;
        else
            image_blend = c_white;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///function keys

// Get this cringe out of here
/*
if (keyboard_check_pressed(vk_escape))
{
    game_end();
}
*/

if (keyboard_check_pressed(vk_f2))
{
    scrRestartGame();
    exit;
}

if (keyboard_check_pressed(vk_f4) &amp;&amp; !global.gamePaused)    //toggle fullscreen mode
{
    global.fullscreenMode = !global.fullscreenMode;
    
    window_set_fullscreen(global.fullscreenMode);
    
    scrSaveConfig();    //save fullscreen setting
}

if (keyboard_check_pressed(vk_f5) &amp;&amp; !global.gamePaused)    //reset window size
{
    scrResetWindowSize();
}

if (keyboard_check(vk_control) &amp;&amp; keyboard_check_pressed(ord("M")) &amp;&amp; !global.gamePaused)
{
    //toggle mute music setting
    scrToggleMusic();
    
    scrSaveConfig();    //save mute setting
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Manipulate pause UI vars

pause_timer++;

if(global.gamePaused) {
    if(pause_anim_timer &lt; pause_anim_timer_length) {
        pause_anim_timer++;
        pause_anim_progress = scrAlexEaseOutSine(pause_anim_timer, 0, 1, pause_anim_timer_length);
        
        if(pause_anim_progress &gt;= 1) {
            pause_top_option_num = 0;
            pause_top_option_theta = 0;
        }
    }
} else {
    if(pause_anim_timer &gt; 0) {
        pause_anim_timer--;
        pause_anim_progress = scrAlexEaseOutSine(pause_anim_timer, 0, 1, pause_anim_timer_length);
        
        if(pause_anim_progress &lt;= 0) {
            pause_top_option_num = -1;
            if (surface_exists(global.pauseSurf))
                surface_free(global.pauseSurf);  //free the surface
                
            instance_activate_all();  //reactivate objects
        }
    } 
}

// Dependent on pause_anim_progress
if(pause_anim_timer &lt; pause_anim_timer_length &amp;&amp; pause_anim_timer &gt; 0) {
    pause_sprite_y = display_get_gui_height() / 2 - 64 + (56 * pause_anim_progress);
    pause_navigation_text_travel = pause_navigation_text_travel_distance * pause_anim_progress;
    pause_surf_blur_intensity = ceil(pause_surf_blur_max_intensity * pause_anim_progress);
    pause_BG_alpha = pause_BG_max_alpha * pause_anim_progress;
    pause_bar_y = -pause_bar_height + (pause_bar_rise_distance * pause_anim_progress);
    pause_bar_scroll_speed = pause_bar_scroll_max_speed - (pause_bar_scroll_max_speed - pause_bar_scroll_min_speed) * pause_anim_progress;

    // Specifecally pause sprite and navigation info alpha
    if(global.gamePaused) {
        pause_sprite_alpha = min(pause_sprite_alpha + .1, 1);
        pause_navigation_text_alpha = min(pause_navigation_text_alpha + pause_fade_spd, 1);
    } else {
        pause_sprite_alpha = max(pause_sprite_alpha - .1, 0);
        pause_navigation_text_alpha = max(pause_navigation_text_alpha - pause_fade_spd, 0);
    }
}

// Non Dependent
pause_bar_render_x = (pause_bar_render_x + pause_bar_scroll_speed) mod pause_bar_length;
pause_BG_x += pause_BG_scroll_h_speed;
pause_BG_y += pause_BG_scroll_v_speed;
var col_amnt = abs(dsin(pause_timer/2));
pause_BG_col = merge_colour(pause_BG_col1, pause_BG_col2, col_amnt);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle pause input

var H = (scrButtonCheckPressed(global.menuRightButton) - scrButtonCheckPressed(global.menuLeftButton));
var V = (scrButtonCheckPressed(global.menuDownButton) - scrButtonCheckPressed(global.menuUpButton));
var _accept_press = scrButtonCheckPressed(global.menuAcceptButton);
var _back_press = (scrButtonCheckPressed(global.menuBackButton) || scrButtonCheckPressed(global.pauseButton));


if(global.gamePaused &amp;&amp; pause_anim_progress &gt;= 1) {
    pause_top_option_theta = min(pause_top_option_theta+pause_top_option_anim_spd, 180);
    
    var top_input = 0;
    if(!pause_top_option_selected)
        top_input = H;
        
    pause_top_option_num += top_input;
    if(top_input != 0)
        pause_top_option_theta = 0;
    if(pause_top_option_num &gt; 3)
        pause_top_option_num = 0;
    if(pause_top_option_num &lt; 0)
        pause_top_option_num = 3;
    
    pause_top_option_text_angle = dsin(pause_top_option_theta*2) * 5;
    pause_top_option_text_scale = 1 + dsin(pause_top_option_theta) * 0.2;
    pause_top_option_arrow_alpha = dsin(pause_top_option_theta/2);
    
    pause_top_option_arrow_move = abs(dsin(pause_timer*5) * 8);
    
    if(_accept_press &amp;&amp; !pause_top_option_selected) {
        if(pause_top_option_num != 0) {
            pause_top_option_selected = true;
            pause_input_delay = 1;
        } else {
            event_user(1);  // Unpause the game since option 0 is Resume
        }
    }
        
    
    // Control the pause content
    if(pause_top_option_selected) {
     
        switch(pause_top_option_num) {
            case 1:  // Cosmetics
                var _previous_index = pause_cosmetic_index;
                pause_cosmetic_index += H + (V * pause_cosmetic_tiles_per_line);
                
                // Transitions between the 2 cosmetic categories is more intuitive this way
                if(_previous_index &lt;= global.totalNumberOfHats &amp;&amp; pause_cosmetic_index &gt; global.totalNumberOfHats)
                    pause_cosmetic_index = global.totalNumberOfHats + 1;
                else if(_previous_index &gt; global.totalNumberOfHats &amp;&amp; pause_cosmetic_index &lt;= global.totalNumberOfHats)
                    pause_cosmetic_index = global.totalNumberOfHats;
                
                if(pause_cosmetic_index &gt; pause_cosmetic_max_index-1) pause_cosmetic_index -= pause_cosmetic_max_index;
                if(pause_cosmetic_index &lt; 0) pause_cosmetic_index += pause_cosmetic_max_index;
                
                if(!pause_input_delay)
                    scrPauseCosmeticsInput(pause_cosmetic_index, _accept_press, _back_press);
                break;
                
            case 2:  // Options
                switch(pause_options_keybind_menu) {
                    case 0:  // General options
                    default:
                        var _previous_options_index = pause_options_index;
                        pause_options_index += V;
                        pause_options_index = clamp(pause_options_index, 0, pause_options_max_index-1);
                        
                        if(V != 0) {
                            if(pause_options_index == 1)
                                audio_sound_gain(global.currentMusic, 1, pause_music_fade_time);
                            else if(_previous_options_index == 1)
                                audio_sound_gain(global.currentMusic, pause_music_volume, pause_music_fade_time);
                        }
                        
                        if(!pause_input_delay)
                            scrPauseOptionsInput(pause_options_index, _accept_press, _back_press, H);
                        break;
                    
                    case 1:  // Keyboard keybinds
                        if(!pause_setting_key)
                            pause_options_keyboard_index += V;
                        pause_options_keyboard_index = clamp(pause_options_keyboard_index, 0, pause_options_keyboard_max_index-1);
                        
                        if(!pause_input_delay)
                            scrPauseKeyboardInput(pause_options_keyboard_index, _accept_press, _back_press);
                        break;
                        
                    case 2:  // Controller keybinds
                        if(!pause_setting_key)
                            pause_options_controller_index += V;
                        pause_options_controller_index = clamp(pause_options_controller_index, 0, pause_options_controller_max_index-1);
                        
                        if(!pause_input_delay)
                            scrPauseControllerInput(pause_options_controller_index, _accept_press, _back_press);
                        break;
                }
                break;
                
            case 3:  // Exit
                pause_exit_index += V;
                pause_exit_index = clamp(pause_exit_index, 0, pause_exit_max_index-1);
                
                if(_back_press) {
                    pause_top_option_selected = false;
                }
                break;
        }
    }
}

pause_input_delay = max(pause_input_delay - 1, 0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle pause content animations &amp; reset indexes


if(pause_top_option_selected) {

    pause_sprite_alpha = max(pause_sprite_alpha - pause_fade_spd, 0);    

    if(pause_sprite_alpha == 0) {
        switch(pause_top_option_num) {
            case 1:  // Cosmetics
                pause_cosmetics_alpha = min(pause_cosmetics_alpha + pause_fade_spd, 1);
                pause_cosmetic_slot_cursor_scale = max(pause_cosmetic_slot_cursor_scale - 0.1, 1);
                break;
            case 2:  // Options
                pause_options_reset_keybinds_mix = max(pause_options_reset_keybinds_mix - 0.05, 0);
                pause_options_reset_col = merge_colour($e8e0df, $3fab63, pause_options_reset_keybinds_mix);
                switch(pause_options_keybind_menu) {
                    case 0:
                    default:
                        if(pause_options_keyboard_alpha == 0 &amp;&amp; pause_options_controller_alpha == 0) {
                            pause_options_alpha = min(pause_options_alpha + pause_fade_spd, 1);
                        } else {
                            pause_options_keyboard_alpha = max(pause_options_keyboard_alpha - pause_fade_spd, 0);
                            pause_options_controller_alpha = max(pause_options_controller_alpha - pause_fade_spd, 0);
                        }
                        break;
                        
                    case 1:
                        if(pause_options_alpha == 0) {
                            pause_options_keyboard_alpha = min(pause_options_keyboard_alpha + pause_fade_spd, 1);
                        } else {
                            pause_options_alpha = max(pause_options_alpha - pause_fade_spd, 0);
                        }
                        break;
                        
                    case 2:
                        if(pause_options_alpha == 0) {
                            pause_options_controller_alpha = min(pause_options_controller_alpha + pause_fade_spd, 1);
                        } else {
                            pause_options_alpha = max(pause_options_alpha - pause_fade_spd, 0);
                        }
                        break;
                }
                break;
            case 3:  // Exit
                pause_exit_alpha = min(pause_exit_alpha + pause_fade_spd, 1);
                break;
        }
    }
    
    /*
    if(pause_content_to_fade != -1 &amp;&amp; pause_sprite_alpha == 0)
        content_to_fade_in = min(content_to_fade_in + pause_fade_spd, 1);
    
    if(pause_options_keybind_menu != 0) {
        pause_options_alpha = max(pause_options_alpha - pause_fade_spd, 0);
    }
    */
    
    // Scrolling
    var _general_options_scroll_amnt = pause_options_index * pause_options_seperation;
    var _keyboard_options_scroll_amnt = pause_options_keyboard_index * pause_options_seperation;
    var _controller_options_scroll_amnt = pause_options_controller_index * pause_options_seperation;
    var _scroll_spd = pause_options_scroll_spd;
    
    pause_options_target_y = lerp(pause_options_target_y, pause_options_y-_general_options_scroll_amnt, _scroll_spd);
    pause_options_keyboard_target_y = lerp(pause_options_keyboard_target_y, pause_options_y-_keyboard_options_scroll_amnt, _scroll_spd);
    pause_options_controller_target_y = lerp(pause_options_controller_target_y, pause_options_y-_controller_options_scroll_amnt, _scroll_spd);
    
} else if(global.gamePaused &amp;&amp; pause_anim_progress &gt;= 1){
    if(pause_cosmetics_alpha == 0 &amp;&amp; pause_options_alpha == 0 &amp;&amp; pause_exit_alpha == 0) {
        pause_sprite_alpha = min(pause_sprite_alpha + pause_fade_spd, 1);
        pause_cosmetic_index = 0;
        pause_exit_index = 0;
        pause_options_index = 0;
        pause_options_target_y = pause_options_y;
        pause_options_keyboard_index = 0;
        pause_options_keyboard_target_y = pause_options_y;
        pause_options_controller_index = 0;
        pause_options_controller_target_y = pause_options_y;
    } else {
        pause_cosmetics_alpha = max(pause_cosmetics_alpha - pause_fade_spd, 0);
        pause_options_alpha = max(pause_options_alpha - pause_fade_spd, 0);
        pause_exit_alpha = max(pause_exit_alpha - pause_fade_spd, 0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pause &amp; Unpause the game

if (!global.gamePaused)  //game currently not paused, pause the game
{
    if (!global.noPause)
    {
        global.gamePaused = true;  //set the game to paused
        global.pauseDelay = global.pauseDelayLength; //set pause delay
        
        instance_deactivate_all(true);  //deactivate everything
        instance_activate_object(objPlayMusic);  // Reactivate the music object
                                                 // In case we want to configure it in the pause settings
        audio_sound_gain(global.currentMusic, pause_music_volume, pause_music_fade_time);
                                                 
        global.pauseSurf = surface_create(surface_get_width(application_surface),surface_get_height(application_surface));    //create new surface
        surface_copy(global.pauseSurf,0,0,application_surface);             //copy current screen to it
    }
}
else    //game currently paused, unpause the game
{
    global.gamePaused = false;  //set the game to unpaused
    global.pauseDelay = global.pauseDelayLength;     //set pause delay
    audio_sound_gain(global.currentMusic, 1, pause_music_fade_time);
    
    scrSaveConfig();    //save config in case volume levels were changed
    
    io_clear(); //clear input states to prevent possible pause strats/exploits
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///fade current music out
global.musicFading = true;
global.currentGain = audio_sound_get_gain(global.currentMusic);     //get current gain
audio_sound_gain(global.currentMusic,0,1000);                       //fade out music over 1 second

alarm[0] = 50;  //pause music when it's done fading
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///room checks

if (!instance_exists(objPlayMusic))  //make sure the play music object isn't in the current room
    scrGetMusic();  //find and play the proper music for the current room

room_speed = 50;    //make sure game is running at the correct frame rate
scrSetRoomCaption();    //make sure window caption stays updated
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Free global surfaces

surface_free(global.text_outline_surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize everything

//initialize all variables
scrInitializeGlobals();

//load the current config file, sets default config if it doesn't exist
scrLoadConfig();

room_goto_next();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Option strings &amp; vars for pause menu
// We create the after we initialized the keys

// General options
pause_options[0] = "Music";
pause_options[1] = "Volume Level";
pause_options[2] = "Screen Mode";
pause_options[3] = "Smoothing Mode";
pause_options[4] = "Vsync";
pause_options[5] = "Set Keyboard Controls";
pause_options[6] = "Controller Options";

// Other keybind related vars
pause_setting_key = false;

// Keyboard keybinds
pause_keybind[0] = "Left Button";
pause_keybind[1] = "Right Button";
pause_keybind[2] = "Up Button";
pause_keybind[3] = "Down Button";
pause_keybind[4] = "Jump Button";
pause_keybind[5] = "Shoot Button";
pause_keybind[6] = "Restart Button";
pause_keybind[7] = "Skip Button";
pause_keybind[8] = "Suicide Button";
pause_keybind[9] = "Pause Button";
pause_keybind[10] = "Reset Controls";
// get current binds (currently they're assigned to the keyboard variant)
pause_keybind_key[0] = scrGetKeybind(global.leftButton[0]);
pause_keybind_key[1] = scrGetKeybind(global.rightButton[0]);
pause_keybind_key[2] = scrGetKeybind(global.upButton[0]);
pause_keybind_key[3] = scrGetKeybind(global.downButton[0]);
pause_keybind_key[4] = scrGetKeybind(global.jumpButton[0]);
pause_keybind_key[5] = scrGetKeybind(global.shootButton[0]);
pause_keybind_key[6] = scrGetKeybind(global.restartButton[0]);
pause_keybind_key[7] = scrGetKeybind(global.skipButton[0]);
pause_keybind_key[8] = scrGetKeybind(global.suicideButton[0]);
pause_keybind_key[9] = scrGetKeybind(global.pauseButton[0]);
pause_keybind_key[10] = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw debug overlay

if (global.debugOverlay)
{
    draw_set_color(c_black);
    draw_set_halign(fa_left);
    draw_set_font(fDefault12);
    
    var drawX = 0, drawY = 0, drawAlign = 0;
    if (instance_exists(objPlayer))
    {
        drawX = objPlayer.x;
        drawY = objPlayer.y;
        drawAlign = objPlayer.x mod 3;
    }
    
    scrDrawTextOutline(20,20,"X: "+string(drawX),c_black,c_white);
    scrDrawTextOutline(20,40,"Y: "+string(drawY),c_black,c_white);
    scrDrawTextOutline(20,60,"Align: "+string(drawAlign),c_black,c_white);
    scrDrawTextOutline(20,80,"Room name: "+room_get_name(room),c_black,c_white);
    scrDrawTextOutline(20,100,"Room number: "+string(room),c_black,c_white);
    scrDrawTextOutline(20,120,"God mode: "+string(global.debugNoDeath),c_black,c_white);
    scrDrawTextOutline(20,140,"Infinite jump: "+string(global.debugInfJump),c_black,c_white);
    scrDrawTextOutline(20,160,"FPS: "+string(fps),c_black,c_white);
    scrDrawTextOutline(20,180,"Real FPS: "+string(fps_real),c_black,c_white);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw pause screen OLD

/*
if (global.gamePaused)  //check if game is paused to draw the pause screen
{
    draw_clear(c_black);
    
    if (surface_exists(global.pauseSurf))       //check if surface exists before drawing it
        draw_surface(global.pauseSurf,0,0);
    
    draw_set_color(c_black);
    draw_set_alpha(0.4);
    
    draw_rectangle(-1,-1,display_get_gui_width(),display_get_gui_height(),0);    //darken the paused screen
    
    draw_set_alpha(1);
    
    draw_set_color(c_white);
    
    draw_set_halign(fa_center);
    draw_set_font(fDefault30);
    
    draw_text(display_get_gui_width()/2,display_get_gui_height()/2 - 24,"PAUSE");
    
    draw_set_halign(fa_left);
    draw_set_font(fDefault18);
    
    var t = global.time;
    var timeText = string(t div 3600) + ":";
    t = t mod 3600;
    timeText += string(t div 600);
    t = t mod 600;
    timeText += string(t div 60) + ":";
    t = t mod 60;
    timeText += string(t div 10);
    t = t mod 10;
    timeText += string(floor(t));
    
    draw_text(20,516,"Volume: " + string(global.volumeLevel) + "%");
    draw_text(20,541,"Deaths: " + string(global.death));
    draw_text(20,566,"Time: " + timeText);
}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw pause screen

if (pause_anim_progress &gt; 0)
{
    var text_col = $e8e0df;
    var outline_col = $2e1814;


    // Draw blurred surface
    ///////////////////////
    draw_clear(c_black);
    if (surface_exists(global.pauseSurf)) {  //check if surface exists before drawing it
        for(var i=0; i&lt;pause_surf_blur_intensity; i++) {
            for(var j=0; j&lt;pause_surf_blur_intensity; j++) {
                var surf_alpha = 1 / pause_surf_blur_intensity;
                draw_surface_ext(global.pauseSurf,i,j, 1, 1, 0, -1, surf_alpha);
            }
        }
    }    
    
    // Draw scrolling BG
    ////////////////////
    draw_sprite_tiled_ext(sprAlexPauseUIBG, 0, pause_BG_x, pause_BG_y, 1, 1, pause_BG_col, pause_BG_alpha);
    draw_sprite_tiled_ext(sprAlexPauseUIBG, 1, -pause_BG_x, -pause_BG_y, 1, 1, pause_BG_col, pause_BG_alpha);
    
    
    // Draw middle contents
    ///////////////////////
    // Pause sprite and navigation text
    draw_sprite_ext(sprAlexPause, 0, pause_sprite_x, pause_sprite_y, 1, 1, 0, -1, pause_sprite_alpha);
    
    var left_nav_x = pause_navigation_text_travel - 32;
    var right_nav_x = display_get_gui_width() - pause_navigation_text_travel + 32;
    var scr_to_get_key = scrGetKeybind;
    var array_index = 0;
    if(global.controllerMode) {
        scr_to_get_key = scrGetControllerBind;
        array_index = 1;
    }
    draw_set_font(fLobbySmall24);
    draw_set_alpha(pause_navigation_text_alpha);
    
    scrDrawTextSquareOutline(left_nav_x, pause_navigation_text_y, "Press ["+script_execute(scr_to_get_key,global.menuAcceptButton[array_index])+"] to select", text_col, outline_col, 2, fa_left, fa_bottom);
    scrDrawTextSquareOutline(right_nav_x, pause_navigation_text_y, "Press ["+script_execute(scr_to_get_key,global.menuBackButton[array_index])+"] to go back", text_col, outline_col, 2, fa_right, fa_bottom);
    draw_set_alpha(1);
    
    // General Options
    scrPauseCosmeticsDraw(text_col, outline_col);
    scrPauseOptionsDraw(text_col, outline_col);
    scrPauseKeyboardDraw(text_col, outline_col);
    scrPauseControllerDraw(text_col, outline_col);
    
    
    // Draw the top &amp; bottom bars
    /////////////////////////////
    var bar_segments = round(display_get_gui_width()/pause_bar_length);
    var pause_bar_bottom_y = display_get_gui_height()-pause_bar_y-pause_bar_height;
    var pause_bar_render_x_bottom = pause_bar_length - pause_bar_render_x;
    for(var i=0; i&lt;bar_segments; i++) {
        var segment_x = i*32;
        draw_sprite_part(sprAlexPauseUITopBar, 0, pause_bar_render_x, 0, pause_bar_length, pause_bar_height, segment_x, pause_bar_y);
        draw_sprite_part(sprAlexPauseUIBottomBar, 0, pause_bar_render_x_bottom, 0, pause_bar_length, pause_bar_height, segment_x, pause_bar_bottom_y);
    }
    
    
    // Draw top options
    ///////////////////
    var top_option_left_margin = 96;
    var top_option_sep = (display_get_gui_width() - top_option_left_margin * 2) / 3;
    var option_y = 32+24+pause_bar_y;
    var top_opt_angle = pause_top_option_text_angle;
    var top_opt_scale = pause_top_option_text_scale;
    draw_set_font(fMenuLobby12);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    for(var i=0; i&lt;4; i++) {
        var option_x = top_option_left_margin + ((top_option_sep-6) * i);
        var option_half_width = (string_width(pause_top_option_text[i])/2) + 20;
        var left_arrow_x = option_x - (option_half_width + pause_top_option_arrow_move);
        var right_arrow_x = option_x + (option_half_width + pause_top_option_arrow_move);
        
        if(i == pause_top_option_num) {
            draw_set_colour(text_col);
            draw_text_transformed(option_x, option_y, pause_top_option_text[i], top_opt_scale, top_opt_scale, top_opt_angle);
            
            if(!pause_top_option_selected) {
                if(i != 0)
                    draw_sprite(sprAlexPauseTopOptionArrow, 0, left_arrow_x, option_y);
                if(i != 3)
                    draw_sprite(sprAlexPauseTopOptionArrow, 1, right_arrow_x, option_y);
            }
        } else {
            draw_set_colour(pause_BG_col);
            draw_text(option_x, option_y, pause_top_option_text[i])
        }
    }
    
    
    // Draw bottom stats
    ////////////////////
    var gui_width = display_get_gui_width();
    var gui_height = display_get_gui_height();
    var bottom_text_y = gui_height-32-pause_bar_y;
    draw_set_color(text_col);
    draw_set_font(fMenuLobby12);
    
    var t = global.time;
    var timeText = string(t div 3600) + ":";
    t = t mod 3600;
    timeText += string(t div 600);
    t = t mod 600;
    timeText += string(t div 60) + ":";
    t = t mod 60;
    timeText += string(t div 10);
    t = t mod 10;
    timeText += string(floor(t));
    
    draw_set_halign(fa_left);
    draw_set_valign(fa_bottom);
    draw_set_colour(pause_BG_col);
    draw_text(32, bottom_text_y, "Time: " + timeText)
    
    draw_set_halign(fa_right);
    draw_text(gui_width-32, bottom_text_y,"Deaths: " + string(global.death));
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw debug mode text when we're on the title screen

if (global.debugMode &amp;&amp; room == rTitle)
{
    draw_set_color(c_red);
    draw_set_font(fDefault12);
    draw_set_halign(fa_left);
    
    draw_text(34,34,"Debug mode");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

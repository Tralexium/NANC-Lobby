<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-20</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init vars

anim_trg = 1;  // The trigger id that triggers the unlock animation
triggered = false;
all_collected = true;

// General
t = 0;
halo_angle = 0;
halo_spd = 1;
halo_scale = .4;
halo_add_scale = .1;  // Set in step
halo_alpha = 0.4;
overlay_flash_alpha = 0;
text_col = $e8fff5;
outline_col = $2e1814;

// Pre animation related
star_wiggle = 8;
star_wiggle_spd = 2;
star_shine_freq = 200;
star_shine_length = 25;
pad = 64;
start_x = x - (global.totalNumberOfCrystalStars / 2) * pad + (pad / 2);
start_y = y;

// Skip anim related
skip_t = 0;
skipped = false;
skip_text_x = 16;
skip_text_y = display_get_gui_height() - 24;
skip_target_x = 32;
skip_text_alpha = 0;
skip_text_font = fLobbySmall24;
skip_text_duration = 100;
var scr_to_get_key = scrGetKeybind;
var array_index = 0;
if(global.controllerMode) {
    scr_to_get_key = scrGetControllerBind;
    array_index = 1;
}
skip_string = "Press ["+script_execute(scr_to_get_key,global.skipButton[array_index])+"] to Skip";


// Animation related
circle_t = -15;
circle_current_star = 0;
circle_per_star_delay = 5;
circle_assemble_length = 15;
circle_time_until_spin = 40;
circle_spin_length = 120;
circle_spin_amount = (360 - 180) * -5;
circle_spin_finished = false;
circle_shrink_length = 25;
circle_shrink_finished = false;
circle_time_before_beam = 50;
circle_beam_length = 150;
circle_beam_alpha = 0;
circle_beam_alpha_2 = 0;
circle_beam_alpha_mult = 0;
circle_beam_pulse_speed = 0;
circle_beam_size = 128;
circle_beam_finished = false;
circle_beam_shot_length = 15;
circle_rad = 48;
circle_angle = 90;
old_x = 0;
old_y = 0;
final_star_col = c_white;
shake_amnt = 0;

for(var i=0; i&lt;global.totalNumberOfCrystalStars; i++) {
    star_collected[i] = global.crystalStar[i];

    if(!star_collected[i]) {
        all_collected = false;
    }
    
    star_x[i] = start_x + (i * pad);
    wiggle_t[i] = star_x[i] / 2;  // Used for moving the star up and down
    star_y[i] = start_y + dsin(wiggle_t[i]) * star_wiggle;
    star_shine_t[i] = star_shine_length + 1;  // Used for shine animations
    star_glow_alpha[i] = 0;
    star_shine_index[i] = sprite_get_number(sprAlexCrystalStarShine) - 1; 
}

// TODO: change these later
star_halo_col[0] = $b8a44f;
star_halo_col[1] = $70d588;
star_halo_col[2] = $9c60d9;
star_halo_col[3] = $4cb8e6;
star_halo_col[4] = $6c6cf2;
star_halo_col[5] = $e6ecc0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pre animation stuff

var _active = triggered &amp;&amp; all_collected;

t++


if(global.trigger[anim_trg] &amp;&amp; all_collected) {
    triggered = true;
    with(objPlayer)
        frozen = true;
}

halo_angle += halo_spd;
halo_add_scale = dsin(t)*.1;

if(_active) {
    halo_alpha = max(halo_alpha - 0.02, 0);
}

for(var i=0; i&lt;global.totalNumberOfCrystalStars; i++) {

    if(!_active) {
        wiggle_t[i] += star_wiggle_spd;
        star_y[i] = start_y + dsin(wiggle_t[i]) * star_wiggle;
    }
    
    if(wiggle_t[i] mod star_shine_freq == 0) {
        star_shine_t[i] = 0;
    }
    
    if(star_shine_t[i] &lt;= star_shine_length) {
        star_shine_t[i]++;
        star_glow_alpha[i] = dsin((180/star_shine_length) * star_shine_t[i]) / 2.5;
        
        var _shine_img_num = sprite_get_number(sprAlexCrystalStarShine) - 1;
        star_shine_index[i] = (_shine_img_num/star_shine_length) * star_shine_t[i];
    } else if (!_active){
        star_glow_alpha[i] = 0;
        star_shine_index[i] = sprite_get_number(sprAlexCrystalStarShine) - 1; 
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Active animation stuff

var _active = triggered &amp;&amp; all_collected;

if(_active) {

    circle_t++;
    
    // Assemble into a circle
    if(circle_current_star &lt; global.totalNumberOfCrystalStars) {
        event_user(0);
    
        if(circle_t &gt; circle_per_star_delay) {
            if(circle_t == circle_per_star_delay + 1) {
                old_x = star_x[circle_current_star];
                old_y = star_y[circle_current_star];
            }
        
            var _anim_t = clamp(circle_t - circle_per_star_delay, 0, circle_assemble_length);
            var _circle_angle = circle_angle + circle_current_star * (360 / global.totalNumberOfCrystalStars);
            var _target_x = x + lengthdir_x(circle_rad, _circle_angle);
            var _target_y = y + lengthdir_y(circle_rad, _circle_angle);
            
            star_x[circle_current_star] = scrAlexEaseInOutSine(_anim_t, old_x, _target_x, circle_assemble_length);
            star_y[circle_current_star] = scrAlexEaseInOutSine(_anim_t, old_y, _target_y, circle_assemble_length);
            
            if(_anim_t == circle_assemble_length) {
                circle_t = 0;
                circle_current_star++;
                
                star_glow_alpha[circle_current_star - 1] = 1;
                
                repeat(20) {
                    var _part_scale = random_range(.05, .3);
                    var _part = scrAlexMakeParticleExt(_target_x, _target_y, 20, sprAlexGlowOrb, 0, 0, 0, random(360), random_range(4, 8), -0.3 - _part_scale, star_halo_col[circle_current_star - 1], star_halo_col[circle_current_star - 1], bm_add, false, true, 0, depth, false);
                        _part.image_xscale = _part_scale;
                        _part.image_yscale = _part_scale;
                        _part.image_alpha = .7;
                }
            }
        }
    }
    
    // Start spinning
    else if (circle_t &gt; circle_time_until_spin &amp;&amp; !circle_spin_finished) {
        event_user(0);
        var _anim_t = clamp(circle_t - circle_time_until_spin, 0, circle_spin_length);
        
        circle_angle = scrAlexEaseInOutSine(_anim_t, 90, circle_spin_amount, circle_spin_length);
        
        for(var i=0; i&lt;global.totalNumberOfCrystalStars; i++) {
            var _circle_angle = circle_angle + i * (360 / global.totalNumberOfCrystalStars);
            star_x[i] = x + lengthdir_x(circle_rad, _circle_angle);
            star_y[i] = y + lengthdir_y(circle_rad, _circle_angle);
            
            var _part = scrAlexMakeParticleExt(star_x[i], star_y[i], 5, sprAlexCrystalStars, i, 0, 0, 0, 0, 0, -1, -1, bm_add, false, true, 0, depth, false);
                _part.image_alpha = .5;
        }
        
        if(_anim_t == circle_spin_length) {
            circle_spin_finished = true;
            circle_t = 0;
        }
    }
    
    // Collapse into rainbow star
    else if(circle_spin_finished &amp;&amp; !circle_shrink_finished) {
        var _anim_t = clamp(circle_t, 0, circle_shrink_length);
        
        circle_rad = scrAlexEaseInBack(_anim_t, 48, 0, circle_shrink_length);
        overlay_flash_alpha = scrAlexEaseInBack(_anim_t, 0, .3, circle_shrink_length);
        
        for(var i=0; i&lt;global.totalNumberOfCrystalStars; i++) {
            var _circle_angle = circle_angle + i * (360 / global.totalNumberOfCrystalStars);
            star_x[i] = x + lengthdir_x(circle_rad, _circle_angle);
            star_y[i] = y + lengthdir_y(circle_rad, _circle_angle);
            star_glow_alpha[i] = scrAlexEaseInBack(_anim_t, 0, 1, circle_shrink_length);
            
            var _part = scrAlexMakeParticleExt(star_x[i], star_y[i], 5, sprAlexCrystalStars, i, 0, 0, 0, 0, 0, -1, -1, bm_add, false, true, 0, depth, false);
                _part.image_alpha = .5;
        }
        
        if(_anim_t == circle_shrink_length) {
            circle_shrink_finished = true;
            overlay_flash_alpha = 1;
            circle_t = 0;
            
            repeat(25) {
                var _col = make_colour_hsv(random(255), 50, 255);
                var _part_scale = random_range(.2, .5);
                var _part = scrAlexMakeParticleExt(x, y, irandom_range(40, 60), sprAlexGlowOrb, 0, 0, 0, random(360), random_range(6, 10), -0.1 - _part_scale/3, _col, _col, bm_add, false, true, 0, depth, false);
                    _part.image_xscale = _part_scale;
                    _part.image_yscale = _part_scale;
                    _part.image_alpha = .7;
            }
        }
    }
    
    // Start beam
    else if(circle_shrink_finished &amp;&amp; !circle_beam_finished) {
        overlay_flash_alpha -= 0.05;
        
        var _last_id = global.totalNumberOfCrystalStars - 1;
        
        final_star_col = make_colour_hsv(circle_t * 4, 50, 255);
        star_y[_last_id] = y + dsin(circle_t*star_wiggle_spd) * star_wiggle;
        
        if(circle_t &gt; circle_time_before_beam) {
            var _anim_t = clamp(circle_t - circle_time_before_beam, 0, circle_beam_length);
            
            circle_beam_alpha_mult = scrAlexEaseInSine(_anim_t, 0, 1, circle_beam_length);
            circle_beam_pulse_speed = scrAlexEaseInSine(_anim_t, 0, .35, circle_beam_length);
            circle_beam_size = scrAlexEaseInSine(_anim_t, 128, 0, circle_beam_length);
            
            circle_beam_alpha_2 -= circle_beam_pulse_speed;
            circle_beam_alpha = abs(frac(circle_beam_alpha_2)) * circle_beam_alpha_mult;
            
            if(_anim_t == circle_beam_length) {
                circle_beam_finished = true;
                circle_t = 0;
                
                overlay_flash_alpha = 1;
                circle_beam_alpha = 1;
                circle_beam_size = 96;
                shake_amnt = 7;
                
                with(objAlexLobbyFinalStageDoor)
                    locked = false;
            }
        }
    }
    
    // Shoot the beam and finish
    else if(circle_beam_finished) {
        overlay_flash_alpha -= 0.05;
        shake_amnt -= 0.15;
        
        var _anim_t = clamp(circle_t, 0, circle_beam_shot_length);
        circle_beam_size = scrAlexEaseInSine(_anim_t, 96, 0, circle_beam_shot_length);
        
        view_yview[0] += dsin(circle_t*50) * shake_amnt;
        
        if(_anim_t == circle_beam_shot_length &amp;&amp; overlay_flash_alpha &lt;= 0 &amp;&amp; shake_amnt &lt;= 0) {
            with(objPlayer)
                frozen = false;
        
            instance_destroy();
        }
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if the animation is skipped

var _active = triggered &amp;&amp; all_collected;

if(_active) {
    if(skip_t &lt; skip_text_duration) {
        skip_t++;
        skip_text_x = lerp(skip_text_x, skip_target_x, 0.1);
        skip_text_alpha = lerp(skip_text_alpha, 1, 0.1);
    } else {
        skip_text_alpha = max(skip_text_alpha - .02, 0);
    }
    
    if(scrButtonCheckPressed(global.skipButton) &amp;&amp; !skipped) {
        skipped = true;
        skip_t = skip_text_duration;
        circle_t = 0;
        circle_current_star = global.totalNumberOfCrystalStars;
        circle_spin_finished = true;
        circle_shrink_finished = true;
        circle_beam_finished = true;
        
        overlay_flash_alpha = 1;
        circle_beam_alpha = 1;
        circle_beam_size = 96;
        shake_amnt = 7;
        
        with(objAlexLobbyFinalStageDoor)
            locked = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Lower the glow of each star

for(var i=0; i&lt;global.totalNumberOfCrystalStars; i++) {
    star_glow_alpha[i] = max(star_glow_alpha[i] - .02, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw flash overlay

if(overlay_flash_alpha &gt; 0) {
    draw_set_colour(c_white);
    draw_set_alpha(overlay_flash_alpha);
    draw_set_blend_mode(bm_add);
    draw_rectangle(-1, -1, display_get_gui_width(), display_get_gui_height(), false);
    draw_set_alpha(1);
    draw_set_blend_mode(bm_normal);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw skip text

draw_set_font(skip_text_font);
draw_set_alpha(skip_text_alpha);
scrDrawTextSquareOutline(skip_text_x, skip_text_y, skip_string, text_col, outline_col, 2, fa_left, fa_bottom);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the stars

var halo_scale1 = halo_scale + halo_add_scale;
var halo_scale2 = halo_scale - halo_add_scale;

if(!circle_shrink_finished) {
    for(var i=0; i&lt;global.totalNumberOfCrystalStars; i++) {
    
        if(star_collected[i]) {
            // Draw halos
            draw_set_blend_mode(bm_add);
            draw_sprite_ext(sprAlexSecretHalo, 0, star_x[i], star_y[i], halo_scale1, halo_scale1, halo_angle, star_halo_col[i], halo_alpha);
            draw_sprite_ext(sprAlexSecretHalo, 0, star_x[i], star_y[i], halo_scale2, halo_scale2, -halo_angle, star_halo_col[i], halo_alpha);
            draw_set_blend_mode(bm_normal);
            
            // Draw star
            draw_sprite_ext(sprAlexCrystalStars, i, star_x[i], star_y[i], 1, 1, 0, -1, 1);
            
            // Draw glow
            draw_set_blend_mode(bm_add);
            draw_sprite_ext(sprAlexCrystalStars, i, star_x[i], star_y[i], 1, 1, 0, -1, star_glow_alpha[i]);
            draw_set_blend_mode(bm_normal);
            
            // Draw shine
            draw_sprite_ext(sprAlexCrystalStarShine, star_shine_index[i], star_x[i], star_y[i], 1, 1, 0, -1, 0.8);
        } else {
            // Draw star outline
            draw_sprite(sprAlexCrystalStarEmptySlot, 0, star_x[i], star_y[i]);
        }
    }
} else {
    
    // Draw a single star when all are combined
    
    var _last_id = global.totalNumberOfCrystalStars - 1;

    if(!circle_beam_finished) {
        // Draw star
        draw_sprite_ext(sprAlexCrystalStars, _last_id, star_x[_last_id], star_y[_last_id], 2, 2, 0, -1, .5);
        
        // Draw glow
        draw_set_blend_mode(bm_add);
        draw_sprite_ext(sprAlexCrystalStarMask, 0, star_x[_last_id], star_y[_last_id], 2, 2, 0, final_star_col, .6);
        draw_set_blend_mode(bm_normal);
    }
    
    // Draw beam
    if(circle_beam_size &gt; 0) {
        draw_set_alpha(circle_beam_alpha);
        draw_set_colour(final_star_col);
        draw_set_blend_mode(bm_add);
        draw_rectangle(x - circle_beam_size, y - 1000, x + circle_beam_size, y + 1000, false);
        draw_set_alpha(1);
        draw_set_blend_mode(bm_normal);
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

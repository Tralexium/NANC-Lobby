<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprCamera</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init vars and snap to player

snapSpd = 0.166; //determines how fast the camera snaps to the player (higher numbers follow the player slower), can be changed in creation code
check_dist = 128; // How far the camera must travel before activating certain objects
region_margin = 256; // How much leeway do we want to add in our object deactivation region
target_obj = objPlayer;
target_x = 0;
target_y = 0;
min_x = 0;
min_y = 0;
max_x = room_width - view_wview[0];
max_y = room_height - view_hview[0];
lock_x = -1;
lock_y = -1;
disable_objects = true;

shake_t = 0;
shake_dur = 0;  // How long the shake lasts for
shake_x_dist = 0;
shake_y_dist = 0;
shake_x_repeats = 1;  // each decimal is equal to one full sine movement
shake_y_repeats = 1;

opt_previous_x = view_xview[0];
opt_previous_y = view_yview[0];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Manipulate the cam coords

if (instance_exists(target_obj))
{
    if(lock_x != -1) {
        target_x = lock_x - view_wview[0]/2;
    } else {
        target_x = target_obj.x - view_wview[0]/2;
    }
    
    if(lock_y != -1) {
        target_y = lock_y - view_hview[0]/2;
    } else {
        target_y = target_obj.y - view_hview[0]/2;
    }
    
    event_user(0);
    
    view_xview[0] = lerp(view_xview[0], target_x, snapSpd);
    view_yview[0] = lerp(view_yview[0], target_y, snapSpd);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shake the camera

if(shake_t &lt; shake_dur) {
    shake_t = min(shake_t + 1, shake_dur);
    var _shake_x_theta = (shake_t / shake_dur) * (360 * shake_x_repeats);
    var _shake_y_theta = (shake_t / shake_dur) * (360 * shake_y_repeats);
    var _shake_power = 1 - shake_t / shake_dur;
    
    view_xview[0] += dcos(_shake_x_theta) * (shake_x_dist * _shake_power);
    view_yview[0] += dcos(_shake_y_theta) * (shake_y_dist * _shake_power);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Deactivate unnecessary objects

var _exceeded_check_dist = point_distance(view_xview[0], view_yview[0], opt_previous_x, opt_previous_y) &gt;= check_dist;

// Disable objects outside of the view
if(_exceeded_check_dist &amp;&amp; disable_objects) {
    opt_previous_x = view_xview[0];
    opt_previous_y = view_yview[0];
    
    instance_deactivate_region(view_xview[0] - region_margin,
                               view_yview[0] - region_margin,
                               view_wview[0] + region_margin*2,
                               view_hview[0] + region_margin*2,
                               false, true);
    instance_activate_region(view_xview[0] - region_margin,
                             view_yview[0] - region_margin,
                             view_wview[0] + region_margin*2,
                             view_hview[0] + region_margin*2,
                             true);

    // Always keep these active:
    instance_activate_object(objWorld);
    instance_activate_object(objImprovedSmoothingMode);
    instance_activate_object(objAlexCameraClamper);
    instance_activate_object(objAlexStarStageBG);
    instance_activate_object(objAlexObstacleRenderer);
    instance_activate_object(objBetterBlockCtrl);
    
    // Gimmicks
    // Platforms
    instance_activate_object(objAlexPlatformWheel);
    instance_activate_object(objAlexPlatformArrow);
    instance_activate_object(objAlexPlatformSpawner);
    instance_activate_object(objAlexPlatformKiller);
    instance_activate_object(objAlexFSPlatform);
    instance_activate_object(objAlexFSPathPlatform);
    // Color blocks
    instance_activate_object(objAlexColorBlock);
    instance_activate_object(objAlexColorBlockController);
    instance_activate_object(objAlexChangeColorBlockGlobals);
    // Snake block
    instance_activate_object(objAlexSnakeBlock);
    instance_activate_object(objAlexSnakeBlockBody);
    instance_activate_object(objAlexSnakeBlockTail);
    instance_activate_object(objAlexSnakeBlockDir);
    instance_activate_object(objAlexSnakeBlockEnd);
    // Cannon warp
    instance_activate_object(objAlexCannonWarp);
    // Orb blocks
    instance_activate_object(objAlexOrbBlockCircle);
    instance_activate_object(objAlexOrbBlockExpandingCircle);
    instance_activate_object(objAlexOrbBlockLine);
    instance_activate_object(objAlexPlasmaOrb);
    // Pandora box
    instance_activate_object(objAlexPandoraBox);
    instance_activate_object(objAlexPandoraBoxArea);
    instance_activate_object(objAlexPandoraBoxParticles);
    // Dark clones
    instance_activate_object(objAlexDarkClone);
    instance_activate_object(objAlexDarkCloneSpawnArea);
    instance_activate_object(objAlexDarkCloneDespawnArea);
    instance_activate_object(objAlexDarkClonePortal);
    instance_activate_object(objAlexDarkClonePortalPart);
    instance_activate_object(objAlexDarkCloneRenderer);
    // Eye Sentry
    instance_activate_object(objAlexEyeSentry);
    instance_activate_object(objAlexEyeSentryEnable);
    instance_activate_object(objAlexEyeSentryDisable);
    // Beam Obstacle
    instance_activate_object(objAlexBeamSpawner);
    instance_activate_object(objAlexActivateBeamSpawner);
    instance_activate_object(objAlexDeactivateBeamSpawner);
    // Circle Obstacle
    instance_activate_object(objAlexCircleSpawner);
    instance_activate_object(objAlexActivateCircleSpawner);
    instance_activate_object(objAlexDeactivateCircleSpawner);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clamp cam coords

target_x = clamp(target_x, min_x, max_x);
target_y = clamp(target_y, min_y, max_y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Snap to the target object

if (instance_exists(target_obj))
{
    if(lock_x != -1) {
        target_x = lock_x - view_wview[0]/2;
    } else {
        target_x = target_obj.x - view_wview[0]/2;
    }
    
    if(lock_y != -1) {
        target_y = lock_y - view_hview[0]/2;
    } else {
        target_y = target_obj.y - view_hview[0]/2;
    }
    
    event_user(0);
    view_xview[0] = target_x;
    view_yview[0] = target_y;
}

opt_previous_x = view_xview[0];
opt_previous_y = view_yview[0];
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

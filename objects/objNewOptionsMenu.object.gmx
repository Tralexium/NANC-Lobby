<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>select = global.menuSelectPrev[1];

canSelect = false; // If the player can select an option
switchMenu = false; // If it should switch to keyboard or controller settings
goBack = false; // Go back the title screen
timer = 0;
xSelector = 150;
ySelector = 80;
xSeperation = 800-150;
ySeperation = 70;
optionsNum = 7; //sets number of separate options available
volTimer = 0;

strSelect[0] = "Music";
strSelect[1] = "Volume Level";
strSelect[2] = "Screen Mode";
strSelect[3] = "Smoothing Mode";
strSelect[4] = "Vsync";
strSelect[5] = "Set Keyboard Controls";
strSelect[6] = "Controller Options";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// visuals vars

drawAlpha = 0; // The alpha of all drawn elements
arrowAlpha = 0; // Select arrow alpha
arrowXScale = 1;
arrowYScale = 1; // Scale of the arrow
arrowPosX = xSelector; // X position of the arrow
arrowPosY = ySelector+(ySeperation*select); // Y position of the arrow

volume_bars_amnt = 10;
volume_bar_sep = 16;
volume_increase = 100 / volume_bars_amnt;

holderScale = 1;
holderAlpha = 0;
holderMaxAlpha = .4;
holder_color = $2e1814; // Night blue black
holder_corner_rad = 24;
holder_h_pad = 0;
holder_h_final_pad = 40;
holder_v_pad = 24;
holder_y_correction = 6;

text_col = $e8e0df; // Greyish white
outline_size = 2;

navigation_text_alpha = 0;
navigation_text_y = display_get_gui_height() - 24;
navigation_text_travel = 0;
navigation_text_travel_distance = 64;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Switch to a different menu
if(goBack) // Go back to main menu
{
    with(objNewTitleMenu){
        can_interact = true;
    }
    instance_destroy();
}
else if (select == 5)   //go to the keyboard controls menu
{
    global.menuSelectPrev[1] = select;
    //instance_create(x,y,objKeyboardControlsMenu);
    instance_destroy();
}
else if (select == 6)   //go to the controller options menu
{
    global.menuSelectPrev[1] = select;
    //instance_create(x,y,objControllerMenu);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Input and draw

if(drawAlpha &lt; 1 &amp;&amp; !switchMenu){
    drawAlpha += .075;
    if(drawAlpha &gt;= 1){
        canSelect = true;
    }
}

if(switchMenu &amp;&amp; drawAlpha &gt; 0){
    canSelect = false;
    drawAlpha -= .075;
    arrowXScale = min(arrowXScale + .2, 2);
    arrowYScale = max(arrowYScale - .2, 0);
}

if(canSelect){
    // Option holder draw stuff
    holder_h_pad = lerp(holder_h_pad, holder_h_final_pad, .1);
    holderAlpha = lerp(holderAlpha, holderMaxAlpha, .05);
    navigation_text_alpha = min(navigation_text_alpha + .05, 1);
    navigation_text_travel = lerp(navigation_text_travel, navigation_text_travel_distance, .2);
}
else if(switchMenu)
{
    holderScale = lerp(holderScale, 0, .2);
    holderAlpha = lerp(holderAlpha, 0, .2);
    navigation_text_alpha = max(navigation_text_alpha - .05, 0);
}

if(canSelect){
    timer++;

    // Arrow related draw vars
    if(arrowAlpha &lt; 1){arrowAlpha += .05;}
    arrowPosX = xSelector-24 + (-1 * abs(dsin(timer*4)*10));
    arrowPosY = lerp(arrowPosY, ySelector+(ySeperation*select), .2);

    if (scrButtonCheckPressed(global.menuUpButton))
    {
        audio_play_sound(sndAlexMenuSwitchOption,0,false);
        select -= 1;
        if(select &lt; 0)
            select = optionsNum-1;
    }
    else if (scrButtonCheckPressed(global.menuDownButton))
    {
        audio_play_sound(sndAlexMenuSwitchOption,0,false);
        select += 1;
        if(select &gt; optionsNum-1)
            select = 0;
    }
    else if (scrButtonCheckPressed(global.menuBackButton) || keyboard_check_pressed(vk_escape))
    {
        audio_play_sound(sndAlexMenuGoBack,0,false);
    
        //save changes and go back
        scrSaveConfig();
        alarm[0] = 20;
        global.menuSelectPrev[1] = 0;
        switchMenu = true;
        goBack = true;
        canSelect = false;
        exit;
    }
    else if (scrButtonCheckPressed(global.menuAcceptButton) || keyboard_check_pressed(vk_enter))
    {
        if(select != 1) audio_play_sound(sndAlexMenuConfirm, 0, false);
    
        if (select == 0)    //toggle mute music
        {
            scrToggleMusic();
        }
        else if (select == 2)   //toggle fullscreen
        {
            global.fullscreenMode = !global.fullscreenMode;
            
            window_set_fullscreen(global.fullscreenMode);
        }
        else if (select == 3)   //toggle smoothing mode
        {
            global.smoothingMode = !global.smoothingMode;
        }
        else if (select == 4)   //toggle vsync mode
        {
            global.vsyncMode = !global.vsyncMode;
            
            scrSetVsync();
        }else if (select == 5 || select == 6)  //play a fade animation and go to either the controller or keyboard menu
        {
            scrSaveConfig();    //save changes
            alarm[0] = 60;
            switchMenu = true;
            canSelect = false;
            exit;
        }
    }
    
    
    if (select == 1)
    {        
        var changeV = false;
        if (scrButtonCheck(global.menuRightButton))  //raise volume
        {
            volTimer++;
            if (global.volumeLevel &lt; 100){
                if(volTimer == 1) changeV = true;
                else if(volTimer mod 4 == 0 &amp;&amp; volTimer &gt;= 15) changeV = true;
                
                if(changeV)
                {
                  global.volumeLevel = clamp(global.volumeLevel + volume_increase, 0, 100);
                  audio_play_sound(sndAlexMenuAwaitKeybind, 0, false);
                }
            }            
            
            audio_master_gain(global.volumeLevel/100);  //set master gain
        }
        else if (scrButtonCheck(global.menuLeftButton))  //lower volume
        {
            volTimer++;
            if (global.volumeLevel &gt; 0){
                if(volTimer == 1) changeV = true;
                else if(volTimer mod 4 == 0 &amp;&amp; volTimer &gt;= 15) changeV = true;
                
                if(changeV)
                {
                  global.volumeLevel = clamp(global.volumeLevel - volume_increase, 0, 100);
                  audio_play_sound(sndAlexMenuAwaitKeybind, 0, false);
                }
            }
                
            audio_master_gain(global.volumeLevel/100);  //set master gain
        }
        else
        {
          volTimer = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the UI

draw_set_font(fMenuLobby12);

for(var i = 0; i &lt; optionsNum; i++)
{
    var _y = ySelector+(ySeperation*i);
    var _holder_y = _y - holder_y_correction;
    draw_set_colour(holder_color)
    draw_set_alpha(holderAlpha);
    draw_roundrect_ext(xSelector - holder_h_pad, _holder_y - holder_v_pad, xSeperation + holder_h_pad, _holder_y + holder_v_pad, holder_corner_rad, holder_corner_rad, false);
    draw_set_alpha(drawAlpha);

    scrDrawTextSquareOutline(xSelector, _y, strSelect[i], text_col, holder_color, outline_size, fa_left, fa_middle);
}

draw_set_halign(fa_right);

if (global.muteMusic)
    scrDrawTextSquareOutline(xSeperation, ySelector, "Off", text_col, holder_color, outline_size, fa_right, fa_middle);
else
    scrDrawTextSquareOutline(xSeperation, ySelector, "On", text_col, holder_color, outline_size, fa_right, fa_middle);

var _bar_amnt = volume_bars_amnt;
var _sep = volume_bar_sep;
var _active_bars = round(global.volumeLevel / 10);
scrAlexDrawSegmentBar(xSeperation - (_sep * _bar_amnt), ySelector+ySeperation, _sep, _bar_amnt, _active_bars, sprAlexPauseActiveVolumeBar, sprAlexPauseInactiveVolumeBar);
    
if (global.fullscreenMode)
    scrDrawTextSquareOutline(xSeperation, ySelector+(ySeperation*2), "Fullscreen", text_col, holder_color, outline_size, fa_right, fa_middle);
else
    scrDrawTextSquareOutline(xSeperation, ySelector+(ySeperation*2), "Windowed", text_col, holder_color, outline_size, fa_right, fa_middle);

if (global.smoothingMode)
    scrDrawTextSquareOutline(xSeperation, ySelector+(ySeperation*3), "On", text_col, holder_color, outline_size, fa_right, fa_middle);
else
    scrDrawTextSquareOutline(xSeperation, ySelector+(ySeperation*3), "Off", text_col, holder_color, outline_size, fa_right, fa_middle);

if (global.vsyncMode)
    scrDrawTextSquareOutline(xSeperation, ySelector+(ySeperation*4), "On", text_col, holder_color, outline_size, fa_right, fa_middle);
else
    scrDrawTextSquareOutline(xSeperation, ySelector+(ySeperation*4), "Off", text_col, holder_color, outline_size, fa_right, fa_middle);

draw_sprite_ext(sprAlexPauseContentArrow, 0, arrowPosX, arrowPosY, arrowXScale, arrowYScale, 0, -1, arrowAlpha);

var left_nav_x = navigation_text_travel - 32;
var right_nav_x = display_get_gui_width() - navigation_text_travel + 32;
var scr_to_get_key = scrGetKeybind;
var array_index = 0;
if(global.controllerMode) {
    scr_to_get_key = scrGetControllerBind;
    array_index = 1;
}
draw_set_font(fLobbySmall24);
draw_set_alpha(navigation_text_alpha);

scrDrawTextSquareOutline(left_nav_x, navigation_text_y, "Press ["+script_execute(scr_to_get_key,global.menuAcceptButton[array_index])+"] to select", text_col, holder_color, 2, fa_left, fa_bottom);
scrDrawTextSquareOutline(right_nav_x, navigation_text_y, "Press ["+script_execute(scr_to_get_key,global.menuBackButton[array_index])+"] to go back", text_col, holder_color, 2, fa_right, fa_bottom);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

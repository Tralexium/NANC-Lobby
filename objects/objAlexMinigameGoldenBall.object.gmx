<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAlexMinigameGoldenBall</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init vars

with(objAlexMinigameCannonController)
    ball_counter++;

gravity = 0.1;
image_speed = 0;

active = false;  // Whether it can collide with the player
shrink = false;
brightness = 125;
glow_alpha = 0;
halo_alpha = 0;
halo_angle = 0;

image_blend = make_colour_hsv(0, 0, brightness);

max_spd = 9;
on_hit_spd = 7;

slow_down = false;
points_on_collision = 10;
points_on_destroy = 0;

collision_cooldown_t = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reward points &amp; effects

if(points_on_destroy &gt; 0) {
    global.lobbyMinigameScore += points_on_destroy;
    
    var _floating_score = instance_create(x, y, objAlexMinigameBallScoreText);
        _floating_score.text_score = points_on_destroy;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collisions

if(!active &amp;&amp; vspeed &gt; 0) {
    active = true;
    depth = -3;
}

if(collision_cooldown_t &gt; 0) {
    collision_cooldown_t--;
} else if(!shrink){

    // Player
    var _player = place_meeting(x + hspeed, y + vspeed, objPlayer);
    var _bullet =place_meeting(x + hspeed, y + vspeed, objBullet); 
    if((_player || _bullet) &amp;&amp; active &amp;&amp; !slow_down) {    
        global.lobbyMinigameScore += points_on_collision;
            
        var _floating_score = instance_create(x, y, objAlexMinigameBallScoreText);
            _floating_score.text_score = points_on_collision;
            
        if(x &lt; objAlexMinigameButton.x) {
            direction = random_range(85, 90);
        } else {
            direction = random_range(90, 95);
        }
        speed = on_hit_spd;
        
        collision_cooldown_t = 10;
        glow_alpha = 1;
    }
    
    // Solids
    if(place_meeting(x, y + vspeed, objAlexMinigameWall) &amp;&amp; y &gt; ystart) {
        if(!slow_down) {
            shrink = true;
            direction = random_range(60, 120);
            speed = max_spd/2;
            gravity = 1;
        } else {
            vspeed *= -1;
            collision_cooldown_t = 10;
        }
    }
}

if(shrink) {
    image_xscale -= .1;
    image_yscale = image_xscale;
    
    if(image_xscale &lt;= 0)
        instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Visuals

// Brightness
image_blend = make_colour_hsv(0, 0, brightness);
if(active) {
    brightness = min(brightness + 3, 255);
    halo_alpha = min(halo_alpha + 0.01, 0.3);
} else
    brightness = max(brightness - 3, 125);
    
// Image angle
image_angle -= hspeed*3;
halo_angle += 2 + (glow_alpha*15);

// Glow alpha
if(!slow_down)
    glow_alpha = lerp(glow_alpha, 0, 0.1);
else
    glow_alpha = min(glow_alpha + 0.02, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Slow the ball down before redeeming it at the end

slow_down = true;
gravity = 0;
friction = 0.1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw

var _glow_to_halo = glow_alpha/3;
var _halo_scale = (image_xscale+_glow_to_halo)*.25;
var _halo_scale_small = (image_xscale+_glow_to_halo)*.15;
var _halo_alpha = halo_alpha+_glow_to_halo;

draw_set_blend_mode(bm_add);
draw_sprite_ext(sprAlexChaseMonsterFlarePart, 0, x, y, _halo_scale, _halo_scale, halo_angle, $41b5f0, _halo_alpha);
draw_sprite_ext(sprAlexChaseMonsterFlarePart, 0, x, y, _halo_scale_small, _halo_scale_small, -halo_angle, $41b5f0, _halo_alpha);
draw_set_blend_mode(bm_normal);

draw_sprite_ext(sprite_index, 0, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
draw_sprite_ext(sprite_index, 1, x, y, image_xscale, image_yscale, 0, image_blend, image_alpha);

draw_set_blend_mode(bm_add);
draw_sprite_ext(sprite_index, 0, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha * glow_alpha);
draw_sprite_ext(sprite_index, 1, x, y, image_xscale, image_yscale, 0, image_blend, image_alpha * glow_alpha);
draw_set_blend_mode(bm_normal);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

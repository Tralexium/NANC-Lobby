<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAlexFullCompletionBox</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init vars

// Change these
hat_id = -1;
pet_id = -1;

// Calculate game completion
var _all_tasks = global.totalNumberOfStages + global.secretItemTotal + global.totalNumberOfCrystalStars + 1;  // The one is for clearing the game
var _finished_tasks = global.totalStagesCleared + global.totalSecretsFound + global.totalCrystalStarsFound + global.gameClear;

circle_num = 0;
circle_num_target = min(floor((100 / _all_tasks) * _finished_tasks), 100);  // for the cool circle animation
circle_t = 0;
circle_fade_dur = 20;
circle_alpha = 0;
circle_activation_dist = 55;

// General vars
colliding = false;
collected = false;
locked = true;

// Drawing related
timer = x/4;
draw_x = x;
draw_y = y;
arrow_x = x;
arrow_y = y;
arrow_image_index = 0;
lock_angle = 0;
lock_shake_amnt = 20;
lock_shake_limiter = 0;
halo_angle = 0;
halo_spin_spd = 1;
halo_alpha = .3;
halo_scale = .4;
halo_add_scale = .1;
halfs_distance = 0;
halfs_alpha = 1;

// Shader related
shader_surf = noone;
shader = sRainbowAura;
shader_timer = random(100);
u_time = shader_get_uniform(shader, "u_time");
u_visibility = shader_get_uniform(shader, "u_visibility");
shader_vis = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Free shader surf

surface_free(shader_surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Arrow above kid's head

arrow_image_index += .3;

var p = objAlexLobbyPlayer;
if(colliding &amp;&amp; instance_exists(p)) {
    arrow_x = p.x;
    arrow_y = p.y - 16;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Manipulate values &amp; check for player

if(place_meeting(x, y+16, objAlexLobbyPlayer) &amp;&amp; !collected) {
    colliding = true;
    
    // Check if the player collected the reward
    if(scrButtonCheckPressed(global.upButton)) {
        if(!locked) {
            collected = true;
            alarm[0] = 50;
            
            var preview = instance_create(x, y, objAlexCosmeticPreviewFromBox);            
            if(hat_id != -1) {
                global.playerHat[hat_id] = true;
                preview.hat_id = hat_id;
            }
            if(pet_id != -1) {
                global.playerPet[pet_id] = true;
                preview.pet_id = pet_id;
            }
            
            repeat(20) {
                instance_create(draw_x, draw_y, objAlexLootBoxStarPart);
            }
            audio_play_sound(sndAlexLootBoxOpen, 0, false);
        } else {
            lock_shake_limiter = lock_shake_amnt;
            audio_play_sound(sndAlexLootBoxLocked, 0, false);
        }
    }
} else {
    colliding = false;
}

timer++;

if(!collected) {
    draw_y = ystart + dsin(timer*2)*8;
} else {
    halo_spin_spd += .5;
    halo_alpha = max(halo_alpha - .05, 0);
    halo_scale = max(halo_scale - .02, 0);
    halfs_distance = lerp(halfs_distance, 24, .05);
    halfs_alpha = max(halfs_alpha - .05, 0);
}

halo_add_scale = dsin(timer)*.1;
lock_shake_limiter = max(lock_shake_limiter-1, 0);
lock_angle = dsin(timer*40)*lock_shake_limiter;
shader_vis = abs(dsin(timer))
halo_angle += halo_spin_spd;

// completion circle
if(locked) {
    if(instance_exists(objPlayer) &amp;&amp; distance_to_object(objPlayer) &lt;= circle_activation_dist) {
        circle_t = min(circle_t+1, circle_fade_dur);
    } else {
        circle_t = max(circle_t-1, 0);
    }
    
    circle_alpha = scrAlexEaseOutSine(circle_t, 0, 1, circle_fade_dur);
    if(circle_t == circle_fade_dur) {
        circle_num = lerp(circle_num, circle_num_target, 0.15);
    } else if(circle_t == 0) {
        circle_num = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Find out if the player got 100%

var _all_tasks = global.totalNumberOfStages + global.secretItemTotal + global.totalNumberOfCrystalStars + 1;  // The one is for clearing the game
var _finished_tasks = global.totalStagesCleared + global.totalSecretsFound + global.totalCrystalStarsFound + global.gameClear;

circle_num_target = min(floor((100 / _all_tasks) * _finished_tasks), 100);

if(circle_num_target == 100 &amp;&amp; locked)
    locked = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if the box has been collected

if(hat_id != -1) {
    if(global.playerHat[hat_id]) {
        instance_destroy();
    }
}

if(pet_id != -1) {
    if(global.playerPet[pet_id]) {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Assign the sprite's dimensions to the res uniform

shader_res[0] = sprite_width;
shader_res[1] = sprite_height;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if in view

if(!scrInView(200))
    exit;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw halo

var halo_scale1 = halo_scale + halo_add_scale;
var halo_scale2 = halo_scale - halo_add_scale;
var halo_scale3 = halo_scale;
var halo_scale4 = halo_scale/2;

draw_set_blend_mode(bm_add);
draw_sprite_ext(sprAlexChaseMonsterFlarePart, 0, draw_x, draw_y, halo_scale1, halo_scale1, halo_angle, $41b5f0, halo_alpha);
draw_sprite_ext(sprAlexChaseMonsterFlarePart, 0, draw_x, draw_y, halo_scale2, halo_scale2, -halo_angle, $41b5f0, halo_alpha);
draw_sprite_ext(sprAlexChaseMonsterFlarePart, 0, draw_x, draw_y, halo_scale3, halo_scale3, halo_angle/2, $41b5f0, halo_alpha/2);
draw_sprite_ext(sprAlexChaseMonsterFlarePart, 0, draw_x, draw_y, halo_scale4, halo_scale4, -halo_angle/2, $41b5f0, halo_alpha/2);
draw_set_blend_mode(bm_normal);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw box &amp; lock

if(locked) {
    shader_timer += 0.05;
    
    var _x_offset = sprite_get_xoffset(sprite_index);
    var _y_offset = sprite_get_yoffset(sprite_index);
    if(!surface_exists(shader_surf)) {
        shader_surf = surface_create(sprite_width, sprite_height);
        
        surface_set_target(shader_surf);
            draw_sprite_ext(sprite_index, image_index, _x_offset, _y_offset, 1, 1, 0, -1, 1);
        surface_reset_target();
    }
    
    // Draw box
    shader_set(shader);
        shader_set_uniform_f(u_time, shader_timer);
        shader_set_uniform_f(u_visibility, shader_vis);
        draw_surface_ext(shader_surf, draw_x-_x_offset, draw_y-_y_offset, 1, 1, 0, -1, image_alpha);
    shader_reset();
    
    // Draw lock
    draw_sprite_ext(sprAlexLootBoxLock, 0, draw_x, draw_y, 1, 1, lock_angle, -1, image_alpha);
} else {
    if(!collected) {
        draw_sprite_ext(sprite_index, image_index, draw_x, draw_y, image_xscale, image_yscale, 0, -1, image_alpha);
    } else {
        var _offset = sprite_height / 2;
        draw_sprite_part_ext(sprite_index, 0, 0, 0, sprite_width, sprite_height/2, draw_x-_offset, draw_y-halfs_distance-_offset, image_xscale, image_yscale, -1, halfs_alpha);
        draw_sprite_part_ext(sprite_index, 0, 0, _offset, sprite_width, sprite_height/2, draw_x-_offset, draw_y+halfs_distance, image_xscale, image_yscale, -1, halfs_alpha);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the "collect me" text

var text_col = $e8fff5;
var outline_col = $2e1814;

draw_set_font(fLobbySmall);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);

if(!locked &amp;&amp; !collected) {
    scrDrawTextOutline(draw_x, draw_y-32, "COLLECT ME!", text_col, outline_col);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the arrow

if(colliding &amp;&amp; !collected)
    draw_sprite(sprAlexPressUpArrow, arrow_image_index, arrow_x, arrow_y);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw completion ring

if(circle_alpha &gt; 0 &amp;&amp; locked) {
    var _ring_val = circle_num / 100;
    var _ring_x = draw_x;
    var _ring_y = (y - 48) - (20 * circle_alpha);
    var _accent_col = merge_colour($7b2fcc, $41b5f0, _ring_val);
    var _dark_col = $2e1814;
    
    draw_sprite_ext(sprAlexFullCompletionBoxCircle, 0, _ring_x, _ring_y, 1, 1, 0, _accent_col, circle_alpha);
    draw_sprite_ext(sprAlexFullCompletionBoxInnerCircle, 0, _ring_x, _ring_y, 1, 1, 0, _accent_col, circle_alpha/3);
    scrAlexDrawPieTexExt(_ring_x, _ring_y, _ring_val, sprAlexFullCompletionBoxInnerCircle, 0, _accent_col, circle_alpha);
    _ring_string = string(round(circle_num)) + "%";
    draw_set_font(fMenuLobby6);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_set_colour(_accent_col);
    draw_set_alpha(circle_alpha);
    draw_text(_ring_x, _ring_y + 2, _ring_string);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Prevent multiple instances existing at the same time
if (instance_number(object_index) &gt; 1){
    instance_destroy();
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shader related

void_surf = noone;

texture_sprite = sprAlexDarkCloneTexture;
texture_h_spd = 0.25;
texture_v_spd = 0.2;
outline_size = 2;
outline_col[0] = 204 / 255;  // R (0-1)
outline_col[1] = 47 / 255;  // G (0-1)
outline_col[2] = 123 / 255;  // B (0-1)

distort_sprite = sprAlexHeatHazeDistortionTex;
distort_size = 0.7;
distort_strength = 0.01;

shader_t = 0;
shader = sDarkVoid;
u_outline_w = shader_get_uniform(shader, "u_outline_w");
u_outline_h = shader_get_uniform(shader, "u_outline_h");
u_tex_size = shader_get_uniform(shader, "u_tex_size");
u_outline_color = shader_get_uniform(shader, "u_outline_color");
u_cam_pos = shader_get_uniform(shader, "u_cam_pos");
u_texture_h_offset = shader_get_uniform(shader, "u_texture_h_offset");
u_texture_v_offset = shader_get_uniform(shader, "u_texture_v_offset");
u_inner_texture = shader_get_sampler_index(shader, "u_inner_texture");

u_distort_tex = shader_get_sampler_index(shader, "distort_tex");
u_distort_time = shader_get_uniform(shader, "distort_time");
u_distort_size = shader_get_uniform(shader, "distort_size");
u_distort_strength = shader_get_uniform(shader, "distort_strength");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Free surface

surface_free(void_surf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Post process the dark voids

if(!surface_exists(void_surf)) {
    void_surf = surface_create(view_wview[0], view_hview[0]);
}

// Grab all the blocks and draw them onto the surface
surface_set_target(void_surf);
    draw_clear_alpha(c_black, 0);
    with(objAlexDarkVoid) {
        if(scrInView())
            draw_sprite_ext(sprite_index, image_index, x - view_xview[0]+4, y - view_yview[0]+4, image_xscale, image_yscale, image_angle, -1, image_alpha);
    }
surface_reset_target();

shader_t++;
var _distort_t = shader_t/400;
var _outline_w = outline_size / surface_get_width(void_surf);
var _outline_h = outline_size / surface_get_height(void_surf);
var _tex_size = sprite_get_width(texture_sprite) * 2;
var _h_tex_offset = (texture_h_spd * shader_t) / (surface_get_width(void_surf) / 16);
var _v_tex_offset = (texture_v_spd * shader_t) / (surface_get_height(void_surf) / 16);
var _inner_texture = sprite_get_texture(texture_sprite, 0);
var _distort_tex = sprite_get_texture(distort_sprite, 0);
cam_pos[0] = view_xview[0];
cam_pos[1] = view_yview[0];

texture_set_interpolation_ext(u_distort_tex, true);

shader_set(shader);
    // Void texture related
    shader_set_uniform_f(u_outline_w, _outline_w);
    shader_set_uniform_f(u_outline_h, _outline_h);
    shader_set_uniform_f(u_tex_size, _tex_size);
    shader_set_uniform_f_array(u_outline_color, outline_col);
    shader_set_uniform_f(u_texture_h_offset, _h_tex_offset);
    shader_set_uniform_f(u_texture_v_offset, _v_tex_offset);
    shader_set_uniform_f_array(u_cam_pos, cam_pos);
    texture_set_stage(u_inner_texture, _inner_texture);
    
    // Haze effect
    shader_set_uniform_f(u_distort_time, _distort_t);
    shader_set_uniform_f(u_distort_size, distort_size);
    shader_set_uniform_f(u_distort_strength, distort_strength);
    texture_set_stage(u_distort_tex, _distort_tex);
    
    draw_surface(void_surf, view_xview[0], view_yview[0]);
shader_reset();

texture_set_interpolation(false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

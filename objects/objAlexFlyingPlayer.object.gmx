<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprAlexFPBodyFlat</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprAlexFPHitbox</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init player vars

spd = 0;
move_spd = 8;
slow_spd = 4;
room_edge_margin = 16;

body_sprite = sprAlexFPBodyFlat;
feet_sprite = sprAlexFPFeetFlat;
body_scale = 2;
body_xflip = 1;
feet_x = x;
feet_y = y;
feet_snap_spd = 0.5;
hitbox_alpha = 0;

crosshair_x = x;
crosshair_y = y;
crosshair_move_dist = 0; //200;
crosshair_snap_spd = 0.25;
crosshair_render_distance = 0.5;  // 0: on player, 1: room center
crosshair_alpha = 0;
crosshair_angle = 0;
crosshair_scale = 2;

can_shoot = false;
bullet_speed = 10;
shoot_t = 0;
shoot_freq = 6;
charge_shot_dmg = 15;
charge_t = 0;
charge_dur = 35;
charge_cooldown = 30;
charge_alpha = 0;
charge_scale = 2;
charge_glow_alpha = 0;
charge_glow_alpha_t = 0;
charge_glow_freq = 7;
charge_finished_index = 10;
charge_finished_img_spd = 0.5;
charge_shot_index = 10;
charge_shot_img_spd = 0.5;

image_speed = 0.3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Kill player

with(instance_create(x, y, objPlayer))
    visible = false;
    
scrKillPlayer();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement &amp; Animations

var _x_move = (scrButtonCheck(global.rightButton) - scrButtonCheck(global.leftButton)); 
var _y_move = (scrButtonCheck(global.downButton) - scrButtonCheck(global.upButton));
var _action = (scrButtonCheck(global.jumpButton) || scrButtonCheck(global.shootButton));
var _dir = point_direction(0, 0, _x_move, _y_move);

if(abs(_x_move) + abs(_y_move) == 0) {
    spd = 0;
} else {
    // Movement
    spd = move_spd;
    if(_action) {
        spd = slow_spd;
    }

    x += lengthdir_x(spd, _dir);
    y += lengthdir_y(spd, _dir);
}

// Clamp position
x = clamp(x, room_edge_margin, room_width - room_edge_margin);
y = clamp(y, room_edge_margin, room_height - room_edge_margin);


// Crosshair
if(can_shoot) {
    crosshair_alpha = lerp(crosshair_alpha, 1, 0.15);
    crosshair_angle = lerp(crosshair_angle, 0, 0.15);
    crosshair_scale = lerp(crosshair_scale, 2, 0.15);
} else {
    crosshair_alpha = lerp(crosshair_alpha, 0, 0.15);
    crosshair_angle = lerp(crosshair_angle, 180, 0.15);
    crosshair_scale = lerp(crosshair_scale, 6, 0.15);
}
var _cross_target_x = lerp(x + lengthdir_x(crosshair_move_dist * abs(sign(spd)), _dir), room_width/2, crosshair_render_distance);
var _cross_target_y = lerp(y + lengthdir_y(crosshair_move_dist * abs(sign(spd)), _dir), room_height/2, crosshair_render_distance);
crosshair_x = lerp(crosshair_x, _cross_target_x, crosshair_snap_spd);
crosshair_y = lerp(crosshair_y, _cross_target_y, crosshair_snap_spd);

// Body animations
if(_x_move != 0) {
    body_sprite = sprAlexFPBodyTilted;
    feet_sprite = sprAlexFPFeetTilted;
    
    body_xflip = _x_move;
} else {
    body_sprite = sprAlexFPBodyFlat;
    feet_sprite = sprAlexFPFeetFlat;
    
    body_xflip = 1;
}
feet_x = lerp(feet_x, x, feet_snap_spd);
feet_y = lerp(feet_y, y, feet_snap_spd);


// Hitbox
if(_action) {
    hitbox_alpha = min(hitbox_alpha+0.1, 1);
} else {
    hitbox_alpha = max(hitbox_alpha-0.1, 0);
}


// Shooting
var _bullet_spd = 0; //28 * sign(abs(_x_move) + abs(_y_move));
var _bullet_dir = point_direction(0, 0, _x_move, _y_move);

if(can_shoot &amp;&amp; _action &amp;&amp; shoot_t &gt;= 0) {
    charge_t = min(charge_t+1, charge_dur+1);
    
    if(charge_t &gt;= charge_dur) {
        if(charge_t == charge_dur) {
            charge_alpha = 0;
            charge_finished_index = 0;
        }
        
        charge_glow_alpha_t += 180/charge_glow_freq;
        charge_glow_alpha = abs(dsin(charge_glow_alpha_t));
    } else {
        if(charge_t == 1) {
            shoot_t = 1;
            charge_alpha = 0;
            charge_scale = body_scale + 2;
        }
    
        charge_glow_alpha_t = 0;
        charge_alpha = min(charge_alpha+0.2, 1);
        charge_scale = max(charge_scale-0.1, body_scale);
    }
} else {
    if(charge_t &gt;= charge_dur) {
        if(can_shoot) {
            var _shot = scrAlexFPMakeBullet(charge_shot_dmg, bullet_speed, _bullet_spd, _bullet_dir);
                _shot.sprite_index = sprAlexFPChargedBullet;
                _shot.image_xscale = 4;
                _shot.image_yscale = 4;
        }
            
        charge_shot_index = 0;
        shoot_t = -charge_cooldown;
    }
    
    charge_t = 0;
    charge_glow_alpha = 0;
    charge_alpha = max(charge_alpha - 0.2, 0);
    if(charge_alpha == 0)
        charge_scale = body_scale + 2;
    
    shoot_t++;
    if(can_shoot &amp;&amp; shoot_t mod shoot_freq == 0 &amp;&amp; shoot_t &gt;= 0) {
        scrAlexFPMakeBullet(1, bullet_speed, bullet_speed, _bullet_dir);
    }
}

charge_finished_index += charge_finished_img_spd;
charge_shot_index += charge_shot_img_spd;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// God mode stuff

if(keyboard_check_pressed(vk_home))
    global.noDeath = !global.noDeath;

if(global.noDeath)
    image_alpha = 0.6;
else
    image_alpha = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlayerKiller">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy self

if(!global.noDeath &amp;&amp; other.image_alpha &gt;= 1) {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw all the player visuals

// Crosshair
draw_sprite_ext(sprAlexFPCrosshair, image_index*0.5, crosshair_x, crosshair_y, crosshair_scale*crosshair_render_distance, crosshair_scale*crosshair_render_distance, crosshair_angle, -1, crosshair_alpha);


// Charge shot
draw_set_blend_mode(bm_add);
draw_sprite_ext(sprAlexFPCharging, image_index, x, y, charge_scale, charge_scale, 0, -1, charge_alpha);
if(charge_finished_index &lt; sprite_get_number(sprAlexFPChargeFinished))
    draw_sprite_ext(sprAlexFPChargeFinished, charge_finished_index, x, y, body_scale, body_scale, 0, -1, 1);
if(charge_shot_index &lt; sprite_get_number(sprAlexFPChargeBulletFired))
    draw_sprite_ext(sprAlexFPChargeBulletFired, charge_shot_index, x, y, body_scale, body_scale, 0, -1, 1);
draw_set_blend_mode(bm_normal);

// Body
draw_sprite_ext(body_sprite, image_index, x, y, body_scale*body_xflip, body_scale, 0, -1, image_alpha);
draw_set_blend_mode(bm_add);
draw_sprite_ext(body_sprite, image_index, x, y, body_scale*body_xflip, body_scale, 0, -1, charge_glow_alpha);
draw_set_blend_mode(bm_normal);
draw_sprite_ext(feet_sprite, image_index, feet_x, feet_y, body_scale*body_xflip, body_scale, 0, -1, image_alpha);


// Hitbox
draw_sprite_ext(sprAlexFPHitbox, 0, x, y, body_scale, body_scale, 0, -1, hitbox_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSpecialNPCBartenderWalkClap</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init vars

image_speed = 0;

npc_name = "Bartender";
idle_sprite = sprSpecialNPCBartenderIdle2;
talking_sprite = sprSpecialNPCBartenderTalk2;
letter_sfx = sndAlexDialogSoundPiece;
cam_move_dur = 100;
last_cam_pos_x = x;
last_cam_pos_y = y;
zoom_dur = 100;
true_form_revealed = false;
end_cutscene = false;
room_to = rFinalBoss;

t = 0;
active = false;
show_black_bars = false;
bars_y = 0;
bars_target_y = 96;

walk_spd = 1;
walk_dist = 380;
walk_dist_traveled = 0;

silhouette_alpha = 1;
clapped = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init dialog related vars

dialog_list = ds_list_create();
dialog_list2 = ds_list_create();

dialog_list[|0] = "blablablabla..."

dialog_list2[|0] = "blablablabla... 1"
dialog_list2[|1] = "blablablabla... 2"
dialog_list2[|2] = "blablablabla... 3"
dialog_list2[|3] = "blablablabla... final"
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// destroy the dialog lists

ds_list_destroy(dialog_list);
ds_list_destroy(dialog_list2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go to the final boss room

// Re enable restart and pause
global.noRestart = false;
global.noPause = false;

global.autosave = true;

with(objPlayer)
    instance_destroy();  // so that the kid can spawn at the right pos

with(instance_create(0, 0, objAlexStageIntro)) {
    stage_title = "The Final Showdown";
    maker_name = "Tralexium";
}

room_goto(room_to);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reveal true form

true_form_revealed = true;

sprite_index = sprAlexFinalBossSmokeAppear
image_index = 0;
image_speed = 0.3;

audio_play_sound(sndAlexFinalStageCutsceneAppear, 0, false);
instance_create(x, y, objAlexScreenPulseEffect);

npc_name = "Venux"
idle_sprite = sprAlexFinalBossIdle;
talking_sprite = sprAlexFinalBossTalking;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn one of the 2 dialog boxes

dialog_box = instance_create(x, y, objAlexDialogBox);
dialog_box.npc_name = npc_name;
dialog_box.letter_sfx = letter_sfx;
if(!true_form_revealed)
    ds_list_copy(dialog_box.dialog_list, dialog_list);
else {
    dialog_box.npc_name_color = $7752ff;
    ds_list_copy(dialog_box.dialog_list, dialog_list2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Logic and animations


if(active) {
    t++;
    
    // Camera manipulation
    if(alarm[1] || true_form_revealed) {
        if(t &lt;= zoom_dur) {
            var _init_x = last_cam_pos_x;
            var _dest_x = x - view_wview[0]/2;
            var _init_y = last_cam_pos_y;
            var _dest_y = y - view_hview[0]/2;
            view_xview[0] = scrAlexEaseInOutSine(t, _init_x, _dest_x, zoom_dur);
            view_yview[0] = scrAlexEaseInOutSine(t, _init_y, _dest_y, zoom_dur);
            view_wview[0] = scrAlexEaseInOutSine(t, 800, 400, zoom_dur);
            view_hview[0] = scrAlexEaseInOutSine(t, 608, 304, zoom_dur);
        }
    } else if(t &lt;= cam_move_dur) {
        var _init_x = objAlexStarStageCam.x;
        var _dest_x = objPlayer.x + 200 - view_wview[0]/2;
        var _init_y = objAlexStarStageCam.y;
        var _dest_y = objPlayer.y - 64 - view_hview[0]/2;
        view_xview[0] = scrAlexEaseInOutSine(t, _init_x, _dest_x, cam_move_dur);
        view_yview[0] = scrAlexEaseInOutSine(t, _init_y, _dest_y, cam_move_dur);
        
        if(t == cam_move_dur) {
            last_cam_pos_x = _dest_x;
            last_cam_pos_y = _dest_y;
        }
    }
    
    // Face the player
    if(instance_exists(objPlayer)) {
        if(objPlayer.x &gt; x)
            image_xscale = 1;
        else
            image_xscale = -1;
    }
    
    // Walking
    if(walk_dist_traveled &lt; walk_dist) {
        x += walk_spd*image_xscale;
        walk_dist_traveled += walk_spd;
        
        if(walk_dist_traveled &gt; walk_dist/2) {
            silhouette_alpha = max(silhouette_alpha - 0.01, 0);
        }
        
        if(walk_dist_traveled &gt;= walk_dist) {
            show_black_bars = false;
            sprite_index = idle_sprite;
            image_speed = 0.2;
            alarm[0] = 80;
        }
    }
}

// Current Sprite
if(instance_exists(objAlexDialogBox)) {
    
    // Change the idle &amp; talking sprites
    // Also end the cutscene when out of text
    if(true_form_revealed) {
        if(objAlexDialogBox.dialog_index == 1) {
            idle_sprite = sprAlexFinalBossIdleSad;
            talking_sprite = sprAlexFinalBossTalkingSad;
        }
        if(objAlexDialogBox.dialog_index == 2) {
            idle_sprite = sprAlexFinalBossIdleMad;
            talking_sprite = sprAlexFinalBossTalkingMad;
        }
        if(objAlexDialogBox.dialog_index == 3) {
            idle_sprite = sprAlexFinalBossIdleExcited;
            talking_sprite = sprAlexFinalBossTalkingExcited;
        }
        
        // End cutscene and spawn transition
        if(objAlexDialogBox.end_reached &amp;&amp; !end_cutscene) {
            end_cutscene = true
            instance_create(x, y, objAlexLobbyBubbleTransitionOut);
            with(objAlexLobbyTransitionBubbleOut)
                sprite_index = sprAlexStarTransition;
    
            alarm[2] = 50;
        }
    }

    if(objAlexDialogBox.talking) {
        sprite_index = talking_sprite;
    } else {
        sprite_index = idle_sprite;
    }
    
    // Reveal true form
    if(objAlexDialogBox.end_reached &amp;&amp; !true_form_revealed &amp;&amp; !alarm[1]) {
        t = 0;
        
        alarm[1] = zoom_dur + 20;
    }
}

// Black bars
if(show_black_bars) {
    bars_y = lerp(bars_y, bars_target_y, 0.1);
} else {
    bars_y = lerp(bars_y, 0, 0.1);
}

// Claping
if(sprite_index == sprSpecialNPCBartenderWalkClap &amp;&amp; round(image_index) == 2 &amp;&amp; !clapped) {
    audio_play_sound(sndAlexFBClap, 0, false);
    clapped = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Activate cutscene

image_speed = 0.1;

global.noRestart = true;
global.noPause = true;

active = true;
show_black_bars = true;
with(objPlayer) frozen = true;
with(objAlexStarStageCam) active = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Do stuff

if(sprite_index == sprSpecialNPCBartenderWalkClap)
    clapped = false;

if(sprite_index == sprAlexFinalBossSmokeAppear) {
    sprite_index = idle_sprite;
    image_speed = 0.2;
    alarm[0] = 20;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the black bars

var _gui_width = display_get_gui_width();
var _gui_height = display_get_gui_height();

if(bars_y &gt; 1) {
    draw_set_colour(c_black);
    draw_rectangle(0, 0, _gui_width, bars_y, false);
    draw_rectangle(0, _gui_height, _gui_width, _gui_height - bars_y, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw self &amp; silhouette

draw_self();
draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, c_black, silhouette_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

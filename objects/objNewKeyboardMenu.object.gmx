<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>select = 0;

canSelect = false; // If the player can select an option
switchMenu = false; // If it should switch to keyboard or controller settings
goBack = false; // Go back the title screen
timer = 0;
xSelector = 150;
ySelector = 80;
xSeperation = 800-150;
ySeperation = 70;
optionsNum = 10; //sets number of separate options available
volTimer = 0;
moveTimer = 0;
moveTimerDelay = 25;
moveTimerRepeatSpd = 5;

yArrowLimit = 4 * ySeperation; // After the arrow passes this value the options start
              // scrolling upwards.
              
yScroll = 0;  // The options scroll based on this value
topFade = ySeperation;
bottomFade = ySelector + (6 * ySeperation);
thresholdSpace = ySeperation;

settingKey = false;     //sets whether or not a key is getting set
resetPrompt = false;    //shows the message that controls were reset

strSelect[0] = "Left Button";
strSelect[1] = "Right Button";
strSelect[2] = "Up Button";
strSelect[3] = "Down Button";
strSelect[4] = "Jump Button";
strSelect[5] = "Shoot Button";
strSelect[6] = "Restart Button";
strSelect[7] = "Skip Button";
strSelect[8] = "Pause Button";
strSelect[9] = "Reset Controls";

//get current controls
strKey[0] = scrGetKeybind(global.leftButton[0]);
strKey[1] = scrGetKeybind(global.rightButton[0]);
strKey[2] = scrGetKeybind(global.upButton[0]);
strKey[3] = scrGetKeybind(global.downButton[0]);
strKey[4] = scrGetKeybind(global.jumpButton[0]);
strKey[5] = scrGetKeybind(global.shootButton[0]);
strKey[6] = scrGetKeybind(global.restartButton[0]);
strKey[7] = scrGetKeybind(global.skipButton[0]);
strKey[8] = scrGetKeybind(global.pauseButton[0]);
strKey[9] = "";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// visuals vars

drawAlpha = 0; // The alpha of all drawn elements
arrowAlpha = 0; // Select arrow alpha
arrowXScale = 1;
arrowYScale = 1; // Scale of the arrow
arrowPosX = xSelector; // X position of the arrow
arrowPosY = ySelector+(ySeperation*select); // Y position of the arrow

holderScale = 1;
holderAlpha = 0;
holderMaxAlpha = .4;
holder_color = $2e1814; // Night blue black
holder_corner_rad = 24;
holder_h_pad = 0;
holder_h_final_pad = 40;
holder_v_pad = 24;
holder_y_correction = 6;

text_col = $e8e0df; // Greyish white
outline_size = 2;

reset_keybinds_color_mix = 0;
options_reset_col = $3fab63;
reset_keybinds_color = options_reset_col;

navigation_text_alpha = 0;
navigation_text_y = display_get_gui_height() - 24;
navigation_text_travel = 0;
navigation_text_travel_distance = 64;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Switch to a different menu
if(goBack) // Go back to main menu
{
    instance_create(x,y,objNewOptionsMenu);
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Input and draw

if(drawAlpha &lt; 1 &amp;&amp; !switchMenu){
    drawAlpha += .075;
    if(drawAlpha &gt;= 1){
        canSelect = true;
    }
}

if(switchMenu &amp;&amp; drawAlpha &gt; 0){
    canSelect = false;
    drawAlpha -= .075;
    arrowXScale = min(arrowXScale + .2, 2);
    arrowYScale = max(arrowYScale - .2, 0);
}

if(canSelect){
    // Option holder draw stuff
    holder_h_pad = lerp(holder_h_pad, holder_h_final_pad, .1);
    holderAlpha = lerp(holderAlpha, holderMaxAlpha, .05);
    navigation_text_alpha = min(navigation_text_alpha + .05, 1);
    navigation_text_travel = lerp(navigation_text_travel, navigation_text_travel_distance, .2);
}
else if(switchMenu)
{
    holderScale = lerp(holderScale, 0, .2);
    holderAlpha = lerp(holderAlpha, 0, .2);
    navigation_text_alpha = max(navigation_text_alpha - .05, 0);
}

if(canSelect){
    timer++;

    // Arrow related draw vars
    var _select_y = ySelector+(ySeperation*select);
    if(arrowAlpha &lt; 1){arrowAlpha += .05;}
    arrowPosX = xSelector-24 + (-1 * abs(dsin(timer*4)*10));
    arrowPosY = lerp(arrowPosY, _select_y, .2);
    arrowPosY = min(arrowPosY, yArrowLimit);
    
    if(_select_y &gt;= yArrowLimit) {
        yScroll = lerp(yScroll, _select_y - yArrowLimit, 0.2);
    } else {
        yScroll = lerp(yScroll, 0, 0.2);
    }

    if(!settingKey) {
        var _change_index = (scrButtonCheck(global.menuDownButton) - scrButtonCheck(global.menuUpButton))
        if(_change_index != 0) {
            moveTimer++;
            
            if(moveTimer == 1 || (moveTimer mod moveTimerRepeatSpd == 0 &amp;&amp; moveTimer &gt;= moveTimerDelay)) {
                select += _change_index;
                audio_play_sound(sndAlexMenuSwitchOption,0,false);
                if(select &lt; 0)
                    select = optionsNum-1;
                if(select &gt; optionsNum-1)
                    select = 0;
            }
        } else {
            moveTimer = 0;
        }
        
        if (scrButtonCheckPressed(global.menuBackButton) || keyboard_check_pressed(vk_escape))
        {
            audio_play_sound(sndAlexMenuGoBack,0,false);
        
            //save changes and go back
            scrSaveConfig();
            alarm[0] = 20;
            switchMenu = true;
            goBack = true;
            canSelect = false;
            exit;
        }
        else if (scrButtonCheckPressed(global.menuAcceptButton) || keyboard_check_pressed(vk_enter))
        {
            if (select != 9)
            {
                settingKey = true;
                audio_play_sound(sndAlexMenuAwaitKeybind, 0, false);
            }
            else
            {
                //default controls
                global.leftButton[0] = vk_left;
                global.rightButton[0] = vk_right;
                global.upButton[0] = vk_up;
                global.downButton[0] = vk_down;
                global.jumpButton[0] = vk_shift;
                global.shootButton[0] = ord("Z");
                global.restartButton[0] = ord("R");
                global.skipButton[0] = ord("S");
                global.suicideButton[0] = ord("Q");
                global.pauseButton[0] = vk_escape;
                
                audio_play_sound(sndAlexMenuResetControls, 0, false);
                reset_keybinds_color_mix = 1;
            }
        }
    } else {
        if (keyboard_check_pressed(vk_anykey))  //check if a key is being pressed and if it is, store that key
        {
            var keyChange;
            
            keyChange = keyboard_key;
            
            if (keyChange == 160 || keyChange == 161)   //check if current key pressed is either shift key
                keyChange = 16; //set it to work for both shift keys
            
            if (select == 0) {global.leftButton[0] = keyChange;}
            else if (select == 1) {global.rightButton[0] = keyChange;}
            else if (select == 2) {global.upButton[0] = keyChange;}
            else if (select == 3) {global.downButton[0] = keyChange;}
            else if (select == 4) {global.jumpButton[0] = keyChange;}
            else if (select == 5) {global.shootButton[0] = keyChange;}
            else if (select == 6) {global.restartButton[0] = keyChange;}
            else if (select == 7) {global.skipButton[0] = keyChange;}
            else if (select == 8) {global.pauseButton[0] = keyChange;}
            
            settingKey = false;
            audio_play_sound(sndAlexMenuConfirm, 0, false);
        }
        else if (scrAnyControllerButton() != -1)    //check if a controller button was pressed, exit prompt
        {
            audio_play_sound(sndAlexMenuError, 0, false);
            settingKey = false;
        }
    }
}

//get current controls
strKey[0] = scrGetKeybind(global.leftButton[0]);
strKey[1] = scrGetKeybind(global.rightButton[0]);
strKey[2] = scrGetKeybind(global.upButton[0]);
strKey[3] = scrGetKeybind(global.downButton[0]);
strKey[4] = scrGetKeybind(global.jumpButton[0]);
strKey[5] = scrGetKeybind(global.shootButton[0]);
strKey[6] = scrGetKeybind(global.restartButton[0]);
strKey[7] = scrGetKeybind(global.skipButton[0]);
strKey[8] = scrGetKeybind(global.pauseButton[0]);
strKey[9] = "";

reset_keybinds_color_mix = max(reset_keybinds_color_mix - 0.05, 0);
reset_keybinds_color = merge_colour(text_col, options_reset_col, reset_keybinds_color_mix);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the UI

draw_set_font(fMenuLobby12);

for(var i = 0; i &lt; optionsNum; i++)
{
    var _y = ySelector+(ySeperation*i) - yScroll;
    var _holder_y = _y - holder_y_correction;
    
    var _upper_threshold_alpha = clamp(((_y + thresholdSpace) - topFade)/thresholdSpace, 0, 1)
    var _bottom_threshold_alpha = clamp(((bottomFade + thresholdSpace) - _y)/thresholdSpace, 0, 1)
    var _final_holder_alpha = holderAlpha * _upper_threshold_alpha * _bottom_threshold_alpha;
    
    draw_set_colour(holder_color)
    draw_set_alpha(_final_holder_alpha);
    draw_roundrect_ext(xSelector - holder_h_pad, _holder_y - holder_v_pad, xSeperation + holder_h_pad, _holder_y + holder_v_pad, holder_corner_rad, holder_corner_rad, false);
    
    var _final_text_alpha = drawAlpha * _upper_threshold_alpha * _bottom_threshold_alpha;
    draw_set_alpha(_final_text_alpha);

    if(i == 9)
        scrDrawTextSquareOutline(xSelector, _y, strSelect[i], reset_keybinds_color, holder_color, outline_size, fa_left, fa_middle);
    else
        scrDrawTextSquareOutline(xSelector, _y, strSelect[i], text_col, holder_color, outline_size, fa_left, fa_middle);
        
    if(i == select)
    {
        if (settingKey) //key prompt
        {
            scrDrawTextSquareOutline(xSeperation, _y, "Awaiting input", text_col, holder_color, outline_size, fa_right, fa_middle);
        }
    }
    
    if (!settingKey || i != select)    //shows current key
    {
        scrDrawTextSquareOutline(xSeperation, _y, strKey[i], text_col, holder_color, outline_size, fa_right, fa_middle);
    }
}

draw_sprite_ext(sprAlexPauseContentArrow, 0, arrowPosX, arrowPosY, arrowXScale, arrowYScale, 0, -1, arrowAlpha);

var left_nav_x = navigation_text_travel - 32;
var right_nav_x = display_get_gui_width() - navigation_text_travel + 32;
var scr_to_get_key = scrGetKeybind;
var array_index = 0;
if(global.controllerMode) {
    scr_to_get_key = scrGetControllerBind;
    array_index = 1;
}
draw_set_font(fLobbySmall24);
draw_set_alpha(navigation_text_alpha);

scrDrawTextSquareOutline(left_nav_x, navigation_text_y, "Press ["+script_execute(scr_to_get_key,global.menuAcceptButton[array_index])+"] to set key", text_col, holder_color, 2, fa_left, fa_bottom);
scrDrawTextSquareOutline(right_nav_x, navigation_text_y, "Press ["+script_execute(scr_to_get_key,global.menuBackButton[array_index])+"] to go back", text_col, holder_color, 2, fa_right, fa_bottom);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
